# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
"""
cv2.cv2 - Python wrapper for OpenCV.
"""

from typing import *

from numpy import ArrayLike, Scalar, ndarray

class AKAZE(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        descriptor_type=...,
        descriptor_size=...,
        descriptor_channels=...,
        threshold=...,
        nOctaves=...,
        nOctaveLayers=...,
        diffusivity=...,
    ) -> retval:
        """
        .   @brief The AKAZE constructor
        .
        .       @param descriptor_type Type of the extracted descriptor: DESCRIPTOR_KAZE,
        .       DESCRIPTOR_KAZE_UPRIGHT, DESCRIPTOR_MLDB or DESCRIPTOR_MLDB_UPRIGHT.
        .       @param descriptor_size Size of the descriptor in bits. 0 -\> Full size
        .       @param descriptor_channels Number of channels in the descriptor (1, 2, 3)
        .       @param threshold Detector response threshold to accept point
        .       @param nOctaves Maximum octave evolution of the image
        .       @param nOctaveLayers Default number of sublevels per scale level
        .       @param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, DIFF_WEICKERT or
        .       DIFF_CHARBONNIER
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def getDescriptorChannels(self) -> retval:
        """
        .
        """
        ...
    def getDescriptorSize(self) -> retval:
        """
        .
        """
        ...
    def getDescriptorType(self) -> retval:
        """
        .
        """
        ...
    def getDiffusivity(self) -> retval:
        """
        .
        """
        ...
    def getNOctaveLayers(self) -> retval:
        """
        .
        """
        ...
    def getNOctaves(self) -> retval:
        """
        .
        """
        ...
    def getThreshold(self) -> retval:
        """
        .
        """
        ...
    def setDescriptorChannels(self, dch) -> None:
        """
        .
        """
        ...
    def setDescriptorSize(self, dsize) -> None:
        """
        .
        """
        ...
    def setDescriptorType(self, dtype) -> None:
        """
        .
        """
        ...
    def setDiffusivity(self, diff) -> None:
        """
        .
        """
        ...
    def setNOctaveLayers(self, octaveLayers) -> None:
        """
        .
        """
        ...
    def setNOctaves(self, octaves) -> None:
        """
        .
        """
        ...
    def setThreshold(self, threshold) -> None:
        """
        .
        """
        ...
    ...

class AffineFeature(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        backend, maxTilt=..., minTilt=..., tiltStep=..., rotateStepBase=...
    ) -> retval:
        """
        .   @param backend The detector/extractor you want to use as backend.
        .       @param maxTilt The highest power index of tilt factor. 5 is used in the paper as tilt sampling range n.
        .       @param minTilt The lowest power index of tilt factor. 0 is used in the paper.
        .       @param tiltStep Tilt sampling step \f$\delta_t\f$ in Algorithm 1 in the paper.
        .       @param rotateStepBase Rotation sampling step factor b in Algorithm 1 in the paper.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def getViewParams(self, tilts, rolls) -> None:
        """
        .
        """
        ...
    def setViewParams(self, tilts, rolls) -> None:
        """
        .
        """
        ...
    ...

class AgastFeatureDetector(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(threshold=..., nonmaxSuppression=..., type=...) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def getNonmaxSuppression(self) -> retval:
        """
        .
        """
        ...
    def getThreshold(self) -> retval:
        """
        .
        """
        ...
    def getType(self) -> retval:
        """
        .
        """
        ...
    def setNonmaxSuppression(self, f) -> None:
        """
        .
        """
        ...
    def setThreshold(self, threshold) -> None:
        """
        .
        """
        ...
    def setType(self, type) -> None:
        """
        .
        """
        ...
    ...

class Algorithm(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def clear(self) -> None:
        """
        .   @brief Clears the algorithm state
        """
        ...
    def empty(self) -> retval:
        """
        .   @brief Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .   Returns the algorithm string identifier.
        .   This string is used as top level xml/yml node tag when the object is saved to a file or string.
        """
        ...
    def read(self, fn) -> None:
        """
        .   @brief Reads algorithm parameters from a file storage
        """
        ...
    def save(self, filename) -> None:
        """
        .   Saves the algorithm to a file.
        .   In order to make this method work, the derived class must implement Algorithm::write(FileStorage& fs).
        """
        ...
    def write(self, fs, name=...) -> None:
        """
        .   @brief simplified API for language bindings
        .       * @overload
        """
        ...
    ...

class AlignExposures(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def process(self, src, dst, times, response) -> None:
        """
        .   @brief Aligns images
        .
        .       @param src vector of input images
        .       @param dst vector of aligned images
        .       @param times vector of exposure time values for each image
        .       @param response 256x1 matrix with inverse camera response function for each pixel value, it should
        .       have the same number of channels as images.
        """
        ...
    ...

class AlignMTB(AlignExposures):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def calculateShift(self, img0, img1) -> retval:
        """
        .   @brief Calculates shift between two images, i. e. how to shift the second image to correspond it with the
        .       first.
        .
        .       @param img0 first image
        .       @param img1 second image
        """
        ...
    def computeBitmaps(self, img, tb=..., eb=...) -> Tuple[tb, eb]:
        """
        .   @brief Computes median threshold and exclude bitmaps of given image.
        .
        .       @param img input image
        .       @param tb median threshold bitmap
        .       @param eb exclude bitmap
        """
        ...
    def getCut(self) -> retval:
        """
        .
        """
        ...
    def getExcludeRange(self) -> retval:
        """
        .
        """
        ...
    def getMaxBits(self) -> retval:
        """
        .
        """
        ...
    def process(self, src, dst, times, response) -> None:
        """
        .



        process(src, dst) -> None
        .   @brief Short version of process, that doesn't take extra arguments.
        .
        .       @param src vector of input images
        .       @param dst vector of aligned images
        """
        ...
    def setCut(self, value) -> None:
        """
        .
        """
        ...
    def setExcludeRange(self, exclude_range) -> None:
        """
        .
        """
        ...
    def setMaxBits(self, max_bits) -> None:
        """
        .
        """
        ...
    def shiftMat(self, src, shift, dst=...) -> dst:
        """
        .   @brief Helper function, that shift Mat filling new regions with zeros.
        .
        .       @param src input image
        .       @param dst result image
        .       @param shift shift value
        """
        ...
    ...

class AsyncArray(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def get(self, dst=...) -> dst:
        """
        .   Fetch the result.
        .       @param[out] dst destination array
        .
        .       Waits for result until container has valid result.
        .       Throws exception if exception was stored as a result.
        .
        .       Throws exception on invalid container state.
        .
        .       @note Result or stored exception can be fetched only once.



        get(timeoutNs, dst=...) -> retval, dst
        .   Retrieving the result with timeout
        .       @param[out] dst destination array
        .       @param[in] timeoutNs timeout in nanoseconds, -1 for infinite wait
        .
        .       @returns true if result is ready, false if the timeout has expired
        .
        .       @note Result or stored exception can be fetched only once.
        """
        ...
    def release(self) -> None:
        """
        .
        """
        ...
    def valid(self) -> retval:
        """
        .
        """
        ...
    def wait_for(self, timeoutNs) -> retval:
        """
        .
        """
        ...
    ...

class BFMatcher(DescriptorMatcher):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(normType=..., crossCheck=...) -> retval:
        """
        .   @brief Brute-force matcher create method.
        .       @param normType One of NORM_L1, NORM_L2, NORM_HAMMING, NORM_HAMMING2. L1 and L2 norms are
        .       preferable choices for SIFT and SURF descriptors, NORM_HAMMING should be used with ORB, BRISK and
        .       BRIEF, NORM_HAMMING2 should be used with ORB when WTA_K==3 or 4 (see ORB::ORB constructor
        .       description).
        .       @param crossCheck If it is false, this is will be default BFMatcher behaviour when it finds the k
        .       nearest neighbors for each query descriptor. If crossCheck==true, then the knnMatch() method with
        .       k=1 will only return pairs (i,j) such that for i-th query descriptor the j-th descriptor in the
        .       matcher's collection is the nearest and vice versa, i.e. the BFMatcher will only return consistent
        .       pairs. Such technique usually produces best results with minimal number of outliers when there are
        .       enough matches. This is alternative to the ratio test, used by D. Lowe in SIFT paper.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class BOWImgDescriptorExtractor(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def compute(self, image, keypoints, imgDescriptor=...) -> imgDescriptor:
        """
        .   @overload
        .       @param keypointDescriptors Computed descriptors to match with vocabulary.
        .       @param imgDescriptor Computed output image descriptor.
        .       @param pointIdxsOfClusters Indices of keypoints that belong to the cluster. This means that
        .       pointIdxsOfClusters[i] are keypoint indices that belong to the i -th cluster (word of vocabulary)
        .       returned if it is non-zero.
        """
        ...
    def descriptorSize(self) -> retval:
        """
        .   @brief Returns an image descriptor size if the vocabulary is set. Otherwise, it returns 0.
        """
        ...
    def descriptorType(self) -> retval:
        """
        .   @brief Returns an image descriptor type.
        """
        ...
    def getVocabulary(self) -> retval:
        """
        .   @brief Returns the set vocabulary.
        """
        ...
    def setVocabulary(self, vocabulary) -> None:
        """
        .   @brief Sets a visual vocabulary.
        .
        .       @param vocabulary Vocabulary (can be trained using the inheritor of BOWTrainer ). Each row of the
        .       vocabulary is a visual word (cluster center).
        """
        ...
    ...

class BOWKMeansTrainer(BOWTrainer):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def cluster(self) -> retval:
        """
        .



        cluster(descriptors) -> retval
        .
        """
        ...
    ...

class BOWTrainer(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def add(self, descriptors) -> None:
        """
        .   @brief Adds descriptors to a training set.
        .
        .       @param descriptors Descriptors to add to a training set. Each row of the descriptors matrix is a
        .       descriptor.
        .
        .       The training set is clustered using clustermethod to construct the vocabulary.
        """
        ...
    def clear(self) -> None:
        """
        .
        """
        ...
    def cluster(self) -> retval:
        """
        .   @overload



        cluster(descriptors) -> retval
        .   @brief Clusters train descriptors.
        .
        .       @param descriptors Descriptors to cluster. Each row of the descriptors matrix is a descriptor.
        .       Descriptors are not added to the inner train descriptor set.
        .
        .       The vocabulary consists of cluster centers. So, this method returns the vocabulary. In the first
        .       variant of the method, train descriptors stored in the object are clustered. In the second variant,
        .       input descriptors are clustered.
        """
        ...
    def descriptorsCount(self) -> retval:
        """
        .   @brief Returns the count of all descriptors stored in the training set.
        """
        ...
    def getDescriptors(self) -> retval:
        """
        .   @brief Returns a training set of descriptors.
        """
        ...
    ...

class BRISK(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(thresh=..., octaves=..., patternScale=...) -> retval:
        """
        .   @brief The BRISK constructor
        .
        .       @param thresh AGAST detection threshold score.
        .       @param octaves detection octaves. Use 0 to do single scale.
        .       @param patternScale apply this scale to the pattern used for sampling the neighbourhood of a
        .       keypoint.



        create(radiusList, numberList, dMax=..., dMin=..., indexChange=...) -> retval
        .   @brief The BRISK constructor for a custom pattern
        .
        .       @param radiusList defines the radii (in pixels) where the samples around a keypoint are taken (for
        .       keypoint scale 1).
        .       @param numberList defines the number of sampling points on the sampling circle. Must be the same
        .       size as radiusList..
        .       @param dMax threshold for the short pairings used for descriptor formation (in pixels for keypoint
        .       scale 1).
        .       @param dMin threshold for the long pairings used for orientation determination (in pixels for
        .       keypoint scale 1).
        .   @param indexChange index remapping of the bits.



        create(thresh, octaves, radiusList, numberList, dMax=..., dMin=..., indexChange=...) -> retval
        .   @brief The BRISK constructor for a custom pattern, detection threshold and octaves
        .
        .       @param thresh AGAST detection threshold score.
        .       @param octaves detection octaves. Use 0 to do single scale.
        .       @param radiusList defines the radii (in pixels) where the samples around a keypoint are taken (for
        .       keypoint scale 1).
        .       @param numberList defines the number of sampling points on the sampling circle. Must be the same
        .       size as radiusList..
        .       @param dMax threshold for the short pairings used for descriptor formation (in pixels for keypoint
        .       scale 1).
        .       @param dMin threshold for the long pairings used for orientation determination (in pixels for
        .       keypoint scale 1).
        .   @param indexChange index remapping of the bits.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def getOctaves(self) -> retval:
        """
        .
        """
        ...
    def getThreshold(self) -> retval:
        """
        .
        """
        ...
    def setOctaves(self, octaves) -> None:
        """
        .   @brief Set detection octaves.
        .       @param octaves detection octaves. Use 0 to do single scale.
        """
        ...
    def setThreshold(self, threshold) -> None:
        """
        .   @brief Set detection threshold.
        .       @param threshold AGAST detection threshold score.
        """
        ...
    ...

class BackgroundSubtractor(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, image, fgmask=..., learningRate=...) -> fgmask:
        """
        .   @brief Computes a foreground mask.
        .
        .       @param image Next video frame.
        .       @param fgmask The output foreground mask as an 8-bit binary image.
        .       @param learningRate The value between 0 and 1 that indicates how fast the background model is
        .       learnt. Negative parameter value makes the algorithm to use some automatically chosen learning
        .       rate. 0 means that the background model is not updated at all, 1 means that the background model
        .       is completely reinitialized from the last frame.
        """
        ...
    def getBackgroundImage(self, backgroundImage=...) -> backgroundImage:
        """
        .   @brief Computes a background image.
        .
        .       @param backgroundImage The output background image.
        .
        .       @note Sometimes the background image can be very blurry, as it contain the average background
        .       statistics.
        """
        ...
    ...

class BackgroundSubtractorKNN(BackgroundSubtractor):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDetectShadows(self) -> retval:
        """
        .   @brief Returns the shadow detection flag
        .
        .       If true, the algorithm detects shadows and marks them. See createBackgroundSubtractorKNN for
        .       details.
        """
        ...
    def getDist2Threshold(self) -> retval:
        """
        .   @brief Returns the threshold on the squared distance between the pixel and the sample
        .
        .       The threshold on the squared distance between the pixel and the sample to decide whether a pixel is
        .       close to a data sample.
        """
        ...
    def getHistory(self) -> retval:
        """
        .   @brief Returns the number of last frames that affect the background model
        """
        ...
    def getNSamples(self) -> retval:
        """
        .   @brief Returns the number of data samples in the background model
        """
        ...
    def getShadowThreshold(self) -> retval:
        """
        .   @brief Returns the shadow threshold
        .
        .       A shadow is detected if pixel is a darker version of the background. The shadow threshold (Tau in
        .       the paper) is a threshold defining how much darker the shadow can be. Tau= 0.5 means that if a pixel
        .       is more than twice darker then it is not shadow. See Prati, Mikic, Trivedi and Cucchiara,
        .       *Detecting Moving Shadows...*, IEEE PAMI,2003.
        """
        ...
    def getShadowValue(self) -> retval:
        """
        .   @brief Returns the shadow value
        .
        .       Shadow value is the value used to mark shadows in the foreground mask. Default value is 127. Value 0
        .       in the mask always means background, 255 means foreground.
        """
        ...
    def getkNNSamples(self) -> retval:
        """
        .   @brief Returns the number of neighbours, the k in the kNN.
        .
        .       K is the number of samples that need to be within dist2Threshold in order to decide that that
        .       pixel is matching the kNN background model.
        """
        ...
    def setDetectShadows(self, detectShadows) -> None:
        """
        .   @brief Enables or disables shadow detection
        """
        ...
    def setDist2Threshold(self, _dist2Threshold) -> None:
        """
        .   @brief Sets the threshold on the squared distance
        """
        ...
    def setHistory(self, history) -> None:
        """
        .   @brief Sets the number of last frames that affect the background model
        """
        ...
    def setNSamples(self, _nN) -> None:
        """
        .   @brief Sets the number of data samples in the background model.
        .
        .       The model needs to be reinitalized to reserve memory.
        """
        ...
    def setShadowThreshold(self, threshold) -> None:
        """
        .   @brief Sets the shadow threshold
        """
        ...
    def setShadowValue(self, value) -> None:
        """
        .   @brief Sets the shadow value
        """
        ...
    def setkNNSamples(self, _nkNN) -> None:
        """
        .   @brief Sets the k in the kNN. How many nearest neighbours need to match.
        """
        ...
    ...

class BackgroundSubtractorMOG2(BackgroundSubtractor):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, image, fgmask=..., learningRate=...) -> fgmask:
        """
        .   @brief Computes a foreground mask.
        .
        .       @param image Next video frame. Floating point frame will be used without scaling and should be in range \f$[0,255]\f$.
        .       @param fgmask The output foreground mask as an 8-bit binary image.
        .       @param learningRate The value between 0 and 1 that indicates how fast the background model is
        .       learnt. Negative parameter value makes the algorithm to use some automatically chosen learning
        .       rate. 0 means that the background model is not updated at all, 1 means that the background model
        .       is completely reinitialized from the last frame.
        """
        ...
    def getBackgroundRatio(self) -> retval:
        """
        .   @brief Returns the "background ratio" parameter of the algorithm
        .
        .       If a foreground pixel keeps semi-constant value for about backgroundRatio\*history frames, it's
        .       considered background and added to the model as a center of a new component. It corresponds to TB
        .       parameter in the paper.
        """
        ...
    def getComplexityReductionThreshold(self) -> retval:
        """
        .   @brief Returns the complexity reduction threshold
        .
        .       This parameter defines the number of samples needed to accept to prove the component exists. CT=0.05
        .       is a default value for all the samples. By setting CT=0 you get an algorithm very similar to the
        .       standard Stauffer&Grimson algorithm.
        """
        ...
    def getDetectShadows(self) -> retval:
        """
        .   @brief Returns the shadow detection flag
        .
        .       If true, the algorithm detects shadows and marks them. See createBackgroundSubtractorMOG2 for
        .       details.
        """
        ...
    def getHistory(self) -> retval:
        """
        .   @brief Returns the number of last frames that affect the background model
        """
        ...
    def getNMixtures(self) -> retval:
        """
        .   @brief Returns the number of gaussian components in the background model
        """
        ...
    def getShadowThreshold(self) -> retval:
        """
        .   @brief Returns the shadow threshold
        .
        .       A shadow is detected if pixel is a darker version of the background. The shadow threshold (Tau in
        .       the paper) is a threshold defining how much darker the shadow can be. Tau= 0.5 means that if a pixel
        .       is more than twice darker then it is not shadow. See Prati, Mikic, Trivedi and Cucchiara,
        .       *Detecting Moving Shadows...*, IEEE PAMI,2003.
        """
        ...
    def getShadowValue(self) -> retval:
        """
        .   @brief Returns the shadow value
        .
        .       Shadow value is the value used to mark shadows in the foreground mask. Default value is 127. Value 0
        .       in the mask always means background, 255 means foreground.
        """
        ...
    def getVarInit(self) -> retval:
        """
        .   @brief Returns the initial variance of each gaussian component
        """
        ...
    def getVarMax(self) -> retval:
        """
        .
        """
        ...
    def getVarMin(self) -> retval:
        """
        .
        """
        ...
    def getVarThreshold(self) -> retval:
        """
        .   @brief Returns the variance threshold for the pixel-model match
        .
        .       The main threshold on the squared Mahalanobis distance to decide if the sample is well described by
        .       the background model or not. Related to Cthr from the paper.
        """
        ...
    def getVarThresholdGen(self) -> retval:
        """
        .   @brief Returns the variance threshold for the pixel-model match used for new mixture component generation
        .
        .       Threshold for the squared Mahalanobis distance that helps decide when a sample is close to the
        .       existing components (corresponds to Tg in the paper). If a pixel is not close to any component, it
        .       is considered foreground or added as a new component. 3 sigma =\> Tg=3\*3=9 is default. A smaller Tg
        .       value generates more components. A higher Tg value may result in a small number of components but
        .       they can grow too large.
        """
        ...
    def setBackgroundRatio(self, ratio) -> None:
        """
        .   @brief Sets the "background ratio" parameter of the algorithm
        """
        ...
    def setComplexityReductionThreshold(self, ct) -> None:
        """
        .   @brief Sets the complexity reduction threshold
        """
        ...
    def setDetectShadows(self, detectShadows) -> None:
        """
        .   @brief Enables or disables shadow detection
        """
        ...
    def setHistory(self, history) -> None:
        """
        .   @brief Sets the number of last frames that affect the background model
        """
        ...
    def setNMixtures(self, nmixtures) -> None:
        """
        .   @brief Sets the number of gaussian components in the background model.
        .
        .       The model needs to be reinitalized to reserve memory.
        """
        ...
    def setShadowThreshold(self, threshold) -> None:
        """
        .   @brief Sets the shadow threshold
        """
        ...
    def setShadowValue(self, value) -> None:
        """
        .   @brief Sets the shadow value
        """
        ...
    def setVarInit(self, varInit) -> None:
        """
        .   @brief Sets the initial variance of each gaussian component
        """
        ...
    def setVarMax(self, varMax) -> None:
        """
        .
        """
        ...
    def setVarMin(self, varMin) -> None:
        """
        .
        """
        ...
    def setVarThreshold(self, varThreshold) -> None:
        """
        .   @brief Sets the variance threshold for the pixel-model match
        """
        ...
    def setVarThresholdGen(self, varThresholdGen) -> None:
        """
        .   @brief Sets the variance threshold for the pixel-model match used for new mixture component generation
        """
        ...
    ...

class BaseCascadeClassifier(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class CLAHE(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, src, dst=...) -> dst:
        """
        .   @brief Equalizes the histogram of a grayscale image using Contrast Limited Adaptive Histogram Equalization.
        .
        .       @param src Source image of type CV_8UC1 or CV_16UC1.
        .       @param dst Destination image.
        """
        ...
    def collectGarbage(self) -> None:
        """
        .
        """
        ...
    def getClipLimit(self) -> retval:
        """
        .
        """
        ...
    def getTilesGridSize(self) -> retval:
        """
        .
        """
        ...
    def setClipLimit(self, clipLimit) -> None:
        """
        .   @brief Sets threshold for contrast limiting.
        .
        .       @param clipLimit threshold value.
        """
        ...
    def setTilesGridSize(self, tileGridSize) -> None:
        """
        .   @brief Sets size of grid for histogram equalization. Input image will be divided into
        .       equally sized rectangular tiles.
        .
        .       @param tileGridSize defines the number of tiles in row and column.
        """
        ...
    ...

class CalibrateCRF(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def process(self, src, times, dst=...) -> dst:
        """
        .   @brief Recovers inverse camera response.
        .
        .       @param src vector of input images
        .       @param dst 256x1 matrix with inverse camera response function
        .       @param times vector of exposure time values for each image
        """
        ...
    ...

class CalibrateDebevec(CalibrateCRF):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getLambda(self) -> retval:
        """
        .
        """
        ...
    def getRandom(self) -> retval:
        """
        .
        """
        ...
    def getSamples(self) -> retval:
        """
        .
        """
        ...
    def setLambda(self, lambda_) -> None:
        """
        .
        """
        ...
    def setRandom(self, random) -> None:
        """
        .
        """
        ...
    def setSamples(self, samples) -> None:
        """
        .
        """
        ...
    ...

class CalibrateRobertson(CalibrateCRF):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getMaxIter(self) -> retval:
        """
        .
        """
        ...
    def getRadiance(self) -> retval:
        """
        .
        """
        ...
    def getThreshold(self) -> retval:
        """
        .
        """
        ...
    def setMaxIter(self, max_iter) -> None:
        """
        .
        """
        ...
    def setThreshold(self, threshold) -> None:
        """
        .
        """
        ...
    ...

class CascadeClassifier(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def convert(oldcascade, newcascade) -> retval:
        """
        .
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def detectMultiScale(
        self,
        image,
        scaleFactor=...,
        minNeighbors=...,
        flags=...,
        minSize=...,
        maxSize=...,
    ) -> objects:
        """
        .   @brief Detects objects of different sizes in the input image. The detected objects are returned as a list
        .       of rectangles.
        .
        .       @param image Matrix of the type CV_8U containing an image where objects are detected.
        .       @param objects Vector of rectangles where each rectangle contains the detected object, the
        .       rectangles may be partially outside the original image.
        .       @param scaleFactor Parameter specifying how much the image size is reduced at each image scale.
        .       @param minNeighbors Parameter specifying how many neighbors each candidate rectangle should have
        .       to retain it.
        .       @param flags Parameter with the same meaning for an old cascade as in the function
        .       cvHaarDetectObjects. It is not used for a new cascade.
        .       @param minSize Minimum possible object size. Objects smaller than that are ignored.
        .       @param maxSize Maximum possible object size. Objects larger than that are ignored. If `maxSize == minSize` model is evaluated on single scale.
        .
        .       The function is parallelized with the TBB library.
        .
        .       @note
        .          -   (Python) A face detection example using cascade classifiers can be found at
        .               opencv_source_code/samples/python/facedetect.py
        """
        ...
    def detectMultiScale2(
        self,
        image,
        scaleFactor=...,
        minNeighbors=...,
        flags=...,
        minSize=...,
        maxSize=...,
    ) -> Tuple[objects, numDetections]:
        """
        .   @overload
        .       @param image Matrix of the type CV_8U containing an image where objects are detected.
        .       @param objects Vector of rectangles where each rectangle contains the detected object, the
        .       rectangles may be partially outside the original image.
        .       @param numDetections Vector of detection numbers for the corresponding objects. An object's number
        .       of detections is the number of neighboring positively classified rectangles that were joined
        .       together to form the object.
        .       @param scaleFactor Parameter specifying how much the image size is reduced at each image scale.
        .       @param minNeighbors Parameter specifying how many neighbors each candidate rectangle should have
        .       to retain it.
        .       @param flags Parameter with the same meaning for an old cascade as in the function
        .       cvHaarDetectObjects. It is not used for a new cascade.
        .       @param minSize Minimum possible object size. Objects smaller than that are ignored.
        .       @param maxSize Maximum possible object size. Objects larger than that are ignored. If `maxSize == minSize` model is evaluated on single scale.
        """
        ...
    def detectMultiScale3(
        self,
        image,
        scaleFactor=...,
        minNeighbors=...,
        flags=...,
        minSize=...,
        maxSize=...,
        outputRejectLevels=...,
    ) -> Tuple[objects, rejectLevels, levelWeights]:
        """
        .   @overload
        .       This function allows you to retrieve the final stage decision certainty of classification.
        .       For this, one needs to set `outputRejectLevels` on true and provide the `rejectLevels` and `levelWeights` parameter.
        .       For each resulting detection, `levelWeights` will then contain the certainty of classification at the final stage.
        .       This value can then be used to separate strong from weaker classifications.
        .
        .       A code sample on how to use it efficiently can be found below:
        .       @code
        .       Mat img;
        .       vector<double> weights;
        .       vector<int> levels;
        .       vector<Rect> detections;
        .       CascadeClassifier model("/path/to/your/model.xml");
        .       model.detectMultiScale(img, detections, levels, weights, 1.1, 3, 0, Size(), Size(), true);
        .       cerr << "Detection " << detections[0] << " with weight " << weights[0] << endl;
        .       @endcode
        """
        ...
    def empty(self) -> retval:
        """
        .   @brief Checks whether the classifier has been loaded.
        """
        ...
    def getFeatureType(self) -> retval:
        """
        .
        """
        ...
    def getOriginalWindowSize(self) -> retval:
        """
        .
        """
        ...
    def isOldFormatCascade(self) -> retval:
        """
        .
        """
        ...
    def load(self, filename) -> retval:
        """
        .   @brief Loads a classifier from a file.
        .
        .       @param filename Name of the file from which the classifier is loaded. The file may contain an old
        .       HAAR classifier trained by the haartraining application or a new cascade classifier trained by the
        .       traincascade application.
        """
        ...
    def read(self, node) -> retval:
        """
        .   @brief Reads a classifier from a FileStorage node.
        .
        .       @note The file may contain a new cascade classifier (trained traincascade application) only.
        """
        ...
    ...

class CirclesGridFinderParameters(builtins.object):
    convexHullFactor: ...
    """
    convexHullFactor
    """

    densityNeighborhoodSize: ...
    """
    densityNeighborhoodSize
    """

    edgeGain: ...
    """
    edgeGain
    """

    edgePenalty: ...
    """
    edgePenalty
    """

    existingVertexGain: ...
    """
    existingVertexGain
    """

    keypointScale: ...
    """
    keypointScale
    """

    kmeansAttempts: ...
    """
    kmeansAttempts
    """

    maxRectifiedDistance: ...
    """
    maxRectifiedDistance
    """

    minDensity: ...
    """
    minDensity
    """

    minDistanceToAddKeypoint: ...
    """
    minDistanceToAddKeypoint
    """

    minGraphConfidence: ...
    """
    minGraphConfidence
    """

    minRNGEdgeSwitchDist: ...
    """
    minRNGEdgeSwitchDist
    """

    squareSize: ...
    """
    squareSize
    """

    vertexGain: ...
    """
    vertexGain
    """

    vertexPenalty: ...
    """
    vertexPenalty
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class DISOpticalFlow(DenseOpticalFlow):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(preset=...) -> retval:
        """
        .   @brief Creates an instance of DISOpticalFlow
        .
        .       @param preset one of PRESET_ULTRAFAST, PRESET_FAST and PRESET_MEDIUM
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getFinestScale(self) -> retval:
        """
        .   @brief Finest level of the Gaussian pyramid on which the flow is computed (zero level
        .           corresponds to the original image resolution). The final flow is obtained by bilinear upscaling.
        .   @see setFinestScale
        """
        ...
    def getGradientDescentIterations(self) -> retval:
        """
        .   @brief Maximum number of gradient descent iterations in the patch inverse search stage. Higher values
        .           may improve quality in some cases.
        .   @see setGradientDescentIterations
        """
        ...
    def getPatchSize(self) -> retval:
        """
        .   @brief Size of an image patch for matching (in pixels). Normally, default 8x8 patches work well
        .           enough in most cases.
        .   @see setPatchSize
        """
        ...
    def getPatchStride(self) -> retval:
        """
        .   @brief Stride between neighbor patches. Must be less than patch size. Lower values correspond
        .           to higher flow quality.
        .   @see setPatchStride
        """
        ...
    def getUseMeanNormalization(self) -> retval:
        """
        .   @brief Whether to use mean-normalization of patches when computing patch distance. It is turned on
        .           by default as it typically provides a noticeable quality boost because of increased robustness to
        .           illumination variations. Turn it off if you are certain that your sequence doesn't contain any changes
        .           in illumination.
        .   @see setUseMeanNormalization
        """
        ...
    def getUseSpatialPropagation(self) -> retval:
        """
        .   @brief Whether to use spatial propagation of good optical flow vectors. This option is turned on by
        .           default, as it tends to work better on average and can sometimes help recover from major errors
        .           introduced by the coarse-to-fine scheme employed by the DIS optical flow algorithm. Turning this
        .           option off can make the output flow field a bit smoother, however.
        .   @see setUseSpatialPropagation
        """
        ...
    def getVariationalRefinementAlpha(self) -> retval:
        """
        .   @brief Weight of the smoothness term
        .   @see setVariationalRefinementAlpha
        """
        ...
    def getVariationalRefinementDelta(self) -> retval:
        """
        .   @brief Weight of the color constancy term
        .   @see setVariationalRefinementDelta
        """
        ...
    def getVariationalRefinementGamma(self) -> retval:
        """
        .   @brief Weight of the gradient constancy term
        .   @see setVariationalRefinementGamma
        """
        ...
    def getVariationalRefinementIterations(self) -> retval:
        """
        .   @brief Number of fixed point iterations of variational refinement per scale. Set to zero to
        .           disable variational refinement completely. Higher values will typically result in more smooth and
        .           high-quality flow.
        .   @see setGradientDescentIterations
        """
        ...
    def setFinestScale(self, val) -> None:
        """
        .   @copybrief getFinestScale @see getFinestScale
        """
        ...
    def setGradientDescentIterations(self, val) -> None:
        """
        .   @copybrief getGradientDescentIterations @see getGradientDescentIterations
        """
        ...
    def setPatchSize(self, val) -> None:
        """
        .   @copybrief getPatchSize @see getPatchSize
        """
        ...
    def setPatchStride(self, val) -> None:
        """
        .   @copybrief getPatchStride @see getPatchStride
        """
        ...
    def setUseMeanNormalization(self, val) -> None:
        """
        .   @copybrief getUseMeanNormalization @see getUseMeanNormalization
        """
        ...
    def setUseSpatialPropagation(self, val) -> None:
        """
        .   @copybrief getUseSpatialPropagation @see getUseSpatialPropagation
        """
        ...
    def setVariationalRefinementAlpha(self, val) -> None:
        """
        .   @copybrief getVariationalRefinementAlpha @see getVariationalRefinementAlpha
        """
        ...
    def setVariationalRefinementDelta(self, val) -> None:
        """
        .   @copybrief getVariationalRefinementDelta @see getVariationalRefinementDelta
        """
        ...
    def setVariationalRefinementGamma(self, val) -> None:
        """
        .   @copybrief getVariationalRefinementGamma @see getVariationalRefinementGamma
        """
        ...
    def setVariationalRefinementIterations(self, val) -> None:
        """
        .   @copybrief getGradientDescentIterations @see getGradientDescentIterations
        """
        ...
    ...

class DMatch(builtins.object):
    distance: ...
    """
    distance
    """

    imgIdx: ...
    """
    imgIdx
    """

    queryIdx: ...
    """
    queryIdx
    """

    trainIdx: ...
    """
    trainIdx
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class DenseOpticalFlow(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def calc(self, I0, I1, flow) -> flow:
        """
        .   @brief Calculates an optical flow.
        .
        .       @param I0 first 8-bit single-channel input image.
        .       @param I1 second input image of the same size and the same type as prev.
        .       @param flow computed flow image that has the same size as prev and type CV_32FC2.
        """
        ...
    def collectGarbage(self) -> None:
        """
        .   @brief Releases all inner buffers.
        """
        ...
    ...

class DescriptorMatcher(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(descriptorMatcherType) -> retval:
        """
        .   @brief Creates a descriptor matcher of a given type with the default parameters (using default
        .       constructor).
        .
        .       @param descriptorMatcherType Descriptor matcher type. Now the following matcher types are
        .       supported:
        .       -   `BruteForce` (it uses L2 )
        .       -   `BruteForce-L1`
        .       -   `BruteForce-Hamming`
        .       -   `BruteForce-Hamming(2)`
        .       -   `FlannBased`



        create(matcherType) -> retval
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def add(self, descriptors) -> None:
        """
        .   @brief Adds descriptors to train a CPU(trainDescCollectionis) or GPU(utrainDescCollectionis) descriptor
        .       collection.
        .
        .       If the collection is not empty, the new descriptors are added to existing train descriptors.
        .
        .       @param descriptors Descriptors to add. Each descriptors[i] is a set of descriptors from the same
        .       train image.
        """
        ...
    def clear(self) -> None:
        """
        .   @brief Clears the train descriptor collections.
        """
        ...
    def clone(self, emptyTrainData=...) -> retval:
        """
        .   @brief Clones the matcher.
        .
        .       @param emptyTrainData If emptyTrainData is false, the method creates a deep copy of the object,
        .       that is, copies both parameters and train data. If emptyTrainData is true, the method creates an
        .       object copy with the current parameters but with empty train data.
        """
        ...
    def empty(self) -> retval:
        """
        .   @brief Returns true if there are no train descriptors in the both collections.
        """
        ...
    def getTrainDescriptors(self) -> retval:
        """
        .   @brief Returns a constant link to the train descriptor collection trainDescCollection .
        """
        ...
    def isMaskSupported(self) -> retval:
        """
        .   @brief Returns true if the descriptor matcher supports masking permissible matches.
        """
        ...
    def knnMatch(
        self, queryDescriptors, trainDescriptors, k, mask=..., compactResult=...
    ) -> matches:
        """
        .   @brief Finds the k best matches for each descriptor from a query set.
        .
        .       @param queryDescriptors Query set of descriptors.
        .       @param trainDescriptors Train set of descriptors. This set is not added to the train descriptors
        .       collection stored in the class object.
        .       @param mask Mask specifying permissible matches between an input query and train matrices of
        .       descriptors.
        .       @param matches Matches. Each matches[i] is k or less matches for the same query descriptor.
        .       @param k Count of best matches found per each query descriptor or less if a query descriptor has
        .       less than k possible matches in total.
        .       @param compactResult Parameter used when the mask (or masks) is not empty. If compactResult is
        .       false, the matches vector has the same size as queryDescriptors rows. If compactResult is true,
        .       the matches vector does not contain matches for fully masked-out query descriptors.
        .
        .       These extended variants of DescriptorMatcher::match methods find several best matches for each query
        .       descriptor. The matches are returned in the distance increasing order. See DescriptorMatcher::match
        .       for the details about query and train descriptors.



        knnMatch(queryDescriptors, k, masks=..., compactResult=...) -> matches
        .   @overload
        .       @param queryDescriptors Query set of descriptors.
        .       @param matches Matches. Each matches[i] is k or less matches for the same query descriptor.
        .       @param k Count of best matches found per each query descriptor or less if a query descriptor has
        .       less than k possible matches in total.
        .       @param masks Set of masks. Each masks[i] specifies permissible matches between the input query
        .       descriptors and stored train descriptors from the i-th image trainDescCollection[i].
        .       @param compactResult Parameter used when the mask (or masks) is not empty. If compactResult is
        .       false, the matches vector has the same size as queryDescriptors rows. If compactResult is true,
        .       the matches vector does not contain matches for fully masked-out query descriptors.
        """
        ...
    def match(
        self,
        queryDescriptors: Any,
        trainDescriptors: Any,
        mask: Optional[ndarray] = ...,
    ) -> List[Any]:
        """
        .   @brief Finds the best match for each descriptor from a query set.
        .
        .       @param queryDescriptors Query set of descriptors.
        .       @param trainDescriptors Train set of descriptors. This set is not added to the train descriptors
        .       collection stored in the class object.
        .       @param matches Matches. If a query descriptor is masked out in mask , no match is added for this
        .       descriptor. So, matches size may be smaller than the query descriptors count.
        .       @param mask Mask specifying permissible matches between an input query and train matrices of
        .       descriptors.
        .
        .       In the first variant of this method, the train descriptors are passed as an input argument. In the
        .       second variant of the method, train descriptors collection that was set by DescriptorMatcher::add is
        .       used. Optional mask (or masks) can be passed to specify which query and training descriptors can be
        .       matched. Namely, queryDescriptors[i] can be matched with trainDescriptors[j] only if
        .       mask.at\<uchar\>(i,j) is non-zero.



        match(queryDescriptors, masks=...) -> matches
        .   @overload
        .       @param queryDescriptors Query set of descriptors.
        .       @param matches Matches. If a query descriptor is masked out in mask , no match is added for this
        .       descriptor. So, matches size may be smaller than the query descriptors count.
        .       @param masks Set of masks. Each masks[i] specifies permissible matches between the input query
        .       descriptors and stored train descriptors from the i-th image trainDescCollection[i].
        """
        ...
    def radiusMatch(
        self,
        queryDescriptors,
        trainDescriptors,
        maxDistance,
        mask=...,
        compactResult=...,
    ) -> matches:
        """
        .   @brief For each query descriptor, finds the training descriptors not farther than the specified distance.
        .
        .       @param queryDescriptors Query set of descriptors.
        .       @param trainDescriptors Train set of descriptors. This set is not added to the train descriptors
        .       collection stored in the class object.
        .       @param matches Found matches.
        .       @param compactResult Parameter used when the mask (or masks) is not empty. If compactResult is
        .       false, the matches vector has the same size as queryDescriptors rows. If compactResult is true,
        .       the matches vector does not contain matches for fully masked-out query descriptors.
        .       @param maxDistance Threshold for the distance between matched descriptors. Distance means here
        .       metric distance (e.g. Hamming distance), not the distance between coordinates (which is measured
        .       in Pixels)!
        .       @param mask Mask specifying permissible matches between an input query and train matrices of
        .       descriptors.
        .
        .       For each query descriptor, the methods find such training descriptors that the distance between the
        .       query descriptor and the training descriptor is equal or smaller than maxDistance. Found matches are
        .       returned in the distance increasing order.



        radiusMatch(queryDescriptors, maxDistance, masks=..., compactResult=...) -> matches
        .   @overload
        .       @param queryDescriptors Query set of descriptors.
        .       @param matches Found matches.
        .       @param maxDistance Threshold for the distance between matched descriptors. Distance means here
        .       metric distance (e.g. Hamming distance), not the distance between coordinates (which is measured
        .       in Pixels)!
        .       @param masks Set of masks. Each masks[i] specifies permissible matches between the input query
        .       descriptors and stored train descriptors from the i-th image trainDescCollection[i].
        .       @param compactResult Parameter used when the mask (or masks) is not empty. If compactResult is
        .       false, the matches vector has the same size as queryDescriptors rows. If compactResult is true,
        .       the matches vector does not contain matches for fully masked-out query descriptors.
        """
        ...
    def read(self, fileName) -> None:
        """
        .



        read(arg1) -> None
        .
        """
        ...
    def train(self) -> None:
        """
        .   @brief Trains a descriptor matcher
        .
        .       Trains a descriptor matcher (for example, the flann index). In all methods to match, the method
        .       train() is run every time before matching. Some descriptor matchers (for example, BruteForceMatcher)
        .       have an empty implementation of this method. Other matchers really train their inner structures (for
        .       example, FlannBasedMatcher trains flann::Index ).
        """
        ...
    def write(self, fileName) -> None:
        """
        .



        write(fs, name=...) -> None
        .
        """
        ...
    ...

class FarnebackOpticalFlow(DenseOpticalFlow):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        numLevels=...,
        pyrScale=...,
        fastPyramids=...,
        winSize=...,
        numIters=...,
        polyN=...,
        polySigma=...,
        flags=...,
    ) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getFastPyramids(self) -> retval:
        """
        .
        """
        ...
    def getFlags(self) -> retval:
        """
        .
        """
        ...
    def getNumIters(self) -> retval:
        """
        .
        """
        ...
    def getNumLevels(self) -> retval:
        """
        .
        """
        ...
    def getPolyN(self) -> retval:
        """
        .
        """
        ...
    def getPolySigma(self) -> retval:
        """
        .
        """
        ...
    def getPyrScale(self) -> retval:
        """
        .
        """
        ...
    def getWinSize(self) -> retval:
        """
        .
        """
        ...
    def setFastPyramids(self, fastPyramids) -> None:
        """
        .
        """
        ...
    def setFlags(self, flags) -> None:
        """
        .
        """
        ...
    def setNumIters(self, numIters) -> None:
        """
        .
        """
        ...
    def setNumLevels(self, numLevels) -> None:
        """
        .
        """
        ...
    def setPolyN(self, polyN) -> None:
        """
        .
        """
        ...
    def setPolySigma(self, polySigma) -> None:
        """
        .
        """
        ...
    def setPyrScale(self, pyrScale) -> None:
        """
        .
        """
        ...
    def setWinSize(self, winSize) -> None:
        """
        .
        """
        ...
    ...

class FastFeatureDetector(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(threshold=..., nonmaxSuppression=..., type=...) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def getNonmaxSuppression(self) -> retval:
        """
        .
        """
        ...
    def getThreshold(self) -> retval:
        """
        .
        """
        ...
    def getType(self) -> retval:
        """
        .
        """
        ...
    def setNonmaxSuppression(self, f) -> None:
        """
        .
        """
        ...
    def setThreshold(self, threshold) -> None:
        """
        .
        """
        ...
    def setType(self, type) -> None:
        """
        .
        """
        ...
    ...

class Feature2D(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def compute(
        self, image, keypoints, descriptors=...
    ) -> Tuple[keypoints, descriptors]:
        """
        .   @brief Computes the descriptors for a set of keypoints detected in an image (first variant) or image set
        .       (second variant).
        .
        .       @param image Image.
        .       @param keypoints Input collection of keypoints. Keypoints for which a descriptor cannot be
        .       computed are removed. Sometimes new keypoints can be added, for example: SIFT duplicates keypoint
        .       with several dominant orientations (for each orientation).
        .       @param descriptors Computed descriptors. In the second variant of the method descriptors[i] are
        .       descriptors computed for a keypoints[i]. Row j is the keypoints (or keypoints[i]) is the
        .       descriptor for keypoint j-th keypoint.



        compute(images, keypoints, descriptors=...) -> keypoints, descriptors
        .   @overload
        .
        .       @param images Image set.
        .       @param keypoints Input collection of keypoints. Keypoints for which a descriptor cannot be
        .       computed are removed. Sometimes new keypoints can be added, for example: SIFT duplicates keypoint
        .       with several dominant orientations (for each orientation).
        .       @param descriptors Computed descriptors. In the second variant of the method descriptors[i] are
        .       descriptors computed for a keypoints[i]. Row j is the keypoints (or keypoints[i]) is the
        .       descriptor for keypoint j-th keypoint.
        """
        ...
    def defaultNorm(self) -> retval:
        """
        .
        """
        ...
    def descriptorSize(self) -> retval:
        """
        .
        """
        ...
    def descriptorType(self) -> retval:
        """
        .
        """
        ...
    def detect(self, image, mask=...) -> keypoints:
        """
        .   @brief Detects keypoints in an image (first variant) or image set (second variant).
        .
        .       @param image Image.
        .       @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set
        .       of keypoints detected in images[i] .
        .       @param mask Mask specifying where to look for keypoints (optional). It must be a 8-bit integer
        .       matrix with non-zero values in the region of interest.



        detect(images, masks=...) -> keypoints
        .   @overload
        .       @param images Image set.
        .       @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set
        .       of keypoints detected in images[i] .
        .       @param masks Masks for each input image specifying where to look for keypoints (optional).
        .       masks[i] is a mask for images[i].
        """
        ...
    def detectAndCompute(
        self,
        image: ndarray,
        mask: Optional[ndarray],
        descriptors: Any = ...,
        useProvidedKeypoints: Any = ...,
    ) -> Tuple[ndarray, Any]:
        """
        .   Detects keypoints and computes the descriptors
        """
        ...
    def empty(self) -> retval:
        """
        .
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def read(self, fileName) -> None:
        """
        .



        read(arg1) -> None
        .
        """
        ...
    def write(self, fileName) -> None:
        """
        .



        write(fs, name=...) -> None
        .
        """
        ...
    ...

class FileNode(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def at(self, i) -> retval:
        """
        .   @overload
        .        @param i Index of an element in the sequence node.
        """
        ...
    def empty(self) -> retval:
        """
        .
        """
        ...
    def getNode(self, nodename) -> retval:
        """
        .   @overload
        .        @param nodename Name of an element in the mapping node.
        """
        ...
    def isInt(self) -> retval:
        """
        .
        """
        ...
    def isMap(self) -> retval:
        """
        .
        """
        ...
    def isNamed(self) -> retval:
        """
        .
        """
        ...
    def isNone(self) -> retval:
        """
        .
        """
        ...
    def isReal(self) -> retval:
        """
        .
        """
        ...
    def isSeq(self) -> retval:
        """
        .
        """
        ...
    def isString(self) -> retval:
        """
        .
        """
        ...
    def keys(self) -> retval:
        """
        .   @brief Returns keys of a mapping node.
        .        @returns Keys of a mapping node.
        """
        ...
    def mat(self) -> retval:
        """
        .
        """
        ...
    def name(self) -> retval:
        """
        .
        """
        ...
    def rawSize(self) -> retval:
        """
        .
        """
        ...
    def real(self) -> retval:
        """
        .   Internal method used when reading FileStorage.
        .        Sets the type (int, real or string) and value of the previously created node.
        """
        ...
    def size(self) -> retval:
        """
        .
        """
        ...
    def string(self) -> retval:
        """
        .
        """
        ...
    def type(self) -> retval:
        """
        .   @brief Returns type of the node.
        .        @returns Type of the node. See FileNode::Type
        """
        ...
    ...

class FileStorage(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def endWriteStruct(self) -> None:
        """
        .   @brief Finishes writing nested structure (should pair startWriteStruct())
        """
        ...
    def getFirstTopLevelNode(self) -> retval:
        """
        .   @brief Returns the first element of the top-level mapping.
        .        @returns The first element of the top-level mapping.
        """
        ...
    def getFormat(self) -> retval:
        """
        .   @brief Returns the current format.
        .        * @returns The current format, see FileStorage::Mode
        """
        ...
    def getNode(self, nodename) -> retval:
        """
        .   @overload
        """
        ...
    def isOpened(self) -> retval:
        """
        .   @brief Checks whether the file is opened.
        .
        .        @returns true if the object is associated with the current file and false otherwise. It is a
        .        good practice to call this method after you tried to open a file.
        """
        ...
    def open(self, filename, flags, encoding=...) -> retval:
        """
        .   @brief Opens a file.
        .
        .        See description of parameters in FileStorage::FileStorage. The method calls FileStorage::release
        .        before opening the file.
        .        @param filename Name of the file to open or the text string to read the data from.
        .        Extension of the file (.xml, .yml/.yaml or .json) determines its format (XML, YAML or JSON
        .        respectively). Also you can append .gz to work with compressed files, for example myHugeMatrix.xml.gz. If both
        .        FileStorage::WRITE and FileStorage::MEMORY flags are specified, source is used just to specify
        .        the output file format (e.g. mydata.xml, .yml etc.). A file name can also contain parameters.
        .        You can use this format, "*?base64" (e.g. "file.json?base64" (case sensitive)), as an alternative to
        .        FileStorage::BASE64 flag.
        .        @param flags Mode of operation. One of FileStorage::Mode
        .        @param encoding Encoding of the file. Note that UTF-16 XML encoding is not supported currently and
        .        you should use 8-bit encoding instead of it.
        """
        ...
    def release(self) -> None:
        """
        .   @brief Closes the file and releases all the memory buffers.
        .
        .        Call this method after all I/O operations with the storage are finished.
        """
        ...
    def releaseAndGetString(self) -> retval:
        """
        .   @brief Closes the file and releases all the memory buffers.
        .
        .        Call this method after all I/O operations with the storage are finished. If the storage was
        .        opened for writing data and FileStorage::WRITE was specified
        """
        ...
    def root(self, streamidx=...) -> retval:
        """
        .   @brief Returns the top-level mapping
        .        @param streamidx Zero-based index of the stream. In most cases there is only one stream in the file.
        .        However, YAML supports multiple streams and so there can be several.
        .        @returns The top-level mapping.
        """
        ...
    def startWriteStruct(self, name, flags, typeName=...) -> None:
        """
        .   @brief Starts to write a nested structure (sequence or a mapping).
        .       @param name name of the structure. When writing to sequences (a.k.a. "arrays"), pass an empty string.
        .       @param flags type of the structure (FileNode::MAP or FileNode::SEQ (both with optional FileNode::FLOW)).
        .       @param typeName optional name of the type you store. The effect of setting this depends on the storage format.
        .       I.e. if the format has a specification for storing type information, this parameter is used.
        """
        ...
    def write(self, name, val) -> None:
        """
        .   * @brief Simplified writing API to use with bindings.
        .        * @param name Name of the written object. When writing to sequences (a.k.a. "arrays"), pass an empty string.
        .        * @param val Value of the written object.
        """
        ...
    def writeComment(self, comment, append=...) -> None:
        """
        .   @brief Writes a comment.
        .
        .        The function writes a comment into file storage. The comments are skipped when the storage is read.
        .        @param comment The written comment, single-line or multi-line
        .        @param append If true, the function tries to put the comment at the end of current line.
        .        Else if the comment is multi-line, or if it does not fit at the end of the current
        .        line, the comment starts a new line.
        """
        ...
    ...

class FlannBasedMatcher(DescriptorMatcher):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GArrayDesc(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GArrayT(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def type(self) -> retval:
        """
        .
        """
        ...
    ...

class GCompileArg(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GComputation(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, callback, args=...) -> retval:
        """
        .   * @brief Compile graph on-the-fly and immediately execute it on
        .        * the inputs data vectors.
        .        *
        .        * Number of input/output data objects must match GComputation's
        .        * protocol, also types of host data objects (cv::Mat, cv::Scalar)
        .        * must match the shapes of data objects from protocol (cv::GMat,
        .        * cv::GScalar). If there's a mismatch, a run-time exception will
        .        * be generated.
        .        *
        .        * Internally, a cv::GCompiled object is created for the given
        .        * input format configuration, which then is executed on the input
        .        * data immediately. cv::GComputation caches compiled objects
        .        * produced within apply() -- if this method would be called next
        .        * time with the same input parameters (image formats, image
        .        * resolution, etc), the underlying compiled graph will be reused
        .        * without recompilation. If new metadata doesn't match the cached
        .        * one, the underlying compiled graph is regenerated.
        .        *
        .        * @note compile() always triggers a compilation process and
        .        * produces a new GCompiled object regardless if a similar one has
        .        * been cached via apply() or not.
        .        *
        .        * @param ins vector of input data to process. Don't create
        .        * GRunArgs object manually, use cv::gin() wrapper instead.
        .        * @param outs vector of output data to fill results in. cv::Mat
        .        * objects may be empty in this vector, G-API will automatically
        .        * initialize it with the required format & dimensions. Don't
        .        * create GRunArgsP object manually, use cv::gout() wrapper instead.
        .        * @param args a list of compilation arguments to pass to the
        .        * underlying compilation process. Don't create GCompileArgs
        .        * object manually, use cv::compile_args() wrapper instead.
        .        *
        .        * @sa @ref gapi_data_objects, @ref gapi_compile_args
        """
        ...
    def compileStreaming(self, callback, args=...) -> retval:
        """
        .   * @brief Compile the computation for streaming mode.
        .        *
        .        * This method triggers compilation process and produces a new
        .        * GStreamingCompiled object which then can process video stream
        .        * data of the given format. Passing a stream in a different
        .        * format to the compiled computation will generate a run-time
        .        * exception.
        .        *
        .        * @param in_metas vector of input metadata configuration. Grab
        .        * metadata from real data objects (like cv::Mat or cv::Scalar)
        .        * using cv::descr_of(), or create it on your own.
        .        *
        .        * @param args compilation arguments for this compilation
        .        * process. Compilation arguments directly affect what kind of
        .        * executable object would be produced, e.g. which kernels (and
        .        * thus, devices) would be used to execute computation.
        .        *
        .        * @return GStreamingCompiled, a streaming-oriented executable
        .        * computation compiled specifically for the given input
        .        * parameters.
        .        *
        .        * @sa @ref gapi_compile_args



        compileStreaming(args=...) -> retval
        .   * @brief Compile the computation for streaming mode.
        .        *
        .        * This method triggers compilation process and produces a new
        .        * GStreamingCompiled object which then can process video stream
        .        * data in any format. Underlying mechanisms will be adjusted to
        .        * every new input video stream automatically, but please note that
        .        * _not all_ existing backends support this (see reshape()).
        .        *
        .        * @param args compilation arguments for this compilation
        .        * process. Compilation arguments directly affect what kind of
        .        * executable object would be produced, e.g. which kernels (and
        .        * thus, devices) would be used to execute computation.
        .        *
        .        * @return GStreamingCompiled, a streaming-oriented executable
        .        * computation compiled for any input image format.
        .        *
        .        * @sa @ref gapi_compile_args
        """
        ...
    ...

class GFTTDetector(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        maxCorners=...,
        qualityLevel=...,
        minDistance=...,
        blockSize=...,
        useHarrisDetector=...,
        k=...,
    ) -> retval:
        """
        .



        create(maxCorners, qualityLevel, minDistance, blockSize, gradiantSize, useHarrisDetector=..., k=...) -> retval
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getBlockSize(self) -> retval:
        """
        .
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def getHarrisDetector(self) -> retval:
        """
        .
        """
        ...
    def getK(self) -> retval:
        """
        .
        """
        ...
    def getMaxFeatures(self) -> retval:
        """
        .
        """
        ...
    def getMinDistance(self) -> retval:
        """
        .
        """
        ...
    def getQualityLevel(self) -> retval:
        """
        .
        """
        ...
    def setBlockSize(self, blockSize) -> None:
        """
        .
        """
        ...
    def setHarrisDetector(self, val) -> None:
        """
        .
        """
        ...
    def setK(self, k) -> None:
        """
        .
        """
        ...
    def setMaxFeatures(self, maxFeatures) -> None:
        """
        .
        """
        ...
    def setMinDistance(self, minDistance) -> None:
        """
        .
        """
        ...
    def setQualityLevel(self, qlevel) -> None:
        """
        .
        """
        ...
    ...

class GFrame(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GInferInputs(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def setInput(self, name, value) -> None:
        """
        .
        """
        ...
    ...

class GInferListInputs(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def setInput(self, name, value) -> None:
        """
        .
        """
        ...
    ...

class GInferListOutputs(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def at(self, name) -> retval:
        """
        .
        """
        ...
    ...

class GInferOutputs(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def at(self, name) -> retval:
        """
        .
        """
        ...
    ...

class GMat(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GMatDesc(builtins.object):
    chan: ...
    """
    chan
    """

    depth: ...
    """
    depth
    """

    dims: ...
    """
    dims
    """

    planar: ...
    """
    planar
    """

    size: ...
    """
    size
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def withType(self, ddepth, dchan) -> retval:
        """
        .
        """
        ...
    ...

class GMetaArg(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GOpaqueDesc(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GOpaqueT(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def type(self) -> retval:
        """
        .
        """
        ...
    ...

class GProtoArg(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GProtoInputArgs(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GProtoOutputArgs(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GRunArg(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GScalar(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GScalarDesc(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class GStreamingCompiled(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def pull(self) -> retval:
        """
        .   * @brief Get the next processed frame from the pipeline.
        .        *
        .        * Use gout() to create an output parameter vector.
        .        *
        .        * Output vectors must have the same number of elements as defined
        .        * in the cv::GComputation protocol (at the moment of its
        .        * construction). Shapes of elements also must conform to protocol
        .        * (e.g. cv::Mat needs to be passed where cv::GMat has been
        .        * declared as output, and so on). Run-time exception is generated
        .        * on type mismatch.
        .        *
        .        * This method writes new data into objects passed via output
        .        * vector.  If there is no data ready yet, this method blocks. Use
        .        * try_pull() if you need a non-blocking version.
        .        *
        .        * @param outs vector of output parameters to obtain.
        .        * @return true if next result has been obtained,
        .        *    false marks end of the stream.
        """
        ...
    def running(self) -> retval:
        """
        .   * @brief Test if the pipeline is running.
        .        *
        .        * @note This method is not thread-safe (with respect to the user
        .        * side) at the moment. Protect the access if
        .        * start()/stop()/setSource() may be called on the same object in
        .        * multiple threads in your application.
        .        *
        .        * @return true if the current stream is not over yet.
        """
        ...
    def setSource(self, callback) -> None:
        """
        .   * @brief Specify the input data to GStreamingCompiled for
        .        * processing, a generic version.
        .        *
        .        * Use gin() to create an input parameter vector.
        .        *
        .        * Input vectors must have the same number of elements as defined
        .        * in the cv::GComputation protocol (at the moment of its
        .        * construction). Shapes of elements also must conform to protocol
        .        * (e.g. cv::Mat needs to be passed where cv::GMat has been
        .        * declared as input, and so on). Run-time exception is generated
        .        * on type mismatch.
        .        *
        .        * In contrast with regular GCompiled, user can also pass an
        .        * object of type GVideoCapture for a GMat parameter of the parent
        .        * GComputation.  The compiled pipeline will start fetching data
        .        * from that GVideoCapture and feeding it into the
        .        * pipeline. Pipeline stops when a GVideoCapture marks end of the
        .        * stream (or when stop() is called).
        .        *
        .        * Passing a regular Mat for a GMat parameter makes it "infinite"
        .        * source -- pipeline may run forever feeding with this Mat until
        .        * stopped explicitly.
        .        *
        .        * Currently only a single GVideoCapture is supported as input. If
        .        * the parent GComputation is declared with multiple input GMat's,
        .        * one of those can be specified as GVideoCapture but all others
        .        * must be regular Mat objects.
        .        *
        .        * Throws if pipeline is already running. Use stop() and then
        .        * setSource() to run the graph on a new video stream.
        .        *
        .        * @note This method is not thread-safe (with respect to the user
        .        * side) at the moment. Protect the access if
        .        * start()/stop()/setSource() may be called on the same object in
        .        * multiple threads in your application.
        .        *
        .        * @param ins vector of inputs to process.
        .        * @sa gin



        setSource(s) -> None
        .   * @brief Specify an input video stream for a single-input
        .        * computation pipeline.
        .        *
        .        * Throws if pipeline is already running. Use stop() and then
        .        * setSource() to run the graph on a new video stream.
        .        *
        .        * @overload
        .        * @param s a shared pointer to IStreamSource representing the
        .        * input video stream.
        """
        ...
    def start(self) -> None:
        """
        .   * @brief Start the pipeline execution.
        .        *
        .        * Use pull()/try_pull() to obtain data. Throws an exception if
        .        * a video source was not specified.
        .        *
        .        * setSource() must be called first, even if the pipeline has been
        .        * working already and then stopped (explicitly via stop() or due
        .        * stream completion)
        .        *
        .        * @note This method is not thread-safe (with respect to the user
        .        * side) at the moment. Protect the access if
        .        * start()/stop()/setSource() may be called on the same object in
        .        * multiple threads in your application.
        """
        ...
    def stop(self) -> None:
        """
        .   * @brief Stop (abort) processing the pipeline.
        .        *
        .        * Note - it is not pause but a complete stop. Calling start()
        .        * will cause G-API to start processing the stream from the early beginning.
        .        *
        .        * Throws if the pipeline is not running.
        """
        ...
    ...

class GeneralizedHough(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def detect(self, image, positions=..., votes=...) -> Tuple[positions, votes]:
        """
        .



        detect(edges, dx, dy, positions=..., votes=...) -> positions, votes
        .
        """
        ...
    def getCannyHighThresh(self) -> retval:
        """
        .
        """
        ...
    def getCannyLowThresh(self) -> retval:
        """
        .
        """
        ...
    def getDp(self) -> retval:
        """
        .
        """
        ...
    def getMaxBufferSize(self) -> retval:
        """
        .
        """
        ...
    def getMinDist(self) -> retval:
        """
        .
        """
        ...
    def setCannyHighThresh(self, cannyHighThresh) -> None:
        """
        .
        """
        ...
    def setCannyLowThresh(self, cannyLowThresh) -> None:
        """
        .
        """
        ...
    def setDp(self, dp) -> None:
        """
        .
        """
        ...
    def setMaxBufferSize(self, maxBufferSize) -> None:
        """
        .
        """
        ...
    def setMinDist(self, minDist) -> None:
        """
        .
        """
        ...
    def setTemplate(self, templ, templCenter=...) -> None:
        """
        .



        setTemplate(edges, dx, dy, templCenter=...) -> None
        .
        """
        ...
    ...

class GeneralizedHoughBallard(GeneralizedHough):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getLevels(self) -> retval:
        """
        .
        """
        ...
    def getVotesThreshold(self) -> retval:
        """
        .
        """
        ...
    def setLevels(self, levels) -> None:
        """
        .
        """
        ...
    def setVotesThreshold(self, votesThreshold) -> None:
        """
        .
        """
        ...
    ...

class GeneralizedHoughGuil(GeneralizedHough):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getAngleEpsilon(self) -> retval:
        """
        .
        """
        ...
    def getAngleStep(self) -> retval:
        """
        .
        """
        ...
    def getAngleThresh(self) -> retval:
        """
        .
        """
        ...
    def getLevels(self) -> retval:
        """
        .
        """
        ...
    def getMaxAngle(self) -> retval:
        """
        .
        """
        ...
    def getMaxScale(self) -> retval:
        """
        .
        """
        ...
    def getMinAngle(self) -> retval:
        """
        .
        """
        ...
    def getMinScale(self) -> retval:
        """
        .
        """
        ...
    def getPosThresh(self) -> retval:
        """
        .
        """
        ...
    def getScaleStep(self) -> retval:
        """
        .
        """
        ...
    def getScaleThresh(self) -> retval:
        """
        .
        """
        ...
    def getXi(self) -> retval:
        """
        .
        """
        ...
    def setAngleEpsilon(self, angleEpsilon) -> None:
        """
        .
        """
        ...
    def setAngleStep(self, angleStep) -> None:
        """
        .
        """
        ...
    def setAngleThresh(self, angleThresh) -> None:
        """
        .
        """
        ...
    def setLevels(self, levels) -> None:
        """
        .
        """
        ...
    def setMaxAngle(self, maxAngle) -> None:
        """
        .
        """
        ...
    def setMaxScale(self, maxScale) -> None:
        """
        .
        """
        ...
    def setMinAngle(self, minAngle) -> None:
        """
        .
        """
        ...
    def setMinScale(self, minScale) -> None:
        """
        .
        """
        ...
    def setPosThresh(self, posThresh) -> None:
        """
        .
        """
        ...
    def setScaleStep(self, scaleStep) -> None:
        """
        .
        """
        ...
    def setScaleThresh(self, scaleThresh) -> None:
        """
        .
        """
        ...
    def setXi(self, xi) -> None:
        """
        .
        """
        ...
    ...

class HOGDescriptor(builtins.object):
    L2HysThreshold: ...
    """
    L2HysThreshold
    """

    blockSize: ...
    """
    blockSize
    """

    blockStride: ...
    """
    blockStride
    """

    cellSize: ...
    """
    cellSize
    """

    derivAperture: ...
    """
    derivAperture
    """

    gammaCorrection: ...
    """
    gammaCorrection
    """

    histogramNormType: ...
    """
    histogramNormType
    """

    nbins: ...
    """
    nbins
    """

    nlevels: ...
    """
    nlevels
    """

    signedGradient: ...
    """
    signedGradient
    """

    svmDetector: ...
    """
    svmDetector
    """

    winSigma: ...
    """
    winSigma
    """

    winSize: ...
    """
    winSize
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def getDaimlerPeopleDetector() -> retval:
        """
        .   @brief Returns coefficients of the classifier trained for people detection (for 48x96 windows).
        """
        ...
    @staticmethod
    def getDefaultPeopleDetector() -> retval:
        """
        .   @brief Returns coefficients of the classifier trained for people detection (for 64x128 windows).
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def checkDetectorSize(self) -> retval:
        """
        .   @brief Checks if detector size equal to descriptor size.
        """
        ...
    def compute(self, img, winStride=..., padding=..., locations=...) -> descriptors:
        """
        .   @brief Computes HOG descriptors of given image.
        .       @param img Matrix of the type CV_8U containing an image where HOG features will be calculated.
        .       @param descriptors Matrix of the type CV_32F
        .       @param winStride Window stride. It must be a multiple of block stride.
        .       @param padding Padding
        .       @param locations Vector of Point
        """
        ...
    def computeGradient(
        self, img, grad, angleOfs, paddingTL=..., paddingBR=...
    ) -> Tuple[grad, angleOfs]:
        """
        .   @brief  Computes gradients and quantized gradient orientations.
        .       @param img Matrix contains the image to be computed
        .       @param grad Matrix of type CV_32FC2 contains computed gradients
        .       @param angleOfs Matrix of type CV_8UC2 contains quantized gradient orientations
        .       @param paddingTL Padding from top-left
        .       @param paddingBR Padding from bottom-right
        """
        ...
    def detect(
        self, img, hitThreshold=..., winStride=..., padding=..., searchLocations=...
    ) -> Tuple[foundLocations, weights]:
        """
        .   @brief Performs object detection without a multi-scale window.
        .       @param img Matrix of the type CV_8U or CV_8UC3 containing an image where objects are detected.
        .       @param foundLocations Vector of point where each point contains left-top corner point of detected object boundaries.
        .       @param weights Vector that will contain confidence values for each detected object.
        .       @param hitThreshold Threshold for the distance between features and SVM classifying plane.
        .       Usually it is 0 and should be specified in the detector coefficients (as the last free coefficient).
        .       But if the free coefficient is omitted (which is allowed), you can specify it manually here.
        .       @param winStride Window stride. It must be a multiple of block stride.
        .       @param padding Padding
        .       @param searchLocations Vector of Point includes set of requested locations to be evaluated.
        """
        ...
    def detectMultiScale(
        self,
        img,
        hitThreshold=...,
        winStride=...,
        padding=...,
        scale=...,
        finalThreshold=...,
        useMeanshiftGrouping=...,
    ) -> Tuple[foundLocations, foundWeights]:
        """
        .   @brief Detects objects of different sizes in the input image. The detected objects are returned as a list
        .       of rectangles.
        .       @param img Matrix of the type CV_8U or CV_8UC3 containing an image where objects are detected.
        .       @param foundLocations Vector of rectangles where each rectangle contains the detected object.
        .       @param foundWeights Vector that will contain confidence values for each detected object.
        .       @param hitThreshold Threshold for the distance between features and SVM classifying plane.
        .       Usually it is 0 and should be specified in the detector coefficients (as the last free coefficient).
        .       But if the free coefficient is omitted (which is allowed), you can specify it manually here.
        .       @param winStride Window stride. It must be a multiple of block stride.
        .       @param padding Padding
        .       @param scale Coefficient of the detection window increase.
        .       @param finalThreshold Final threshold
        .       @param useMeanshiftGrouping indicates grouping algorithm
        """
        ...
    def getDescriptorSize(self) -> retval:
        """
        .   @brief Returns the number of coefficients required for the classification.
        """
        ...
    def getWinSigma(self) -> retval:
        """
        .   @brief Returns winSigma value
        """
        ...
    def load(self, filename, objname=...) -> retval:
        """
        .   @brief loads HOGDescriptor parameters and coefficients for the linear SVM classifier from a file.
        .       @param filename Path of the file to read.
        .       @param objname The optional name of the node to read (if empty, the first top-level node will be used).
        """
        ...
    def save(self, filename, objname=...) -> None:
        """
        .   @brief saves HOGDescriptor parameters and coefficients for the linear SVM classifier to a file
        .       @param filename File name
        .       @param objname Object name
        """
        ...
    def setSVMDetector(self, svmdetector) -> None:
        """
        .   @brief Sets coefficients for the linear SVM classifier.
        .       @param svmdetector coefficients for the linear SVM classifier.
        """
        ...
    ...

class KAZE(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        extended=...,
        upright=...,
        threshold=...,
        nOctaves=...,
        nOctaveLayers=...,
        diffusivity=...,
    ) -> retval:
        """
        .   @brief The KAZE constructor
        .
        .       @param extended Set to enable extraction of extended (128-byte) descriptor.
        .       @param upright Set to enable use of upright descriptors (non rotation-invariant).
        .       @param threshold Detector response threshold to accept point
        .       @param nOctaves Maximum octave evolution of the image
        .       @param nOctaveLayers Default number of sublevels per scale level
        .       @param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, DIFF_WEICKERT or
        .       DIFF_CHARBONNIER
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def getDiffusivity(self) -> retval:
        """
        .
        """
        ...
    def getExtended(self) -> retval:
        """
        .
        """
        ...
    def getNOctaveLayers(self) -> retval:
        """
        .
        """
        ...
    def getNOctaves(self) -> retval:
        """
        .
        """
        ...
    def getThreshold(self) -> retval:
        """
        .
        """
        ...
    def getUpright(self) -> retval:
        """
        .
        """
        ...
    def setDiffusivity(self, diff) -> None:
        """
        .
        """
        ...
    def setExtended(self, extended) -> None:
        """
        .
        """
        ...
    def setNOctaveLayers(self, octaveLayers) -> None:
        """
        .
        """
        ...
    def setNOctaves(self, octaves) -> None:
        """
        .
        """
        ...
    def setThreshold(self, threshold) -> None:
        """
        .
        """
        ...
    def setUpright(self, upright) -> None:
        """
        .
        """
        ...
    ...

class KalmanFilter(builtins.object):
    controlMatrix: ...
    """
    controlMatrix
    """

    errorCovPost: ...
    """
    errorCovPost
    """

    errorCovPre: ...
    """
    errorCovPre
    """

    gain: ...
    """
    gain
    """

    measurementMatrix: ...
    """
    measurementMatrix
    """

    measurementNoiseCov: ...
    """
    measurementNoiseCov
    """

    processNoiseCov: ...
    """
    processNoiseCov
    """

    statePost: ...
    """
    statePost
    """

    statePre: ...
    """
    statePre
    """

    transitionMatrix: ...
    """
    transitionMatrix
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def correct(self, measurement) -> retval:
        """
        .   @brief Updates the predicted state from the measurement.
        .
        .       @param measurement The measured system parameters
        """
        ...
    def predict(self, control=...) -> retval:
        """
        .   @brief Computes a predicted state.
        .
        .       @param control The optional input control
        """
        ...
    ...

class KeyPoint(builtins.object):
    angle: ...
    """
    angle
    """

    class_id: ...
    """
    class_id
    """

    octave: ...
    """
    octave
    """

    pt: ...
    """
    pt
    """

    response: ...
    """
    response
    """

    size: ...
    """
    size
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def convert(keypoints, keypointIndexes=...) -> points2f:
        """
        .   This method converts vector of keypoints to vector of points or the reverse, where each keypoint is
        .       assigned the same size and the same orientation.
        .
        .       @param keypoints Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB
        .       @param points2f Array of (x,y) coordinates of each keypoint
        .       @param keypointIndexes Array of indexes of keypoints to be converted to points. (Acts like a mask to
        .       convert only specified keypoints)



        convert(points2f, size=..., response=..., octave=..., class_id=...) -> keypoints
        .   @overload
        .       @param points2f Array of (x,y) coordinates of each keypoint
        .       @param keypoints Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB
        .       @param size keypoint diameter
        .       @param response keypoint detector response on the keypoint (that is, strength of the keypoint)
        .       @param octave pyramid octave in which the keypoint has been detected
        .       @param class_id object id
        """
        ...
    @staticmethod
    def overlap(kp1, kp2) -> retval:
        """
        .   This method computes overlap for pair of keypoints. Overlap is the ratio between area of keypoint
        .       regions' intersection and area of keypoint regions' union (considering keypoint region as circle).
        .       If they don't overlap, we get zero. If they coincide at same location with same size, we get 1.
        .       @param kp1 First keypoint
        .       @param kp2 Second keypoint
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class LineSegmentDetector(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def compareSegments(
        self, size, lines1, lines2, _image=...
    ) -> Tuple[retval, _image]:
        """
        .   @brief Draws two groups of lines in blue and red, counting the non overlapping (mismatching) pixels.
        .
        .       @param size The size of the image, where lines1 and lines2 were found.
        .       @param lines1 The first group of lines that needs to be drawn. It is visualized in blue color.
        .       @param lines2 The second group of lines. They visualized in red color.
        .       @param _image Optional image, where the lines will be drawn. The image should be color(3-channel)
        .       in order for lines1 and lines2 to be drawn in the above mentioned colors.
        """
        ...
    def detect(
        self, _image, _lines=..., width=..., prec=..., nfa=...
    ) -> Tuple[prec, nfa]:
        """
        .   @brief Finds lines in the input image.
        .
        .       This is the output of the default parameters of the algorithm on the above shown image.
        .
        .       ![image](pics/building_lsd.png)
        .
        .       @param _image A grayscale (CV_8UC1) input image. If only a roi needs to be selected, use:
        .       `lsd_ptr-\>detect(image(roi), lines, ...); lines += Scalar(roi.x, roi.y, roi.x, roi.y);`
        .       @param _lines A vector of Vec4i or Vec4f elements specifying the beginning and ending point of a line. Where
        .       Vec4i/Vec4f is (x1, y1, x2, y2), point 1 is the start, point 2 - end. Returned lines are strictly
        .       oriented depending on the gradient.
        .       @param width Vector of widths of the regions, where the lines are found. E.g. Width of line.
        .       @param prec Vector of precisions with which the lines are found.
        .       @param nfa Vector containing number of false alarms in the line region, with precision of 10%. The
        .       bigger the value, logarithmically better the detection.
        .       - -1 corresponds to 10 mean false alarms
        .       - 0 corresponds to 1 mean false alarm
        .       - 1 corresponds to 0.1 mean false alarms
        .       This vector will be calculated only when the objects type is #LSD_REFINE_ADV.
        """
        ...
    def drawSegments(self, _image, lines) -> _image:
        """
        .   @brief Draws the line segments on a given image.
        .       @param _image The image, where the lines will be drawn. Should be bigger or equal to the image,
        .       where the lines were found.
        .       @param lines A vector of the lines that needed to be drawn.
        """
        ...
    ...

class MSER(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        _delta=...,
        _min_area=...,
        _max_area=...,
        _max_variation=...,
        _min_diversity=...,
        _max_evolution=...,
        _area_threshold=...,
        _min_margin=...,
        _edge_blur_size=...,
    ) -> retval:
        """
        .   @brief Full constructor for %MSER detector
        .
        .       @param _delta it compares \f$(size_{i}-size_{i-delta})/size_{i-delta}\f$
        .       @param _min_area prune the area which smaller than minArea
        .       @param _max_area prune the area which bigger than maxArea
        .       @param _max_variation prune the area have similar size to its children
        .       @param _min_diversity for color image, trace back to cut off mser with diversity less than min_diversity
        .       @param _max_evolution  for color image, the evolution steps
        .       @param _area_threshold for color image, the area threshold to cause re-initialize
        .       @param _min_margin for color image, ignore too small margin
        .       @param _edge_blur_size for color image, the aperture size for edge blur
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def detectRegions(self, image) -> Tuple[msers, bboxes]:
        """
        .   @brief Detect %MSER regions
        .
        .       @param image input image (8UC1, 8UC3 or 8UC4, must be greater or equal than 3x3)
        .       @param msers resulting list of point sets
        .       @param bboxes resulting bounding boxes
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def getDelta(self) -> retval:
        """
        .
        """
        ...
    def getMaxArea(self) -> retval:
        """
        .
        """
        ...
    def getMinArea(self) -> retval:
        """
        .
        """
        ...
    def getPass2Only(self) -> retval:
        """
        .
        """
        ...
    def setDelta(self, delta) -> None:
        """
        .
        """
        ...
    def setMaxArea(self, maxArea) -> None:
        """
        .
        """
        ...
    def setMinArea(self, minArea) -> None:
        """
        .
        """
        ...
    def setPass2Only(self, f) -> None:
        """
        .
        """
        ...
    ...

class MergeDebevec(MergeExposures):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def process(self, src, times, response, dst=...) -> dst:
        """
        .



        process(src, times, dst=...) -> dst
        .
        """
        ...
    ...

class MergeExposures(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def process(self, src, times, response, dst=...) -> dst:
        """
        .   @brief Merges images.
        .
        .       @param src vector of input images
        .       @param dst result image
        .       @param times vector of exposure time values for each image
        .       @param response 256x1 matrix with inverse camera response function for each pixel value, it should
        .       have the same number of channels as images.
        """
        ...
    ...

class MergeMertens(MergeExposures):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getContrastWeight(self) -> retval:
        """
        .
        """
        ...
    def getExposureWeight(self) -> retval:
        """
        .
        """
        ...
    def getSaturationWeight(self) -> retval:
        """
        .
        """
        ...
    def process(self, src, times, response, dst=...) -> dst:
        """
        .



        process(src, dst=...) -> dst
        .   @brief Short version of process, that doesn't take extra arguments.
        .
        .       @param src vector of input images
        .       @param dst result image
        """
        ...
    def setContrastWeight(self, contrast_weiht) -> None:
        """
        .
        """
        ...
    def setExposureWeight(self, exposure_weight) -> None:
        """
        .
        """
        ...
    def setSaturationWeight(self, saturation_weight) -> None:
        """
        .
        """
        ...
    ...

class MergeRobertson(MergeExposures):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def process(self, src, times, response, dst=...) -> dst:
        """
        .



        process(src, times, dst=...) -> dst
        .
        """
        ...
    ...

class ORB(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        nfeatures=...,
        scaleFactor=...,
        nlevels=...,
        edgeThreshold=...,
        firstLevel=...,
        WTA_K=...,
        scoreType=...,
        patchSize=...,
        fastThreshold=...,
    ) -> retval:
        """
        .   @brief The ORB constructor
        .
        .       @param nfeatures The maximum number of features to retain.
        .       @param scaleFactor Pyramid decimation ratio, greater than 1. scaleFactor==2 means the classical
        .       pyramid, where each next level has 4x less pixels than the previous, but such a big scale factor
        .       will degrade feature matching scores dramatically. On the other hand, too close to 1 scale factor
        .       will mean that to cover certain scale range you will need more pyramid levels and so the speed
        .       will suffer.
        .       @param nlevels The number of pyramid levels. The smallest level will have linear size equal to
        .       input_image_linear_size/pow(scaleFactor, nlevels - firstLevel).
        .       @param edgeThreshold This is size of the border where the features are not detected. It should
        .       roughly match the patchSize parameter.
        .       @param firstLevel The level of pyramid to put source image to. Previous layers are filled
        .       with upscaled source image.
        .       @param WTA_K The number of points that produce each element of the oriented BRIEF descriptor. The
        .       default value 2 means the BRIEF where we take a random point pair and compare their brightnesses,
        .       so we get 0/1 response. Other possible values are 3 and 4. For example, 3 means that we take 3
        .       random points (of course, those point coordinates are random, but they are generated from the
        .       pre-defined seed, so each element of BRIEF descriptor is computed deterministically from the pixel
        .       rectangle), find point of maximum brightness and output index of the winner (0, 1 or 2). Such
        .       output will occupy 2 bits, and therefore it will need a special variant of Hamming distance,
        .       denoted as NORM_HAMMING2 (2 bits per bin). When WTA_K=4, we take 4 random points to compute each
        .       bin (that will also occupy 2 bits with possible values 0, 1, 2 or 3).
        .       @param scoreType The default HARRIS_SCORE means that Harris algorithm is used to rank features
        .       (the score is written to KeyPoint::score and is used to retain best nfeatures features);
        .       FAST_SCORE is alternative value of the parameter that produces slightly less stable keypoints,
        .       but it is a little faster to compute.
        .       @param patchSize size of the patch used by the oriented BRIEF descriptor. Of course, on smaller
        .       pyramid layers the perceived image area covered by a feature will be larger.
        .       @param fastThreshold the fast threshold
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    def getEdgeThreshold(self) -> retval:
        """
        .
        """
        ...
    def getFastThreshold(self) -> retval:
        """
        .
        """
        ...
    def getFirstLevel(self) -> retval:
        """
        .
        """
        ...
    def getMaxFeatures(self) -> retval:
        """
        .
        """
        ...
    def getNLevels(self) -> retval:
        """
        .
        """
        ...
    def getPatchSize(self) -> retval:
        """
        .
        """
        ...
    def getScaleFactor(self) -> retval:
        """
        .
        """
        ...
    def getScoreType(self) -> retval:
        """
        .
        """
        ...
    def getWTA_K(self) -> retval:
        """
        .
        """
        ...
    def setEdgeThreshold(self, edgeThreshold) -> None:
        """
        .
        """
        ...
    def setFastThreshold(self, fastThreshold) -> None:
        """
        .
        """
        ...
    def setFirstLevel(self, firstLevel) -> None:
        """
        .
        """
        ...
    def setMaxFeatures(self, maxFeatures) -> None:
        """
        .
        """
        ...
    def setNLevels(self, nlevels) -> None:
        """
        .
        """
        ...
    def setPatchSize(self, patchSize) -> None:
        """
        .
        """
        ...
    def setScaleFactor(self, scaleFactor) -> None:
        """
        .
        """
        ...
    def setScoreType(self, scoreType) -> None:
        """
        .
        """
        ...
    def setWTA_K(self, wta_k) -> None:
        """
        .
        """
        ...
    ...

class PyRotationWarper(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def buildMaps(self, src_size, K, R, xmap=..., ymap=...) -> Tuple[p, ymap]:
        """
        .   @brief Builds the projection maps according to the given camera data.
        .
        .           @param src_size Source image size
        .           @param K Camera intrinsic parameters
        .           @param R Camera rotation matrix
        .           @param xmap Projection map for the x axis
        .           @param ymap Projection map for the y axis
        .           @return Projected image minimum bounding box
        """
        ...
    def getScale(self) -> retval:
        """
        .
        """
        ...
    def setScale(self, arg1) -> None:
        """
        .
        """
        ...
    def warp(self, src, K, R, interp_mode, border_mode, dst=...) -> Tuple[retval, dst]:
        """
        .   @brief Projects the image.
        .
        .           @param src Source image
        .           @param K Camera intrinsic parameters
        .           @param R Camera rotation matrix
        .           @param interp_mode Interpolation mode
        .           @param border_mode Border extrapolation mode
        .           @param dst Projected image
        .           @return Project image top-left corner
        """
        ...
    def warpBackward(
        self, src, K, R, interp_mode, border_mode, dst_size, dst=...
    ) -> dst:
        """
        .   @brief Projects the image backward.
        .
        .           @param src Projected image
        .           @param K Camera intrinsic parameters
        .           @param R Camera rotation matrix
        .           @param interp_mode Interpolation mode
        .           @param border_mode Border extrapolation mode
        .           @param dst_size Backward-projected image size
        .           @param dst Backward-projected image
        """
        ...
    def warpPoint(self, pt, K, R) -> retval:
        """
        .   @brief Projects the image point.
        .
        .           @param pt Source point
        .           @param K Camera intrinsic parameters
        .           @param R Camera rotation matrix
        .           @return Projected point
        """
        ...
    def warpPointBackward(self, pt, K, R) -> retval:
        """
        .   @brief Projects the image point backward.
        .
        .           @param pt Projected point
        .           @param K Camera intrinsic parameters
        .           @param R Camera rotation matrix
        .           @return Backward-projected point
        """
        ...
    def warpRoi(self, src_size, K, R) -> retval:
        """
        .   @param src_size Source image bounding box
        .           @param K Camera intrinsic parameters
        .           @param R Camera rotation matrix
        .           @return Projected image minimum bounding box
        """
        ...
    ...

class QRCodeDetector(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def decode(
        self, img, points, straight_qrcode=...
    ) -> Tuple[retval, straight_qrcode]:
        """
        .   @brief Decodes QR code in image once it's found by the detect() method.
        .
        .        Returns UTF8-encoded output string or empty string if the code cannot be decoded.
        .        @param img grayscale or color (BGR) image containing QR code.
        .        @param points Quadrangle vertices found by detect() method (or some other algorithm).
        .        @param straight_qrcode The optional output image containing rectified and binarized QR code
        """
        ...
    def decodeCurved(
        self, img, points, straight_qrcode=...
    ) -> Tuple[retval, straight_qrcode]:
        """
        .   @brief Decodes QR code on a curved surface in image once it's found by the detect() method.
        .
        .        Returns UTF8-encoded output string or empty string if the code cannot be decoded.
        .        @param img grayscale or color (BGR) image containing QR code.
        .        @param points Quadrangle vertices found by detect() method (or some other algorithm).
        .        @param straight_qrcode The optional output image containing rectified and binarized QR code
        """
        ...
    def decodeMulti(
        self, img, points, straight_qrcode=...
    ) -> Tuple[o, straight_qrcode]:
        """
        .   @brief Decodes QR codes in image once it's found by the detect() method.
        .        @param img grayscale or color (BGR) image containing QR codes.
        .        @param decoded_info UTF8-encoded output vector of string or empty vector of string if the codes cannot be decoded.
        .        @param points vector of Quadrangle vertices found by detect() method (or some other algorithm).
        .        @param straight_qrcode The optional output vector of images containing rectified and binarized QR codes
        """
        ...
    def detect(self, img, points=...) -> Tuple[retval, points]:
        """
        .   @brief Detects QR code in image and returns the quadrangle containing the code.
        .        @param img grayscale or color (BGR) image containing (or not) QR code.
        .        @param points Output vector of vertices of the minimum-area quadrangle containing the code.
        """
        ...
    def detectAndDecode(
        self, img, points=..., straight_qrcode=...
    ) -> Tuple[s, straight_qrcode]:
        """
        .   @brief Both detects and decodes QR code
        .
        .        @param img grayscale or color (BGR) image containing QR code.
        .        @param points optional output array of vertices of the found QR code quadrangle. Will be empty if not found.
        .        @param straight_qrcode The optional output image containing rectified and binarized QR code
        """
        ...
    def detectAndDecodeCurved(
        self, img, points=..., straight_qrcode=...
    ) -> Tuple[s, straight_qrcode]:
        """
        .   @brief Both detects and decodes QR code on a curved surface
        .
        .        @param img grayscale or color (BGR) image containing QR code.
        .        @param points optional output array of vertices of the found QR code quadrangle. Will be empty if not found.
        .        @param straight_qrcode The optional output image containing rectified and binarized QR code
        """
        ...
    def detectAndDecodeMulti(
        self, img, points=..., straight_qrcode=...
    ) -> Tuple[points, straight_qrcode]:
        """
        .   @brief Both detects and decodes QR codes
        .       @param img grayscale or color (BGR) image containing QR codes.
        .       @param decoded_info UTF8-encoded output vector of string or empty vector of string if the codes cannot be decoded.
        .       @param points optional output vector of vertices of the found QR code quadrangles. Will be empty if not found.
        .       @param straight_qrcode The optional output vector of images containing rectified and binarized QR codes
        """
        ...
    def detectMulti(self, img, points=...) -> Tuple[retval, points]:
        """
        .   @brief Detects QR codes in image and returns the vector of the quadrangles containing the codes.
        .        @param img grayscale or color (BGR) image containing (or not) QR codes.
        .        @param points Output vector of vector of vertices of the minimum-area quadrangle containing the codes.
        """
        ...
    def setEpsX(self, epsX) -> None:
        """
        .   @brief sets the epsilon used during the horizontal scan of QR code stop marker detection.
        .        @param epsX Epsilon neighborhood, which allows you to determine the horizontal pattern
        .        of the scheme 1:1:3:1:1 according to QR code standard.
        """
        ...
    def setEpsY(self, epsY) -> None:
        """
        .   @brief sets the epsilon used during the vertical scan of QR code stop marker detection.
        .        @param epsY Epsilon neighborhood, which allows you to determine the vertical pattern
        .        of the scheme 1:1:3:1:1 according to QR code standard.
        """
        ...
    ...

class SIFT(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        nfeatures=...,
        nOctaveLayers=...,
        contrastThreshold=...,
        edgeThreshold=...,
        sigma=...,
    ) -> retval:
        """
        .   @param nfeatures The number of best features to retain. The features are ranked by their scores
        .       (measured in SIFT algorithm as the local contrast)
        .
        .       @param nOctaveLayers The number of layers in each octave. 3 is the value used in D. Lowe paper. The
        .       number of octaves is computed automatically from the image resolution.
        .
        .       @param contrastThreshold The contrast threshold used to filter out weak features in semi-uniform
        .       (low-contrast) regions. The larger the threshold, the less features are produced by the detector.
        .
        .       @note The contrast threshold will be divided by nOctaveLayers when the filtering is applied. When
        .       nOctaveLayers is set to default and if you want to use the value used in D. Lowe paper, 0.03, set
        .       this argument to 0.09.
        .
        .       @param edgeThreshold The threshold used to filter out edge-like features. Note that the its meaning
        .       is different from the contrastThreshold, i.e. the larger the edgeThreshold, the less features are
        .       filtered out (more features are retained).
        .
        .       @param sigma The sigma of the Gaussian applied to the input image at the octave \#0. If your image
        .       is captured with a weak camera with soft lenses, you might want to reduce the number.



        create(nfeatures, nOctaveLayers, contrastThreshold, edgeThreshold, sigma, descriptorType) -> retval
        .   @brief Create SIFT with specified descriptorType.
        .       @param nfeatures The number of best features to retain. The features are ranked by their scores
        .       (measured in SIFT algorithm as the local contrast)
        .
        .       @param nOctaveLayers The number of layers in each octave. 3 is the value used in D. Lowe paper. The
        .       number of octaves is computed automatically from the image resolution.
        .
        .       @param contrastThreshold The contrast threshold used to filter out weak features in semi-uniform
        .       (low-contrast) regions. The larger the threshold, the less features are produced by the detector.
        .
        .       @note The contrast threshold will be divided by nOctaveLayers when the filtering is applied. When
        .       nOctaveLayers is set to default and if you want to use the value used in D. Lowe paper, 0.03, set
        .       this argument to 0.09.
        .
        .       @param edgeThreshold The threshold used to filter out edge-like features. Note that the its meaning
        .       is different from the contrastThreshold, i.e. the larger the edgeThreshold, the less features are
        .       filtered out (more features are retained).
        .
        .       @param sigma The sigma of the Gaussian applied to the input image at the octave \#0. If your image
        .       is captured with a weak camera with soft lenses, you might want to reduce the number.
        .
        .       @param descriptorType The type of descriptors. Only CV_32F and CV_8U are supported.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    ...

class SimpleBlobDetector(Feature2D):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(parameters=...) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDefaultName(self) -> retval:
        """
        .
        """
        ...
    ...

class SimpleBlobDetector_Params(builtins.object):
    blobColor: ...
    """
    blobColor
    """

    filterByArea: ...
    """
    filterByArea
    """

    filterByCircularity: ...
    """
    filterByCircularity
    """

    filterByColor: ...
    """
    filterByColor
    """

    filterByConvexity: ...
    """
    filterByConvexity
    """

    filterByInertia: ...
    """
    filterByInertia
    """

    maxArea: ...
    """
    maxArea
    """

    maxCircularity: ...
    """
    maxCircularity
    """

    maxConvexity: ...
    """
    maxConvexity
    """

    maxInertiaRatio: ...
    """
    maxInertiaRatio
    """

    maxThreshold: ...
    """
    maxThreshold
    """

    minArea: ...
    """
    minArea
    """

    minCircularity: ...
    """
    minCircularity
    """

    minConvexity: ...
    """
    minConvexity
    """

    minDistBetweenBlobs: ...
    """
    minDistBetweenBlobs
    """

    minInertiaRatio: ...
    """
    minInertiaRatio
    """

    minRepeatability: ...
    """
    minRepeatability
    """

    minThreshold: ...
    """
    minThreshold
    """

    thresholdStep: ...
    """
    thresholdStep
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class SparseOpticalFlow(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def calc(
        self, prevImg, nextImg, prevPts, nextPts, status=..., err=...
    ) -> Tuple[s, err]:
        """
        .   @brief Calculates a sparse optical flow.
        .
        .       @param prevImg First input image.
        .       @param nextImg Second input image of the same size and the same type as prevImg.
        .       @param prevPts Vector of 2D points for which the flow needs to be found.
        .       @param nextPts Output vector of 2D points containing the calculated new positions of input features in the second image.
        .       @param status Output status vector. Each element of the vector is set to 1 if the
        .                     flow for the corresponding features has been found. Otherwise, it is set to 0.
        .       @param err Optional output vector that contains error response for each point (inverse confidence).
        """
        ...
    ...

class SparsePyrLKOpticalFlow(SparseOpticalFlow):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        winSize=..., maxLevel=..., crit=..., flags=..., minEigThreshold=...
    ) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getFlags(self) -> retval:
        """
        .
        """
        ...
    def getMaxLevel(self) -> retval:
        """
        .
        """
        ...
    def getMinEigThreshold(self) -> retval:
        """
        .
        """
        ...
    def getTermCriteria(self) -> retval:
        """
        .
        """
        ...
    def getWinSize(self) -> retval:
        """
        .
        """
        ...
    def setFlags(self, flags) -> None:
        """
        .
        """
        ...
    def setMaxLevel(self, maxLevel) -> None:
        """
        .
        """
        ...
    def setMinEigThreshold(self, minEigThreshold) -> None:
        """
        .
        """
        ...
    def setTermCriteria(self, crit) -> None:
        """
        .
        """
        ...
    def setWinSize(self, winSize) -> None:
        """
        .
        """
        ...
    ...

class StereoBM(StereoMatcher):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(numDisparities=..., blockSize=...) -> retval:
        """
        .   @brief Creates StereoBM object
        .
        .       @param numDisparities the disparity search range. For each pixel algorithm will find the best
        .       disparity from 0 (default minimum disparity) to numDisparities. The search range can then be
        .       shifted by changing the minimum disparity.
        .       @param blockSize the linear size of the blocks compared by the algorithm. The size should be odd
        .       (as the block is centered at the current pixel). Larger block size implies smoother, though less
        .       accurate disparity map. Smaller block size gives more detailed disparity map, but there is higher
        .       chance for algorithm to find a wrong correspondence.
        .
        .       The function create StereoBM object. You can then call StereoBM::compute() to compute disparity for
        .       a specific stereo pair.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getPreFilterCap(self) -> retval:
        """
        .
        """
        ...
    def getPreFilterSize(self) -> retval:
        """
        .
        """
        ...
    def getPreFilterType(self) -> retval:
        """
        .
        """
        ...
    def getROI1(self) -> retval:
        """
        .
        """
        ...
    def getROI2(self) -> retval:
        """
        .
        """
        ...
    def getSmallerBlockSize(self) -> retval:
        """
        .
        """
        ...
    def getTextureThreshold(self) -> retval:
        """
        .
        """
        ...
    def getUniquenessRatio(self) -> retval:
        """
        .
        """
        ...
    def setPreFilterCap(self, preFilterCap) -> None:
        """
        .
        """
        ...
    def setPreFilterSize(self, preFilterSize) -> None:
        """
        .
        """
        ...
    def setPreFilterType(self, preFilterType) -> None:
        """
        .
        """
        ...
    def setROI1(self, roi1) -> None:
        """
        .
        """
        ...
    def setROI2(self, roi2) -> None:
        """
        .
        """
        ...
    def setSmallerBlockSize(self, blockSize) -> None:
        """
        .
        """
        ...
    def setTextureThreshold(self, textureThreshold) -> None:
        """
        .
        """
        ...
    def setUniquenessRatio(self, uniquenessRatio) -> None:
        """
        .
        """
        ...
    ...

class StereoMatcher(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def compute(self, left, right, disparity=...) -> disparity:
        """
        .   @brief Computes disparity map for the specified stereo pair
        .
        .       @param left Left 8-bit single-channel image.
        .       @param right Right image of the same size and the same type as the left one.
        .       @param disparity Output disparity map. It has the same size as the input images. Some algorithms,
        .       like StereoBM or StereoSGBM compute 16-bit fixed-point disparity map (where each disparity value
        .       has 4 fractional bits), whereas other algorithms output 32-bit floating-point disparity map.
        """
        ...
    def getBlockSize(self) -> retval:
        """
        .
        """
        ...
    def getDisp12MaxDiff(self) -> retval:
        """
        .
        """
        ...
    def getMinDisparity(self) -> retval:
        """
        .
        """
        ...
    def getNumDisparities(self) -> retval:
        """
        .
        """
        ...
    def getSpeckleRange(self) -> retval:
        """
        .
        """
        ...
    def getSpeckleWindowSize(self) -> retval:
        """
        .
        """
        ...
    def setBlockSize(self, blockSize) -> None:
        """
        .
        """
        ...
    def setDisp12MaxDiff(self, disp12MaxDiff) -> None:
        """
        .
        """
        ...
    def setMinDisparity(self, minDisparity) -> None:
        """
        .
        """
        ...
    def setNumDisparities(self, numDisparities) -> None:
        """
        .
        """
        ...
    def setSpeckleRange(self, speckleRange) -> None:
        """
        .
        """
        ...
    def setSpeckleWindowSize(self, speckleWindowSize) -> None:
        """
        .
        """
        ...
    ...

class StereoSGBM(StereoMatcher):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        minDisparity=...,
        numDisparities=...,
        blockSize=...,
        P1=...,
        P2=...,
        disp12MaxDiff=...,
        preFilterCap=...,
        uniquenessRatio=...,
        speckleWindowSize=...,
        speckleRange=...,
        mode=...,
    ) -> retval:
        """
        .   @brief Creates StereoSGBM object
        .
        .       @param minDisparity Minimum possible disparity value. Normally, it is zero but sometimes
        .       rectification algorithms can shift images, so this parameter needs to be adjusted accordingly.
        .       @param numDisparities Maximum disparity minus minimum disparity. The value is always greater than
        .       zero. In the current implementation, this parameter must be divisible by 16.
        .       @param blockSize Matched block size. It must be an odd number \>=1 . Normally, it should be
        .       somewhere in the 3..11 range.
        .       @param P1 The first parameter controlling the disparity smoothness. See below.
        .       @param P2 The second parameter controlling the disparity smoothness. The larger the values are,
        .       the smoother the disparity is. P1 is the penalty on the disparity change by plus or minus 1
        .       between neighbor pixels. P2 is the penalty on the disparity change by more than 1 between neighbor
        .       pixels. The algorithm requires P2 \> P1 . See stereo_match.cpp sample where some reasonably good
        .       P1 and P2 values are shown (like 8\*number_of_image_channels\*blockSize\*blockSize and
        .       32\*number_of_image_channels\*blockSize\*blockSize , respectively).
        .       @param disp12MaxDiff Maximum allowed difference (in integer pixel units) in the left-right
        .       disparity check. Set it to a non-positive value to disable the check.
        .       @param preFilterCap Truncation value for the prefiltered image pixels. The algorithm first
        .       computes x-derivative at each pixel and clips its value by [-preFilterCap, preFilterCap] interval.
        .       The result values are passed to the Birchfield-Tomasi pixel cost function.
        .       @param uniquenessRatio Margin in percentage by which the best (minimum) computed cost function
        .       value should "win" the second best value to consider the found match correct. Normally, a value
        .       within the 5-15 range is good enough.
        .       @param speckleWindowSize Maximum size of smooth disparity regions to consider their noise speckles
        .       and invalidate. Set it to 0 to disable speckle filtering. Otherwise, set it somewhere in the
        .       50-200 range.
        .       @param speckleRange Maximum disparity variation within each connected component. If you do speckle
        .       filtering, set the parameter to a positive value, it will be implicitly multiplied by 16.
        .       Normally, 1 or 2 is good enough.
        .       @param mode Set it to StereoSGBM::MODE_HH to run the full-scale two-pass dynamic programming
        .       algorithm. It will consume O(W\*H\*numDisparities) bytes, which is large for 640x480 stereo and
        .       huge for HD-size pictures. By default, it is set to false .
        .
        .       The first constructor initializes StereoSGBM with all the default parameters. So, you only have to
        .       set StereoSGBM::numDisparities at minimum. The second constructor enables you to set each parameter
        .       to a custom value.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getMode(self) -> retval:
        """
        .
        """
        ...
    def getP1(self) -> retval:
        """
        .
        """
        ...
    def getP2(self) -> retval:
        """
        .
        """
        ...
    def getPreFilterCap(self) -> retval:
        """
        .
        """
        ...
    def getUniquenessRatio(self) -> retval:
        """
        .
        """
        ...
    def setMode(self, mode) -> None:
        """
        .
        """
        ...
    def setP1(self, P1) -> None:
        """
        .
        """
        ...
    def setP2(self, P2) -> None:
        """
        .
        """
        ...
    def setPreFilterCap(self, preFilterCap) -> None:
        """
        .
        """
        ...
    def setUniquenessRatio(self, uniquenessRatio) -> None:
        """
        .
        """
        ...
    ...

class Stitcher(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(mode=...) -> retval:
        """
        .   @brief Creates a Stitcher configured in one of the stitching modes.
        .
        .       @param mode Scenario for stitcher operation. This is usually determined by source of images
        .       to stitch and their transformation. Default parameters will be chosen for operation in given
        .       scenario.
        .       @return Stitcher class instance.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def composePanorama(self, pano=...) -> Tuple[retval, pano]:
        """
        .   @overload



        composePanorama(images, pano=...) -> retval, pano
        .   @brief These functions try to compose the given images (or images stored internally from the other function
        .       calls) into the final pano under the assumption that the image transformations were estimated
        .       before.
        .
        .       @note Use the functions only if you're aware of the stitching pipeline, otherwise use
        .       Stitcher::stitch.
        .
        .       @param images Input images.
        .       @param pano Final pano.
        .       @return Status code.
        """
        ...
    def compositingResol(self) -> retval:
        """
        .
        """
        ...
    def estimateTransform(self, images, masks=...) -> retval:
        """
        .   @brief These functions try to match the given images and to estimate rotations of each camera.
        .
        .       @note Use the functions only if you're aware of the stitching pipeline, otherwise use
        .       Stitcher::stitch.
        .
        .       @param images Input images.
        .       @param masks Masks for each input image specifying where to look for keypoints (optional).
        .       @return Status code.
        """
        ...
    def interpolationFlags(self) -> retval:
        """
        .
        """
        ...
    def panoConfidenceThresh(self) -> retval:
        """
        .
        """
        ...
    def registrationResol(self) -> retval:
        """
        .
        """
        ...
    def seamEstimationResol(self) -> retval:
        """
        .
        """
        ...
    def setCompositingResol(self, resol_mpx) -> None:
        """
        .
        """
        ...
    def setInterpolationFlags(self, interp_flags) -> None:
        """
        .
        """
        ...
    def setPanoConfidenceThresh(self, conf_thresh) -> None:
        """
        .
        """
        ...
    def setRegistrationResol(self, resol_mpx) -> None:
        """
        .
        """
        ...
    def setSeamEstimationResol(self, resol_mpx) -> None:
        """
        .
        """
        ...
    def setWaveCorrection(self, flag) -> None:
        """
        .
        """
        ...
    def stitch(self, images, pano=...) -> Tuple[retval, pano]:
        """
        .   @overload



        stitch(images, masks, pano=...) -> retval, pano
        .   @brief These functions try to stitch the given images.
        .
        .       @param images Input images.
        .       @param masks Masks for each input image specifying where to look for keypoints (optional).
        .       @param pano Final pano.
        .       @return Status code.
        """
        ...
    def waveCorrection(self) -> retval:
        """
        .
        """
        ...
    def workScale(self) -> retval:
        """
        .
        """
        ...
    ...

class Subdiv2D(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def edgeDst(self, edge) -> Tuple[retval, dstpt]:
        """
        .   @brief Returns the edge destination.
        .
        .       @param edge Subdivision edge ID.
        .       @param dstpt Output vertex location.
        .
        .       @returns vertex ID.
        """
        ...
    def edgeOrg(self, edge) -> Tuple[retval, orgpt]:
        """
        .   @brief Returns the edge origin.
        .
        .       @param edge Subdivision edge ID.
        .       @param orgpt Output vertex location.
        .
        .       @returns vertex ID.
        """
        ...
    def findNearest(self, pt) -> Tuple[retval, nearestPt]:
        """
        .   @brief Finds the subdivision vertex closest to the given point.
        .
        .       @param pt Input point.
        .       @param nearestPt Output subdivision vertex point.
        .
        .       The function is another function that locates the input point within the subdivision. It finds the
        .       subdivision vertex that is the closest to the input point. It is not necessarily one of vertices
        .       of the facet containing the input point, though the facet (located using locate() ) is used as a
        .       starting point.
        .
        .       @returns vertex ID.
        """
        ...
    def getEdge(self, edge, nextEdgeType) -> retval:
        """
        .   @brief Returns one of the edges related to the given edge.
        .
        .       @param edge Subdivision edge ID.
        .       @param nextEdgeType Parameter specifying which of the related edges to return.
        .       The following values are possible:
        .       -   NEXT_AROUND_ORG next around the edge origin ( eOnext on the picture below if e is the input edge)
        .       -   NEXT_AROUND_DST next around the edge vertex ( eDnext )
        .       -   PREV_AROUND_ORG previous around the edge origin (reversed eRnext )
        .       -   PREV_AROUND_DST previous around the edge destination (reversed eLnext )
        .       -   NEXT_AROUND_LEFT next around the left facet ( eLnext )
        .       -   NEXT_AROUND_RIGHT next around the right facet ( eRnext )
        .       -   PREV_AROUND_LEFT previous around the left facet (reversed eOnext )
        .       -   PREV_AROUND_RIGHT previous around the right facet (reversed eDnext )
        .
        .       ![sample output](pics/quadedge.png)
        .
        .       @returns edge ID related to the input edge.
        """
        ...
    def getEdgeList(self) -> edgeList:
        """
        .   @brief Returns a list of all edges.
        .
        .       @param edgeList Output vector.
        .
        .       The function gives each edge as a 4 numbers vector, where each two are one of the edge
        .       vertices. i.e. org_x = v[0], org_y = v[1], dst_x = v[2], dst_y = v[3].
        """
        ...
    def getLeadingEdgeList(self) -> leadingEdgeList:
        """
        .   @brief Returns a list of the leading edge ID connected to each triangle.
        .
        .       @param leadingEdgeList Output vector.
        .
        .       The function gives one edge ID for each triangle.
        """
        ...
    def getTriangleList(self) -> triangleList:
        """
        .   @brief Returns a list of all triangles.
        .
        .       @param triangleList Output vector.
        .
        .       The function gives each triangle as a 6 numbers vector, where each two are one of the triangle
        .       vertices. i.e. p1_x = v[0], p1_y = v[1], p2_x = v[2], p2_y = v[3], p3_x = v[4], p3_y = v[5].
        """
        ...
    def getVertex(self, vertex) -> Tuple[retval, firstEdge]:
        """
        .   @brief Returns vertex location from vertex ID.
        .
        .       @param vertex vertex ID.
        .       @param firstEdge Optional. The first edge ID which is connected to the vertex.
        .       @returns vertex (x,y)
        """
        ...
    def getVoronoiFacetList(self, idx) -> Tuple[facetList, facetCenters]:
        """
        .   @brief Returns a list of all Voronoi facets.
        .
        .       @param idx Vector of vertices IDs to consider. For all vertices you can pass empty vector.
        .       @param facetList Output vector of the Voronoi facets.
        .       @param facetCenters Output vector of the Voronoi facets center points.
        """
        ...
    def initDelaunay(self, rect) -> None:
        """
        .   @brief Creates a new empty Delaunay subdivision
        .
        .       @param rect Rectangle that includes all of the 2D points that are to be added to the subdivision.
        """
        ...
    def insert(self, pt) -> retval:
        """
        .   @brief Insert a single point into a Delaunay triangulation.
        .
        .       @param pt Point to insert.
        .
        .       The function inserts a single point into a subdivision and modifies the subdivision topology
        .       appropriately. If a point with the same coordinates exists already, no new point is added.
        .       @returns the ID of the point.
        .
        .       @note If the point is outside of the triangulation specified rect a runtime error is raised.



        insert(ptvec) -> None
        .   @brief Insert multiple points into a Delaunay triangulation.
        .
        .       @param ptvec Points to insert.
        .
        .       The function inserts a vector of points into a subdivision and modifies the subdivision topology
        .       appropriately.
        """
        ...
    def locate(self, pt) -> Tuple[e, vertex]:
        """
        .   @brief Returns the location of a point within a Delaunay triangulation.
        .
        .       @param pt Point to locate.
        .       @param edge Output edge that the point belongs to or is located to the right of it.
        .       @param vertex Optional output vertex the input point coincides with.
        .
        .       The function locates the input point within the subdivision and gives one of the triangle edges
        .       or vertices.
        .
        .       @returns an integer which specify one of the following five cases for point location:
        .       -  The point falls into some facet. The function returns #PTLOC_INSIDE and edge will contain one of
        .          edges of the facet.
        .       -  The point falls onto the edge. The function returns #PTLOC_ON_EDGE and edge will contain this edge.
        .       -  The point coincides with one of the subdivision vertices. The function returns #PTLOC_VERTEX and
        .          vertex will contain a pointer to the vertex.
        .       -  The point is outside the subdivision reference rectangle. The function returns #PTLOC_OUTSIDE_RECT
        .          and no pointers are filled.
        .       -  One of input arguments is invalid. A runtime error is raised or, if silent or "parent" error
        .          processing mode is selected, #PTLOC_ERROR is returned.
        """
        ...
    def nextEdge(self, edge) -> retval:
        """
        .   @brief Returns next edge around the edge origin.
        .
        .       @param edge Subdivision edge ID.
        .
        .       @returns an integer which is next edge ID around the edge origin: eOnext on the
        .       picture above if e is the input edge).
        """
        ...
    def rotateEdge(self, edge, rotate) -> retval:
        """
        .   @brief Returns another edge of the same quad-edge.
        .
        .       @param edge Subdivision edge ID.
        .       @param rotate Parameter specifying which of the edges of the same quad-edge as the input
        .       one to return. The following values are possible:
        .       -   0 - the input edge ( e on the picture below if e is the input edge)
        .       -   1 - the rotated edge ( eRot )
        .       -   2 - the reversed edge (reversed e (in green))
        .       -   3 - the reversed rotated edge (reversed eRot (in green))
        .
        .       @returns one of the edges ID of the same quad-edge as the input edge.
        """
        ...
    def symEdge(self, edge) -> retval:
        """
        .
        """
        ...
    ...

class TickMeter(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getAvgTimeMilli(self) -> retval:
        """
        .
        """
        ...
    def getAvgTimeSec(self) -> retval:
        """
        .
        """
        ...
    def getCounter(self) -> retval:
        """
        .
        """
        ...
    def getFPS(self) -> retval:
        """
        .
        """
        ...
    def getTimeMicro(self) -> retval:
        """
        .
        """
        ...
    def getTimeMilli(self) -> retval:
        """
        .
        """
        ...
    def getTimeSec(self) -> retval:
        """
        .
        """
        ...
    def getTimeTicks(self) -> retval:
        """
        .
        """
        ...
    def reset(self) -> None:
        """
        .
        """
        ...
    def start(self) -> None:
        """
        .
        """
        ...
    def stop(self) -> None:
        """
        .
        """
        ...
    ...

class Tonemap(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getGamma(self) -> retval:
        """
        .
        """
        ...
    def process(self, src, dst=...) -> dst:
        """
        .   @brief Tonemaps image
        .
        .       @param src source image - CV_32FC3 Mat (float 32 bits 3 channels)
        .       @param dst destination image - CV_32FC3 Mat with values in [0, 1] range
        """
        ...
    def setGamma(self, gamma) -> None:
        """
        .
        """
        ...
    ...

class TonemapDrago(Tonemap):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getBias(self) -> retval:
        """
        .
        """
        ...
    def getSaturation(self) -> retval:
        """
        .
        """
        ...
    def setBias(self, bias) -> None:
        """
        .
        """
        ...
    def setSaturation(self, saturation) -> None:
        """
        .
        """
        ...
    ...

class TonemapMantiuk(Tonemap):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getSaturation(self) -> retval:
        """
        .
        """
        ...
    def getScale(self) -> retval:
        """
        .
        """
        ...
    def setSaturation(self, saturation) -> None:
        """
        .
        """
        ...
    def setScale(self, scale) -> None:
        """
        .
        """
        ...
    ...

class TonemapReinhard(Tonemap):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getColorAdaptation(self) -> retval:
        """
        .
        """
        ...
    def getIntensity(self) -> retval:
        """
        .
        """
        ...
    def getLightAdaptation(self) -> retval:
        """
        .
        """
        ...
    def setColorAdaptation(self, color_adapt) -> None:
        """
        .
        """
        ...
    def setIntensity(self, intensity) -> None:
        """
        .
        """
        ...
    def setLightAdaptation(self, light_adapt) -> None:
        """
        .
        """
        ...
    ...

class Tracker(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def init(self, image, boundingBox) -> None:
        """
        .   @brief Initialize the tracker with a known bounding box that surrounded the target
        .       @param image The initial frame
        .       @param boundingBox The initial bounding box
        """
        ...
    def update(self, image) -> Tuple[retval, boundingBox]:
        """
        .   @brief Update the tracker, find the new most likely bounding box for the target
        .       @param image The current frame
        .       @param boundingBox The bounding box that represent the new target location, if true was returned, not
        .       modified otherwise
        .
        .       @return True means that target was located and false means that tracker cannot locate target in
        .       current frame. Note, that latter *does not* imply that tracker has failed, maybe target is indeed
        .       missing from the frame (say, out of sight)
        """
        ...
    ...

class TrackerGOTURN(Tracker):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(parameters=...) -> retval:
        """
        .   @brief Constructor
        .       @param parameters GOTURN parameters TrackerGOTURN::Params
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class TrackerGOTURN_Params(builtins.object):
    modelBin: ...
    """
    modelBin
    """

    modelTxt: ...
    """
    modelTxt
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class TrackerMIL(Tracker):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(parameters=...) -> retval:
        """
        .   @brief Create MIL tracker instance
        .        *  @param parameters MIL parameters TrackerMIL::Params
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class TrackerMIL_Params(builtins.object):
    featureSetNumFeatures: ...
    """
    featureSetNumFeatures
    """

    samplerInitInRadius: ...
    """
    samplerInitInRadius
    """

    samplerInitMaxNegNum: ...
    """
    samplerInitMaxNegNum
    """

    samplerSearchWinSize: ...
    """
    samplerSearchWinSize
    """

    samplerTrackInRadius: ...
    """
    samplerTrackInRadius
    """

    samplerTrackMaxNegNum: ...
    """
    samplerTrackMaxNegNum
    """

    samplerTrackMaxPosNum: ...
    """
    samplerTrackMaxPosNum
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class UMat(builtins.object):
    offset: ...
    """
    offset
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def context() -> retval:
        """
        .
        """
        ...
    @staticmethod
    def queue() -> retval:
        """
        .
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def get(self) -> retval:
        """
        .
        """
        ...
    def handle(self, accessFlags) -> retval:
        """
        .
        """
        ...
    def isContinuous(self) -> retval:
        """
        .
        """
        ...
    def isSubmatrix(self) -> retval:
        """
        .
        """
        ...
    ...

class UsacParams(builtins.object):
    confidence: ...
    """
    confidence
    """

    isParallel: ...
    """
    isParallel
    """

    loIterations: ...
    """
    loIterations
    """

    loMethod: ...
    """
    loMethod
    """

    loSampleSize: ...
    """
    loSampleSize
    """

    maxIterations: ...
    """
    maxIterations
    """

    neighborsSearch: ...
    """
    neighborsSearch
    """

    randomGeneratorState: ...
    """
    randomGeneratorState
    """

    sampler: ...
    """
    sampler
    """

    score: ...
    """
    score
    """

    threshold: ...
    """
    threshold
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class VariationalRefinement(DenseOpticalFlow):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   @brief Creates an instance of VariationalRefinement
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def calcUV(self, I0, I1, flow_u, flow_v) -> Tuple[flow_u, flow_v]:
        """
        .   @brief @ref calc function overload to handle separate horizontal (u) and vertical (v) flow components
        .   (to avoid extra splits/merges)
        """
        ...
    def getAlpha(self) -> retval:
        """
        .   @brief Weight of the smoothness term
        .   @see setAlpha
        """
        ...
    def getDelta(self) -> retval:
        """
        .   @brief Weight of the color constancy term
        .   @see setDelta
        """
        ...
    def getFixedPointIterations(self) -> retval:
        """
        .   @brief Number of outer (fixed-point) iterations in the minimization procedure.
        .   @see setFixedPointIterations
        """
        ...
    def getGamma(self) -> retval:
        """
        .   @brief Weight of the gradient constancy term
        .   @see setGamma
        """
        ...
    def getOmega(self) -> retval:
        """
        .   @brief Relaxation factor in SOR
        .   @see setOmega
        """
        ...
    def getSorIterations(self) -> retval:
        """
        .   @brief Number of inner successive over-relaxation (SOR) iterations
        .           in the minimization procedure to solve the respective linear system.
        .   @see setSorIterations
        """
        ...
    def setAlpha(self, val) -> None:
        """
        .   @copybrief getAlpha @see getAlpha
        """
        ...
    def setDelta(self, val) -> None:
        """
        .   @copybrief getDelta @see getDelta
        """
        ...
    def setFixedPointIterations(self, val) -> None:
        """
        .   @copybrief getFixedPointIterations @see getFixedPointIterations
        """
        ...
    def setGamma(self, val) -> None:
        """
        .   @copybrief getGamma @see getGamma
        """
        ...
    def setOmega(self, val) -> None:
        """
        .   @copybrief getOmega @see getOmega
        """
        ...
    def setSorIterations(self, val) -> None:
        """
        .   @copybrief getSorIterations @see getSorIterations
        """
        ...
    ...

class VideoCapture(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def get(self, propId) -> retval:
        """
        .   @brief Returns the specified VideoCapture property
        .
        .       @param propId Property identifier from cv::VideoCaptureProperties (eg. cv::CAP_PROP_POS_MSEC, cv::CAP_PROP_POS_FRAMES, ...)
        .       or one from @ref videoio_flags_others
        .       @return Value for the specified property. Value 0 is returned when querying a property that is
        .       not supported by the backend used by the VideoCapture instance.
        .
        .       @note Reading / writing properties involves many layers. Some unexpected result might happens
        .       along this chain.
        .       @code{.txt}
        .       VideoCapture -> API Backend -> Operating System -> Device Driver -> Device Hardware
        .       @endcode
        .       The returned value might be different from what really used by the device or it could be encoded
        .       using device dependent rules (eg. steps or percentage). Effective behaviour depends from device
        .       driver and API Backend
        """
        ...
    def getBackendName(self) -> retval:
        """
        .   @brief Returns used backend API name
        .
        .        @note Stream should be opened.
        """
        ...
    def getExceptionMode(self) -> retval:
        """
        .
        """
        ...
    def grab(self) -> retval:
        """
        .   @brief Grabs the next frame from video file or capturing device.
        .
        .       @return `true` (non-zero) in the case of success.
        .
        .       The method/function grabs the next frame from video file or camera and returns true (non-zero) in
        .       the case of success.
        .
        .       The primary use of the function is in multi-camera environments, especially when the cameras do not
        .       have hardware synchronization. That is, you call VideoCapture::grab() for each camera and after that
        .       call the slower method VideoCapture::retrieve() to decode and get frame from each camera. This way
        .       the overhead on demosaicing or motion jpeg decompression etc. is eliminated and the retrieved frames
        .       from different cameras will be closer in time.
        .
        .       Also, when a connected camera is multi-head (for example, a stereo camera or a Kinect device), the
        .       correct way of retrieving data from it is to call VideoCapture::grab() first and then call
        .       VideoCapture::retrieve() one or more times with different values of the channel parameter.
        .
        .       @ref tutorial_kinect_openni
        """
        ...
    def isOpened(self) -> retval:
        """
        .   @brief Returns true if video capturing has been initialized already.
        .
        .       If the previous call to VideoCapture constructor or VideoCapture::open() succeeded, the method returns
        .       true.
        """
        ...
    def open(self, filename, apiPreference=...) -> retval:
        """
        .   @brief  Opens a video file or a capturing device or an IP video stream for video capturing.
        .
        .       @overload
        .
        .       Parameters are same as the constructor VideoCapture(const String& filename, int apiPreference = CAP_ANY)
        .       @return `true` if the file has been successfully opened
        .
        .       The method first calls VideoCapture::release to close the already opened file or camera.



        open(filename, apiPreference, params) -> retval
        .   @brief  Opens a camera for video capturing
        .
        .       @overload
        .
        .       The `params` parameter allows to specify extra parameters encoded as pairs `(paramId_1, paramValue_1, paramId_2, paramValue_2, ...)`.
        .       See cv::VideoCaptureProperties
        .
        .       @return `true` if the file has been successfully opened
        .
        .       The method first calls VideoCapture::release to close the already opened file or camera.



        open(index, apiPreference=...) -> retval
        .   @brief  Opens a camera for video capturing
        .
        .       @overload
        .
        .       Parameters are same as the constructor VideoCapture(int index, int apiPreference = CAP_ANY)
        .       @return `true` if the camera has been successfully opened.
        .
        .       The method first calls VideoCapture::release to close the already opened file or camera.



        open(index, apiPreference, params) -> retval
        .   @brief Returns true if video capturing has been initialized already.
        .
        .       @overload
        .
        .       The `params` parameter allows to specify extra parameters encoded as pairs `(paramId_1, paramValue_1, paramId_2, paramValue_2, ...)`.
        .       See cv::VideoCaptureProperties
        .
        .       @return `true` if the camera has been successfully opened.
        .
        .       The method first calls VideoCapture::release to close the already opened file or camera.
        """
        ...
    def read(self, image=...) -> Tuple[retval, image]:
        """
        .   @brief Grabs, decodes and returns the next video frame.
        .
        .       @param [out] image the video frame is returned here. If no frames has been grabbed the image will be empty.
        .       @return `false` if no frames has been grabbed
        .
        .       The method/function combines VideoCapture::grab() and VideoCapture::retrieve() in one call. This is the
        .       most convenient method for reading video files or capturing data from decode and returns the just
        .       grabbed frame. If no frames has been grabbed (camera has been disconnected, or there are no more
        .       frames in video file), the method returns false and the function returns empty image (with %cv::Mat, test it with Mat::empty()).
        .
        .       @note In @ref videoio_c "C API", functions cvRetrieveFrame() and cv.RetrieveFrame() return image stored inside the video
        .       capturing structure. It is not allowed to modify or release the image! You can copy the frame using
        .       cvCloneImage and then do whatever you want with the copy.
        """
        ...
    def release(self) -> None:
        """
        .   @brief Closes video file or capturing device.
        .
        .       The method is automatically called by subsequent VideoCapture::open and by VideoCapture
        .       destructor.
        .
        .       The C function also deallocates memory and clears \*capture pointer.
        """
        ...
    def retrieve(self, image=..., flag=...) -> Tuple[retval, image]:
        """
        .   @brief Decodes and returns the grabbed video frame.
        .
        .       @param [out] image the video frame is returned here. If no frames has been grabbed the image will be empty.
        .       @param flag it could be a frame index or a driver specific flag
        .       @return `false` if no frames has been grabbed
        .
        .       The method decodes and returns the just grabbed frame. If no frames has been grabbed
        .       (camera has been disconnected, or there are no more frames in video file), the method returns false
        .       and the function returns an empty image (with %cv::Mat, test it with Mat::empty()).
        .
        .       @sa read()
        .
        .       @note In @ref videoio_c "C API", functions cvRetrieveFrame() and cv.RetrieveFrame() return image stored inside the video
        .       capturing structure. It is not allowed to modify or release the image! You can copy the frame using
        .       cvCloneImage and then do whatever you want with the copy.
        """
        ...
    def set(self, propId, value) -> retval:
        """
        .   @brief Sets a property in the VideoCapture.
        .
        .       @param propId Property identifier from cv::VideoCaptureProperties (eg. cv::CAP_PROP_POS_MSEC, cv::CAP_PROP_POS_FRAMES, ...)
        .       or one from @ref videoio_flags_others
        .       @param value Value of the property.
        .       @return `true` if the property is supported by backend used by the VideoCapture instance.
        .       @note Even if it returns `true` this doesn't ensure that the property
        .       value has been accepted by the capture device. See note in VideoCapture::get()
        """
        ...
    def setExceptionMode(self, enable) -> None:
        """
        .   Switches exceptions mode
        .        *
        .        * methods raise exceptions if not successful instead of returning an error code
        """
        ...
    ...

class VideoWriter(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def fourcc(c1, c2, c3, c4) -> retval:
        """
        .   @brief Concatenates 4 chars to a fourcc code
        .
        .       @return a fourcc code
        .
        .       This static method constructs the fourcc code of the codec to be used in the constructor
        .       VideoWriter::VideoWriter or VideoWriter::open.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def get(self, propId) -> retval:
        """
        .   @brief Returns the specified VideoWriter property
        .
        .        @param propId Property identifier from cv::VideoWriterProperties (eg. cv::VIDEOWRITER_PROP_QUALITY)
        .        or one of @ref videoio_flags_others
        .
        .        @return Value for the specified property. Value 0 is returned when querying a property that is
        .        not supported by the backend used by the VideoWriter instance.
        """
        ...
    def getBackendName(self) -> retval:
        """
        .   @brief Returns used backend API name
        .
        .        @note Stream should be opened.
        """
        ...
    def isOpened(self) -> retval:
        """
        .   @brief Returns true if video writer has been successfully initialized.
        """
        ...
    def open(self, filename, fourcc, fps, frameSize, isColor=...) -> retval:
        """
        .   @brief Initializes or reinitializes video writer.
        .
        .       The method opens video writer. Parameters are the same as in the constructor
        .       VideoWriter::VideoWriter.
        .       @return `true` if video writer has been successfully initialized
        .
        .       The method first calls VideoWriter::release to close the already opened file.



        open(filename, apiPreference, fourcc, fps, frameSize, isColor=...) -> retval
        .   @overload



        open(filename, fourcc, fps, frameSize, params) -> retval
        .   @overload



        open(filename, apiPreference, fourcc, fps, frameSize, params) -> retval
        .   @overload
        """
        ...
    def release(self) -> None:
        """
        .   @brief Closes the video writer.
        .
        .       The method is automatically called by subsequent VideoWriter::open and by the VideoWriter
        .       destructor.
        """
        ...
    def set(self, propId, value) -> retval:
        """
        .   @brief Sets a property in the VideoWriter.
        .
        .        @param propId Property identifier from cv::VideoWriterProperties (eg. cv::VIDEOWRITER_PROP_QUALITY)
        .        or one of @ref videoio_flags_others
        .
        .        @param value Value of the property.
        .        @return  `true` if the property is supported by the backend used by the VideoWriter instance.
        """
        ...
    def write(self, image) -> None:
        """
        .   @brief Writes the next video frame
        .
        .       @param image The written frame. In general, color images are expected in BGR format.
        .
        .       The function/method writes the specified image to video file. It must have the same size as has
        .       been specified when opening the video writer.
        """
        ...
    ...

class WarperCreator(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class cuda_BufferPool(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getAllocator(self) -> retval:
        """
        .
        """
        ...
    def getBuffer(self, rows, cols, type) -> retval:
        """
        .



        getBuffer(size, type) -> retval
        .
        """
        ...
    ...

class cuda_DeviceInfo(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def ECCEnabled(self) -> retval:
        """
        .
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def asyncEngineCount(self) -> retval:
        """
        .
        """
        ...
    def canMapHostMemory(self) -> retval:
        """
        .
        """
        ...
    def clockRate(self) -> retval:
        """
        .
        """
        ...
    def computeMode(self) -> retval:
        """
        .
        """
        ...
    def concurrentKernels(self) -> retval:
        """
        .
        """
        ...
    def deviceID(self) -> retval:
        """
        .   @brief Returns system index of the CUDA device starting with 0.
        """
        ...
    def freeMemory(self) -> retval:
        """
        .
        """
        ...
    def integrated(self) -> retval:
        """
        .
        """
        ...
    def isCompatible(self) -> retval:
        """
        .   @brief Checks the CUDA module and device compatibility.
        .
        .       This function returns true if the CUDA module can be run on the specified device. Otherwise, it
        .       returns false .
        """
        ...
    def kernelExecTimeoutEnabled(self) -> retval:
        """
        .
        """
        ...
    def l2CacheSize(self) -> retval:
        """
        .
        """
        ...
    def majorVersion(self) -> retval:
        """
        .
        """
        ...
    def maxGridSize(self) -> retval:
        """
        .
        """
        ...
    def maxSurface1D(self) -> retval:
        """
        .
        """
        ...
    def maxSurface1DLayered(self) -> retval:
        """
        .
        """
        ...
    def maxSurface2D(self) -> retval:
        """
        .
        """
        ...
    def maxSurface2DLayered(self) -> retval:
        """
        .
        """
        ...
    def maxSurface3D(self) -> retval:
        """
        .
        """
        ...
    def maxSurfaceCubemap(self) -> retval:
        """
        .
        """
        ...
    def maxSurfaceCubemapLayered(self) -> retval:
        """
        .
        """
        ...
    def maxTexture1D(self) -> retval:
        """
        .
        """
        ...
    def maxTexture1DLayered(self) -> retval:
        """
        .
        """
        ...
    def maxTexture1DLinear(self) -> retval:
        """
        .
        """
        ...
    def maxTexture1DMipmap(self) -> retval:
        """
        .
        """
        ...
    def maxTexture2D(self) -> retval:
        """
        .
        """
        ...
    def maxTexture2DGather(self) -> retval:
        """
        .
        """
        ...
    def maxTexture2DLayered(self) -> retval:
        """
        .
        """
        ...
    def maxTexture2DLinear(self) -> retval:
        """
        .
        """
        ...
    def maxTexture2DMipmap(self) -> retval:
        """
        .
        """
        ...
    def maxTexture3D(self) -> retval:
        """
        .
        """
        ...
    def maxTextureCubemap(self) -> retval:
        """
        .
        """
        ...
    def maxTextureCubemapLayered(self) -> retval:
        """
        .
        """
        ...
    def maxThreadsDim(self) -> retval:
        """
        .
        """
        ...
    def maxThreadsPerBlock(self) -> retval:
        """
        .
        """
        ...
    def maxThreadsPerMultiProcessor(self) -> retval:
        """
        .
        """
        ...
    def memPitch(self) -> retval:
        """
        .
        """
        ...
    def memoryBusWidth(self) -> retval:
        """
        .
        """
        ...
    def memoryClockRate(self) -> retval:
        """
        .
        """
        ...
    def minorVersion(self) -> retval:
        """
        .
        """
        ...
    def multiProcessorCount(self) -> retval:
        """
        .
        """
        ...
    def pciBusID(self) -> retval:
        """
        .
        """
        ...
    def pciDeviceID(self) -> retval:
        """
        .
        """
        ...
    def pciDomainID(self) -> retval:
        """
        .
        """
        ...
    def queryMemory(self, totalMemory, freeMemory) -> None:
        """
        .
        """
        ...
    def regsPerBlock(self) -> retval:
        """
        .
        """
        ...
    def sharedMemPerBlock(self) -> retval:
        """
        .
        """
        ...
    def surfaceAlignment(self) -> retval:
        """
        .
        """
        ...
    def tccDriver(self) -> retval:
        """
        .
        """
        ...
    def textureAlignment(self) -> retval:
        """
        .
        """
        ...
    def texturePitchAlignment(self) -> retval:
        """
        .
        """
        ...
    def totalConstMem(self) -> retval:
        """
        .
        """
        ...
    def totalGlobalMem(self) -> retval:
        """
        .
        """
        ...
    def totalMemory(self) -> retval:
        """
        .
        """
        ...
    def unifiedAddressing(self) -> retval:
        """
        .
        """
        ...
    def warpSize(self) -> retval:
        """
        .
        """
        ...
    ...

class cuda_Event(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def elapsedTime(start, end) -> retval:
        """
        .
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def queryIfComplete(self) -> retval:
        """
        .
        """
        ...
    def record(self, stream=...) -> None:
        """
        .
        """
        ...
    def waitForCompletion(self) -> None:
        """
        .
        """
        ...
    ...

class cuda_GpuData(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class cuda_GpuMat(builtins.object):
    step: ...
    """
    step
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def defaultAllocator() -> retval:
        """
        .
        """
        ...
    @staticmethod
    def setDefaultAllocator(allocator) -> None:
        """
        .
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def adjustROI(self, dtop, dbottom, dleft, dright) -> retval:
        """
        .
        """
        ...
    def assignTo(self, m, type=...) -> None:
        """
        .
        """
        ...
    def channels(self) -> retval:
        """
        .
        """
        ...
    def clone(self) -> retval:
        """
        .
        """
        ...
    def col(self, x) -> retval:
        """
        .
        """
        ...
    def colRange(self, startcol, endcol) -> retval:
        """
        .



        colRange(r) -> retval
        .
        """
        ...
    def convertTo(self, rtype, dst=...) -> dst:
        """
        .



        convertTo(rtype, stream, dst=...) -> dst
        .



        convertTo(rtype, alpha, dst=..., beta=...) -> dst
        .



        convertTo(rtype, alpha, stream, dst=...) -> dst
        .



        convertTo(rtype, alpha, beta, stream, dst=...) -> dst
        .
        """
        ...
    def copyTo(self, dst=...) -> dst:
        """
        .



        copyTo(stream, dst=...) -> dst
        .



        copyTo(mask, dst=...) -> dst
        .



        copyTo(mask, stream, dst=...) -> dst
        .
        """
        ...
    def create(self, rows, cols, type) -> None:
        """
        .



        create(size, type) -> None
        .
        """
        ...
    def cudaPtr(self) -> retval:
        """
        .
        """
        ...
    def depth(self) -> retval:
        """
        .
        """
        ...
    def download(self, dst=...) -> dst:
        """
        .   @brief Performs data download from GpuMat (Blocking call)
        .
        .       This function copies data from device memory to host memory. As being a blocking call, it is
        .       guaranteed that the copy operation is finished when this function returns.



        download(stream, dst=...) -> dst
        .   @brief Performs data download from GpuMat (Non-Blocking call)
        .
        .       This function copies data from device memory to host memory. As being a non-blocking call, this
        .       function may return even if the copy operation is not finished.
        .
        .       The copy operation may be overlapped with operations in other non-default streams if \p stream is
        .       not the default stream and \p dst is HostMem allocated with HostMem::PAGE_LOCKED option.
        """
        ...
    def elemSize(self) -> retval:
        """
        .
        """
        ...
    def elemSize1(self) -> retval:
        """
        .
        """
        ...
    def empty(self) -> retval:
        """
        .
        """
        ...
    def isContinuous(self) -> retval:
        """
        .
        """
        ...
    def locateROI(self, wholeSize, ofs) -> None:
        """
        .
        """
        ...
    def reshape(self, cn, rows=...) -> retval:
        """
        .
        """
        ...
    def row(self, y) -> retval:
        """
        .
        """
        ...
    def rowRange(self, startrow, endrow) -> retval:
        """
        .



        rowRange(r) -> retval
        .
        """
        ...
    def setTo(self, s) -> retval:
        """
        .



        setTo(s, stream) -> retval
        .



        setTo(s, mask) -> retval
        .



        setTo(s, mask, stream) -> retval
        .
        """
        ...
    def size(self) -> retval:
        """
        .
        """
        ...
    def step1(self) -> retval:
        """
        .
        """
        ...
    def swap(self, mat) -> None:
        """
        .
        """
        ...
    def type(self) -> retval:
        """
        .
        """
        ...
    def updateContinuityFlag(self) -> None:
        """
        .
        """
        ...
    def upload(self, arr) -> None:
        """
        .   @brief Performs data upload to GpuMat (Blocking call)
        .
        .       This function copies data from host memory to device memory. As being a blocking call, it is
        .       guaranteed that the copy operation is finished when this function returns.



        upload(arr, stream) -> None
        .   @brief Performs data upload to GpuMat (Non-Blocking call)
        .
        .       This function copies data from host memory to device memory. As being a non-blocking call, this
        .       function may return even if the copy operation is not finished.
        .
        .       The copy operation may be overlapped with operations in other non-default streams if \p stream is
        .       not the default stream and \p dst is HostMem allocated with HostMem::PAGE_LOCKED option.
        """
        ...
    ...

class cuda_GpuMatND(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class cuda_GpuMat_Allocator(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class cuda_HostMem(builtins.object):
    step: ...
    """
    step
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def channels(self) -> retval:
        """
        .
        """
        ...
    def clone(self) -> retval:
        """
        .
        """
        ...
    def create(self, rows, cols, type) -> None:
        """
        .
        """
        ...
    def createMatHeader(self) -> retval:
        """
        .
        """
        ...
    def depth(self) -> retval:
        """
        .
        """
        ...
    def elemSize(self) -> retval:
        """
        .
        """
        ...
    def elemSize1(self) -> retval:
        """
        .
        """
        ...
    def empty(self) -> retval:
        """
        .
        """
        ...
    def isContinuous(self) -> retval:
        """
        .   @brief Maps CPU memory to GPU address space and creates the cuda::GpuMat header without reference counting
        .       for it.
        .
        .       This can be done only if memory was allocated with the SHARED flag and if it is supported by the
        .       hardware. Laptops often share video and CPU memory, so address spaces can be mapped, which
        .       eliminates an extra copy.
        """
        ...
    def reshape(self, cn, rows=...) -> retval:
        """
        .
        """
        ...
    def size(self) -> retval:
        """
        .
        """
        ...
    def step1(self) -> retval:
        """
        .
        """
        ...
    def swap(self, b) -> None:
        """
        .
        """
        ...
    def type(self) -> retval:
        """
        .
        """
        ...
    ...

class cuda_Stream(builtins.object):
    @staticmethod
    def Null() -> retval:
        """
        .   @brief Adds a callback to be called on the host after all currently enqueued items in the stream have
        .       completed.
        .
        .       @note Callbacks must not make any CUDA API calls. Callbacks must not perform any synchronization
        .       that may depend on outstanding device work or other callbacks that are not mandated to run earlier.
        .       Callbacks without a mandated order (in independent streams) execute in undefined order and may be
        .       serialized.
        """
        ...
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def cudaPtr(self) -> retval:
        """
        .
        """
        ...
    def queryIfComplete(self) -> retval:
        """
        .   @brief Returns true if the current stream queue is finished. Otherwise, it returns false.
        """
        ...
    def waitEvent(self, event) -> None:
        """
        .   @brief Makes a compute stream wait on an event.
        """
        ...
    def waitForCompletion(self) -> None:
        """
        .   @brief Blocks the current CPU thread until all operations in the stream are complete.
        """
        ...
    ...

class cuda_TargetArchs(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def has(major, minor) -> retval:
        """
        .   @brief There is a set of methods to check whether the module contains intermediate (PTX) or binary CUDA
        .       code for the given architecture(s):
        .
        .       @param major Major compute capability version.
        .       @param minor Minor compute capability version.
        """
        ...
    @staticmethod
    def hasBin(major, minor) -> retval:
        """
        .
        """
        ...
    @staticmethod
    def hasEqualOrGreater(major, minor) -> retval:
        """
        .
        """
        ...
    @staticmethod
    def hasEqualOrGreaterBin(major, minor) -> retval:
        """
        .
        """
        ...
    @staticmethod
    def hasEqualOrGreaterPtx(major, minor) -> retval:
        """
        .
        """
        ...
    @staticmethod
    def hasEqualOrLessPtx(major, minor) -> retval:
        """
        .
        """
        ...
    @staticmethod
    def hasPtx(major, minor) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_AffineBasedEstimator(detail_Estimator):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_AffineBestOf2NearestMatcher(detail_BestOf2NearestMatcher):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_BestOf2NearestMatcher(detail_FeaturesMatcher):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        try_use_gpu=...,
        match_conf=...,
        num_matches_thresh1=...,
        num_matches_thresh2=...,
    ) -> retval:
        """
        .
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def collectGarbage(self) -> None:
        """
        .
        """
        ...
    ...

class detail_BestOf2NearestRangeMatcher(detail_BestOf2NearestMatcher):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_Blender(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def createDefault(type, try_gpu=...) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def blend(self, dst, dst_mask) -> Tuple[dst, dst_mask]:
        """
        .   @brief Blends and returns the final pano.
        .
        .       @param dst Final pano
        .       @param dst_mask Final pano mask
        """
        ...
    def feed(self, img, mask, tl) -> None:
        """
        .   @brief Processes the image.
        .
        .       @param img Source image
        .       @param mask Source image mask
        .       @param tl Source image top-left corners
        """
        ...
    def prepare(self, corners, sizes) -> None:
        """
        .   @brief Prepares the blender for blending.
        .
        .       @param corners Source images top-left corners
        .       @param sizes Source image sizes



        prepare(dst_roi) -> None
        .   @overload
        """
        ...
    ...

class detail_BlocksChannelsCompensator(detail_BlocksCompensator):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_BlocksCompensator(detail_ExposureCompensator):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, index, corner, image, mask) -> image:
        """
        .
        """
        ...
    def getBlockSize(self) -> retval:
        """
        .
        """
        ...
    def getMatGains(self, umv=...) -> umv:
        """
        .
        """
        ...
    def getNrFeeds(self) -> retval:
        """
        .
        """
        ...
    def getNrGainsFilteringIterations(self) -> retval:
        """
        .
        """
        ...
    def getSimilarityThreshold(self) -> retval:
        """
        .
        """
        ...
    def setBlockSize(self, width, height) -> None:
        """
        .



        setBlockSize(size) -> None
        .
        """
        ...
    def setMatGains(self, umv) -> None:
        """
        .
        """
        ...
    def setNrFeeds(self, nr_feeds) -> None:
        """
        .
        """
        ...
    def setNrGainsFilteringIterations(self, nr_iterations) -> None:
        """
        .
        """
        ...
    def setSimilarityThreshold(self, similarity_threshold) -> None:
        """
        .
        """
        ...
    ...

class detail_BlocksGainCompensator(detail_BlocksCompensator):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, index, corner, image, mask) -> image:
        """
        .
        """
        ...
    def getMatGains(self, umv=...) -> umv:
        """
        .
        """
        ...
    def setMatGains(self, umv) -> None:
        """
        .
        """
        ...
    ...

class detail_BundleAdjusterAffine(detail_BundleAdjusterBase):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_BundleAdjusterAffinePartial(detail_BundleAdjusterBase):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_BundleAdjusterBase(detail_Estimator):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def confThresh(self) -> retval:
        """
        .
        """
        ...
    def refinementMask(self) -> retval:
        """
        .
        """
        ...
    def setConfThresh(self, conf_thresh) -> None:
        """
        .
        """
        ...
    def setRefinementMask(self, mask) -> None:
        """
        .
        """
        ...
    def setTermCriteria(self, term_criteria) -> None:
        """
        .
        """
        ...
    def termCriteria(self) -> retval:
        """
        .
        """
        ...
    ...

class detail_BundleAdjusterRay(detail_BundleAdjusterBase):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_BundleAdjusterReproj(detail_BundleAdjusterBase):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_CameraParams(builtins.object):
    R: ...
    """
    R
    """

    aspect: ...
    """
    aspect
    """

    focal: ...
    """
    focal
    """

    ppx: ...
    """
    ppx
    """

    ppy: ...
    """
    ppy
    """

    t: ...
    """
    t
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def K(self) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_ChannelsCompensator(detail_ExposureCompensator):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, index, corner, image, mask) -> image:
        """
        .
        """
        ...
    def getMatGains(self, umv=...) -> umv:
        """
        .
        """
        ...
    def getNrFeeds(self) -> retval:
        """
        .
        """
        ...
    def getSimilarityThreshold(self) -> retval:
        """
        .
        """
        ...
    def setMatGains(self, umv) -> None:
        """
        .
        """
        ...
    def setNrFeeds(self, nr_feeds) -> None:
        """
        .
        """
        ...
    def setSimilarityThreshold(self, similarity_threshold) -> None:
        """
        .
        """
        ...
    ...

class detail_DpSeamFinder(detail_SeamFinder):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def setCostFunction(self, val) -> None:
        """
        .
        """
        ...
    ...

class detail_Estimator(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, features, pairwise_matches, cameras) -> Tuple[retval, cameras]:
        """
        .   @brief Estimates camera parameters.
        .
        .       @param features Features of images
        .       @param pairwise_matches Pairwise matches of images
        .       @param cameras Estimated camera parameters
        .       @return True in case of success, false otherwise
        """
        ...
    ...

class detail_ExposureCompensator(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def createDefault(type) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, index, corner, image, mask) -> image:
        """
        .   @brief Compensate exposure in the specified image.
        .
        .       @param index Image index
        .       @param corner Image top-left corner
        .       @param image Image to process
        .       @param mask Image mask
        """
        ...
    def feed(self, corners, images, masks) -> None:
        """
        .   @param corners Source image top-left corners
        .       @param images Source images
        .       @param masks Image masks to update (second value in pair specifies the value which should be used
        .       to detect where image is)
        """
        ...
    def getMatGains(self, arg1=...) -> arg1:
        """
        .
        """
        ...
    def getUpdateGain(self) -> retval:
        """
        .
        """
        ...
    def setMatGains(self, arg1) -> None:
        """
        .
        """
        ...
    def setUpdateGain(self, b) -> None:
        """
        .
        """
        ...
    ...

class detail_ExtractArgsCallback(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_ExtractMetaCallback(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_FeatherBlender(detail_Blender):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def blend(self, dst, dst_mask) -> Tuple[dst, dst_mask]:
        """
        .
        """
        ...
    def createWeightMaps(
        self, masks, corners, weight_maps
    ) -> Tuple[retval, weight_maps]:
        """
        .
        """
        ...
    def feed(self, img, mask, tl) -> None:
        """
        .
        """
        ...
    def prepare(self, dst_roi) -> None:
        """
        .
        """
        ...
    def setSharpness(self, val) -> None:
        """
        .
        """
        ...
    def sharpness(self) -> retval:
        """
        .
        """
        ...
    ...

class detail_FeaturesMatcher(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, features1, features2) -> matches_info:
        """
        .   @overload
        .       @param features1 First image features
        .       @param features2 Second image features
        .       @param matches_info Found matches
        """
        ...
    def apply2(self, features, mask=...) -> pairwise_matches:
        """
        .   @brief Performs images matching.
        .
        .       @param features Features of the source images
        .       @param pairwise_matches Found pairwise matches
        .       @param mask Mask indicating which image pairs must be matched
        .
        .       The function is parallelized with the TBB library.
        .
        .       @sa detail::MatchesInfo
        """
        ...
    def collectGarbage(self) -> None:
        """
        .   @brief Frees unused memory allocated before if there is any.
        """
        ...
    def isThreadSafe(self) -> retval:
        """
        .   @return True, if it's possible to use the same matcher instance in parallel, false otherwise
        """
        ...
    ...

class detail_GainCompensator(detail_ExposureCompensator):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, index, corner, image, mask) -> image:
        """
        .
        """
        ...
    def getMatGains(self, umv=...) -> umv:
        """
        .
        """
        ...
    def getNrFeeds(self) -> retval:
        """
        .
        """
        ...
    def getSimilarityThreshold(self) -> retval:
        """
        .
        """
        ...
    def setMatGains(self, umv) -> None:
        """
        .
        """
        ...
    def setNrFeeds(self, nr_feeds) -> None:
        """
        .
        """
        ...
    def setSimilarityThreshold(self, similarity_threshold) -> None:
        """
        .
        """
        ...
    ...

class detail_GraphCutSeamFinder(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def find(self, src, corners, masks) -> None:
        """
        .
        """
        ...
    ...

class detail_HomographyBasedEstimator(detail_Estimator):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_ImageFeatures(builtins.object):
    descriptors: ...
    """
    descriptors
    """

    img_idx: ...
    """
    img_idx
    """

    img_size: ...
    """
    img_size
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getKeypoints(self) -> retval:
        """
        .
        """
        ...
    ...

class detail_MatchesInfo(builtins.object):
    H: ...
    """
    H
    """

    confidence: ...
    """
    confidence
    """

    dst_img_idx: ...
    """
    dst_img_idx
    """

    num_inliers: ...
    """
    num_inliers
    """

    src_img_idx: ...
    """
    src_img_idx
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getInliers(self) -> retval:
        """
        .
        """
        ...
    def getMatches(self) -> retval:
        """
        .
        """
        ...
    ...

class detail_MultiBandBlender(detail_Blender):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def blend(self, dst, dst_mask) -> Tuple[dst, dst_mask]:
        """
        .
        """
        ...
    def feed(self, img, mask, tl) -> None:
        """
        .
        """
        ...
    def numBands(self) -> retval:
        """
        .
        """
        ...
    def prepare(self, dst_roi) -> None:
        """
        .
        """
        ...
    def setNumBands(self, val) -> None:
        """
        .
        """
        ...
    ...

class detail_NoBundleAdjuster(detail_BundleAdjusterBase):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_NoExposureCompensator(detail_ExposureCompensator):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def apply(self, arg1, arg2, arg3, arg4) -> arg3:
        """
        .
        """
        ...
    def getMatGains(self, umv=...) -> umv:
        """
        .
        """
        ...
    def setMatGains(self, umv) -> None:
        """
        .
        """
        ...
    ...

class detail_NoSeamFinder(detail_SeamFinder):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def find(self, arg1, arg2, arg3) -> arg3:
        """
        .
        """
        ...
    ...

class detail_PairwiseSeamFinder(detail_SeamFinder):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def find(self, src, corners, masks) -> masks:
        """
        .
        """
        ...
    ...

class detail_ProjectorBase(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_SeamFinder(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def createDefault(type) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def find(self, src, corners, masks) -> masks:
        """
        .   @brief Estimates seams.
        .
        .       @param src Source images
        .       @param corners Source image top-left corners
        .       @param masks Source image masks to update
        """
        ...
    ...

class detail_SphericalProjector(detail_ProjectorBase):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def mapBackward(self, u, v, x, y) -> None:
        """
        .
        """
        ...
    def mapForward(self, x, y, u, v) -> None:
        """
        .
        """
        ...
    ...

class detail_Timelapser(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def createDefault(type) -> retval:
        """
        .
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDst(self) -> retval:
        """
        .
        """
        ...
    def initialize(self, corners, sizes) -> None:
        """
        .
        """
        ...
    def process(self, img, mask, tl) -> None:
        """
        .
        """
        ...
    ...

class detail_TimelapserCrop(detail_Timelapser):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class detail_VoronoiSeamFinder(detail_PairwiseSeamFinder):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def find(self, src, corners, masks) -> masks:
        """
        .
        """
        ...
    ...

class dnn_ClassificationModel(dnn_Model):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def classify(self, frame) -> Tuple[classId, conf]:
        """
        .   @overload
        """
        ...
    ...

class dnn_DetectionModel(dnn_Model):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def detect(self, frame, confThreshold=..., nmsThreshold=...) -> Tuple[s, boxes]:
        """
        .   @brief Given the @p input frame, create input blob, run net and return result detections.
        .             *  @param[in]  frame  The input image.
        .             *  @param[out] classIds Class indexes in result detection.
        .             *  @param[out] confidences A set of corresponding confidences.
        .             *  @param[out] boxes A set of bounding boxes.
        .             *  @param[in] confThreshold A threshold used to filter boxes by confidences.
        .             *  @param[in] nmsThreshold A threshold used in non maximum suppression.
        """
        ...
    def getNmsAcrossClasses(self) -> retval:
        """
        .   * @brief Getter for nmsAcrossClasses. This variable defaults to false,
        .             * such that when non max suppression is used during the detect() function, it will do so only per-class
        """
        ...
    def setNmsAcrossClasses(self, value) -> retval:
        """
        .   * @brief nmsAcrossClasses defaults to false,
        .             * such that when non max suppression is used during the detect() function, it will do so per-class.
        .             * This function allows you to toggle this behaviour.
        .             * @param[in] value The new value for nmsAcrossClasses
        """
        ...
    ...

class dnn_DictValue(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getIntValue(self, idx=...) -> retval:
        """
        .
        """
        ...
    def getRealValue(self, idx=...) -> retval:
        """
        .
        """
        ...
    def getStringValue(self, idx=...) -> retval:
        """
        .
        """
        ...
    def isInt(self) -> retval:
        """
        .
        """
        ...
    def isReal(self) -> retval:
        """
        .
        """
        ...
    def isString(self) -> retval:
        """
        .
        """
        ...
    ...

class dnn_KeypointsModel(dnn_Model):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def estimate(self, frame, thresh=...) -> retval:
        """
        .   @brief Given the @p input frame, create input blob, run net
        .             *  @param[in]  frame  The input image.
        .             *  @param thresh minimum confidence threshold to select a keypoint
        .             *  @returns a vector holding the x and y coordinates of each detected keypoint
        .             *
        """
        ...
    ...

class dnn_Layer(Algorithm):
    blobs: ...
    """
    blobs
    """

    name: ...
    """
    name
    """

    preferableTarget: ...
    """
    preferableTarget
    """

    type: ...
    """
    type
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def finalize(self, inputs, outputs=...) -> outputs:
        """
        .   @brief Computes and sets internal parameters according to inputs, outputs and blobs.
        .            *  @param[in]  inputs  vector of already allocated input blobs
        .            *  @param[out] outputs vector of already allocated output blobs
        .            *
        .            * If this method is called after network has allocated all memory for input and output blobs
        .            * and before inferencing.
        """
        ...
    def outputNameToIndex(self, outputName) -> retval:
        """
        .   @brief Returns index of output blob in output array.
        .            *  @see inputNameToIndex()
        """
        ...
    def run(self, inputs, internals, outputs=...) -> Tuple[outputs, internals]:
        """
        .   @brief Allocates layer and computes output.
        .            *  @deprecated This method will be removed in the future release.
        """
        ...
    ...

class dnn_Model(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def predict(self, frame, outs=...) -> outs:
        """
        .   @brief Given the @p input frame, create input blob, run net and return the output @p blobs.
        .             *  @param[in]  frame  The input image.
        .             *  @param[out] outs Allocated output blobs, which will store results of the computation.
        """
        ...
    def setInputCrop(self, crop) -> retval:
        """
        .   @brief Set flag crop for frame.
        .             *  @param[in] crop Flag which indicates whether image will be cropped after resize or not.
        """
        ...
    def setInputMean(self, mean) -> retval:
        """
        .   @brief Set mean value for frame.
        .             *  @param[in] mean Scalar with mean values which are subtracted from channels.
        """
        ...
    def setInputParams(
        self, scale=..., size=..., mean=..., swapRB=..., crop=...
    ) -> None:
        """
        .   @brief Set preprocessing parameters for frame.
        .            *  @param[in] size New input size.
        .            *  @param[in] mean Scalar with mean values which are subtracted from channels.
        .            *  @param[in] scale Multiplier for frame values.
        .            *  @param[in] swapRB Flag which indicates that swap first and last channels.
        .            *  @param[in] crop Flag which indicates whether image will be cropped after resize or not.
        .            *  blob(n, c, y, x) = scale * resize( frame(y, x, c) ) - mean(c) )
        """
        ...
    def setInputScale(self, scale) -> retval:
        """
        .   @brief Set scalefactor value for frame.
        .             *  @param[in] scale Multiplier for frame values.
        """
        ...
    def setInputSize(self, size) -> retval:
        """
        .   @brief Set input size for frame.
        .             *  @param[in] size New input size.
        .             *  @note If shape of the new blob less than 0, then frame size not change.



        setInputSize(width, height) -> retval
        .   @overload
        .            *  @param[in] width New input width.
        .            *  @param[in] height New input height.
        """
        ...
    def setInputSwapRB(self, swapRB) -> retval:
        """
        .   @brief Set flag swapRB for frame.
        .             *  @param[in] swapRB Flag which indicates that swap first and last channels.
        """
        ...
    def setPreferableBackend(self, backendId) -> retval:
        """
        .
        """
        ...
    def setPreferableTarget(self, targetId) -> retval:
        """
        .
        """
        ...
    ...

class dnn_Net(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def readFromModelOptimizer(xml, bin) -> retval:
        """
        .   @brief Create a network from Intel's Model Optimizer intermediate representation (IR).
        .            *  @param[in] xml XML configuration file with network's topology.
        .            *  @param[in] bin Binary file with trained weights.
        .            *  Networks imported from Intel's Model Optimizer are launched in Intel's Inference Engine
        .            *  backend.



        readFromModelOptimizer(bufferModelConfig, bufferWeights) -> retval
        .   @brief Create a network from Intel's Model Optimizer in-memory buffers with intermediate representation (IR).
        .            *  @param[in] bufferModelConfig buffer with model's configuration.
        .            *  @param[in] bufferWeights buffer with model's trained weights.
        .            *  @returns Net object.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def connect(self, outPin, inpPin) -> None:
        """
        .   @brief Connects output of the first layer to input of the second layer.
        .            *  @param outPin descriptor of the first layer output.
        .            *  @param inpPin descriptor of the second layer input.
        .            *
        .            * Descriptors have the following template <DFN>&lt;layer_name&gt;[.input_number]</DFN>:
        .            * - the first part of the template <DFN>layer_name</DFN> is string name of the added layer.
        .            *   If this part is empty then the network input pseudo layer will be used;
        .            * - the second optional part of the template <DFN>input_number</DFN>
        .            *   is either number of the layer input, either label one.
        .            *   If this part is omitted then the first layer input will be used.
        .            *
        .            *  @see setNetInputs(), Layer::inputNameToIndex(), Layer::outputNameToIndex()
        """
        ...
    def dump(self) -> retval:
        """
        .   @brief Dump net to String
        .            *  @returns String with structure, hyperparameters, backend, target and fusion
        .            *  Call method after setInput(). To see correct backend, target and fusion run after forward().
        """
        ...
    def dumpToFile(self, path) -> None:
        """
        .   @brief Dump net structure, hyperparameters, backend, target and fusion to dot file
        .            *  @param path   path to output file with .dot extension
        .            *  @see dump()
        """
        ...
    def empty(self) -> retval:
        """
        .   Returns true if there are no layers in the network.
        """
        ...
    def enableFusion(self, fusion) -> None:
        """
        .   @brief Enables or disables layer fusion in the network.
        .            * @param fusion true to enable the fusion, false to disable. The fusion is enabled by default.
        """
        ...
    def forward(self, outputName=...) -> retval:
        """
        .   @brief Runs forward pass to compute output of layer with name @p outputName.
        .            *  @param outputName name for layer which output is needed to get
        .            *  @return blob for first output of specified layer.
        .            *  @details By default runs forward pass for the whole network.



        forward(outputBlobs=..., outputName=...) -> outputBlobs
        .   @brief Runs forward pass to compute output of layer with name @p outputName.
        .            *  @param outputBlobs contains all output blobs for specified layer.
        .            *  @param outputName name for layer which output is needed to get
        .            *  @details If @p outputName is empty, runs forward pass for the whole network.



        forward(outBlobNames, outputBlobs=...) -> outputBlobs
        .   @brief Runs forward pass to compute outputs of layers listed in @p outBlobNames.
        .            *  @param outputBlobs contains blobs for first outputs of specified layers.
        .            *  @param outBlobNames names for layers which outputs are needed to get
        """
        ...
    def forwardAndRetrieve(self, outBlobNames) -> outputBlobs:
        """
        .   @brief Runs forward pass to compute outputs of layers listed in @p outBlobNames.
        .            *  @param outputBlobs contains all output blobs for each layer specified in @p outBlobNames.
        .            *  @param outBlobNames names for layers which outputs are needed to get
        """
        ...
    def forwardAsync(self, outputName=...) -> retval:
        """
        .   @brief Runs forward pass to compute output of layer with name @p outputName.
        .            *  @param outputName name for layer which output is needed to get
        .            *  @details By default runs forward pass for the whole network.
        .            *
        .            *  This is an asynchronous version of forward(const String&).
        .            *  dnn::DNN_BACKEND_INFERENCE_ENGINE backend is required.
        """
        ...
    def getFLOPS(self, netInputShapes) -> retval:
        """
        .   @brief Computes FLOP for whole loaded model with specified input shapes.
        .            * @param netInputShapes vector of shapes for all net inputs.
        .            * @returns computed FLOP.



        getFLOPS(netInputShape) -> retval
        .   @overload



        getFLOPS(layerId, netInputShapes) -> retval
        .   @overload



        getFLOPS(layerId, netInputShape) -> retval
        .   @overload
        """
        ...
    def getLayer(self, layerId) -> retval:
        """
        .   @brief Returns pointer to layer with specified id or name which the network use.
        """
        ...
    def getLayerId(self, layer) -> retval:
        """
        .   @brief Converts string name of the layer to the integer identifier.
        .            *  @returns id of the layer, or -1 if the layer wasn't found.
        """
        ...
    def getLayerNames(self) -> retval:
        """
        .
        """
        ...
    def getLayerTypes(self) -> layersTypes:
        """
        .   @brief Returns list of types for layer used in model.
        .            * @param layersTypes output parameter for returning types.
        """
        ...
    def getLayersCount(self, layerType) -> retval:
        """
        .   @brief Returns count of layers of specified type.
        .            * @param layerType type.
        .            * @returns count of layers
        """
        ...
    def getLayersShapes(self, netInputShapes) -> Tuple[s, outLayersShapes]:
        """
        .   @brief Returns input and output shapes for all layers in loaded model;
        .            *  preliminary inferencing isn't necessary.
        .            *  @param netInputShapes shapes for all input blobs in net input layer.
        .            *  @param layersIds output parameter for layer IDs.
        .            *  @param inLayersShapes output parameter for input layers shapes;
        .            * order is the same as in layersIds
        .            *  @param outLayersShapes output parameter for output layers shapes;
        .            * order is the same as in layersIds



        getLayersShapes(netInputShape) -> layersIds, inLayersShapes, outLayersShapes
        .   @overload
        """
        ...
    def getMemoryConsumption(self, netInputShape) -> Tuple[weights, blobs]:
        """
        .   @overload



        getMemoryConsumption(layerId, netInputShapes) -> weights, blobs
        .   @overload



        getMemoryConsumption(layerId, netInputShape) -> weights, blobs
        .   @overload
        """
        ...
    def getParam(self, layer, numParam=...) -> retval:
        """
        .   @brief Returns parameter blob of the layer.
        .            *  @param layer name or id of the layer.
        .            *  @param numParam index of the layer parameter in the Layer::blobs array.
        .            *  @see Layer::blobs
        """
        ...
    def getPerfProfile(self) -> Tuple[retval, timings]:
        """
        .   @brief Returns overall time for inference and timings (in ticks) for layers.
        .            * Indexes in returned vector correspond to layers ids. Some layers can be fused with others,
        .            * in this case zero ticks count will be return for that skipped layers.
        .            * @param timings vector for tick timings for all layers.
        .            * @return overall ticks for model inference.
        """
        ...
    def getUnconnectedOutLayers(self) -> retval:
        """
        .   @brief Returns indexes of layers with unconnected outputs.
        """
        ...
    def getUnconnectedOutLayersNames(self) -> retval:
        """
        .   @brief Returns names of layers with unconnected outputs.
        """
        ...
    def setHalideScheduler(self, scheduler) -> None:
        """
        .   * @brief Compile Halide layers.
        .            * @param[in] scheduler Path to YAML file with scheduling directives.
        .            * @see setPreferableBackend
        .            *
        .            * Schedule layers that support Halide backend. Then compile them for
        .            * specific target. For layers that not represented in scheduling file
        .            * or if no manual scheduling used at all, automatic scheduling will be applied.
        """
        ...
    def setInput(self, blob, name=..., scalefactor=..., mean=...) -> None:
        """
        .   @brief Sets the new input value for the network
        .            *  @param blob        A new blob. Should have CV_32F or CV_8U depth.
        .            *  @param name        A name of input layer.
        .            *  @param scalefactor An optional normalization scale.
        .            *  @param mean        An optional mean subtraction values.
        .            *  @see connect(String, String) to know format of the descriptor.
        .            *
        .            *  If scale or mean values are specified, a final input blob is computed
        .            *  as:
        .            * \f[input(n,c,h,w) = scalefactor \times (blob(n,c,h,w) - mean_c)\f]
        """
        ...
    def setInputShape(self, inputName, shape) -> None:
        """
        .   @brief Specify shape of network input.
        """
        ...
    def setInputsNames(self, inputBlobNames) -> None:
        """
        .   @brief Sets outputs names of the network input pseudo layer.
        .            *
        .            * Each net always has special own the network input pseudo layer with id=0.
        .            * This layer stores the user blobs only and don't make any computations.
        .            * In fact, this layer provides the only way to pass user data into the network.
        .            * As any other layer, this layer can label its outputs and this function provides an easy way to do this.
        """
        ...
    def setParam(self, layer, numParam, blob) -> None:
        """
        .   @brief Sets the new value for the learned param of the layer.
        .            *  @param layer name or id of the layer.
        .            *  @param numParam index of the layer parameter in the Layer::blobs array.
        .            *  @param blob the new value.
        .            *  @see Layer::blobs
        .            *  @note If shape of the new blob differs from the previous shape,
        .            *  then the following forward pass may fail.
        """
        ...
    def setPreferableBackend(self, backendId) -> None:
        """
        .   * @brief Ask network to use specific computation backend where it supported.
        .            * @param[in] backendId backend identifier.
        .            * @see Backend
        .            *
        .            * If OpenCV is compiled with Intel's Inference Engine library, DNN_BACKEND_DEFAULT
        .            * means DNN_BACKEND_INFERENCE_ENGINE. Otherwise it equals to DNN_BACKEND_OPENCV.
        """
        ...
    def setPreferableTarget(self, targetId) -> None:
        """
        .   * @brief Ask network to make computations on specific target device.
        .            * @param[in] targetId target identifier.
        .            * @see Target
        .            *
        .            * List of supported combinations backend / target:
        .            * |                        | DNN_BACKEND_OPENCV | DNN_BACKEND_INFERENCE_ENGINE | DNN_BACKEND_HALIDE |  DNN_BACKEND_CUDA |
        .            * |------------------------|--------------------|------------------------------|--------------------|-------------------|
        .            * | DNN_TARGET_CPU         |                  + |                            + |                  + |                   |
        .            * | DNN_TARGET_OPENCL      |                  + |                            + |                  + |                   |
        .            * | DNN_TARGET_OPENCL_FP16 |                  + |                            + |                    |                   |
        .            * | DNN_TARGET_MYRIAD      |                    |                            + |                    |                   |
        .            * | DNN_TARGET_FPGA        |                    |                            + |                    |                   |
        .            * | DNN_TARGET_CUDA        |                    |                              |                    |                 + |
        .            * | DNN_TARGET_CUDA_FP16   |                    |                              |                    |                 + |
        .            * | DNN_TARGET_HDDL        |                    |                            + |                    |                   |
        """
        ...
    ...

class dnn_SegmentationModel(dnn_Model):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def segment(self, frame, mask=...) -> mask:
        """
        .   @brief Given the @p input frame, create input blob, run net
        .             *  @param[in]  frame  The input image.
        .             *  @param[out] mask Allocated class prediction for each pixel
        """
        ...
    ...

class dnn_TextDetectionModel(dnn_Model):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def detect(self, frame) -> Tuple[detections, confidences]:
        """
        .   @brief Performs detection
        .        *
        .        * Given the input @p frame, prepare network input, run network inference, post-process network output and return result detections.
        .        *
        .        * Each result is quadrangle's 4 points in this order:
        .        * - bottom-left
        .        * - top-left
        .        * - top-right
        .        * - bottom-right
        .        *
        .        * Use cv::getPerspectiveTransform function to retrive image region without perspective transformations.
        .        *
        .        * @note If DL model doesn't support that kind of output then result may be derived from detectTextRectangles() output.
        .        *
        .        * @param[in] frame The input image
        .        * @param[out] detections array with detections' quadrangles (4 points per result)
        .        * @param[out] confidences array with detection confidences



        detect(frame) -> detections
        .   @overload
        """
        ...
    def detectTextRectangles(self, frame) -> Tuple[detections, confidences]:
        """
        .   @brief Performs detection
        .        *
        .        * Given the input @p frame, prepare network input, run network inference, post-process network output and return result detections.
        .        *
        .        * Each result is rotated rectangle.
        .        *
        .        * @note Result may be inaccurate in case of strong perspective transformations.
        .        *
        .        * @param[in] frame the input image
        .        * @param[out] detections array with detections' RotationRect results
        .        * @param[out] confidences array with detection confidences



        detectTextRectangles(frame) -> detections
        .   @overload
        """
        ...
    ...

class dnn_TextDetectionModel_DB(dnn_TextDetectionModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getBinaryThreshold(self) -> retval:
        """
        .
        """
        ...
    def getMaxCandidates(self) -> retval:
        """
        .
        """
        ...
    def getPolygonThreshold(self) -> retval:
        """
        .
        """
        ...
    def getUnclipRatio(self) -> retval:
        """
        .
        """
        ...
    def setBinaryThreshold(self, binaryThreshold) -> retval:
        """
        .
        """
        ...
    def setMaxCandidates(self, maxCandidates) -> retval:
        """
        .
        """
        ...
    def setPolygonThreshold(self, polygonThreshold) -> retval:
        """
        .
        """
        ...
    def setUnclipRatio(self, unclipRatio) -> retval:
        """
        .
        """
        ...
    ...

class dnn_TextDetectionModel_EAST(dnn_TextDetectionModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getConfidenceThreshold(self) -> retval:
        """
        .   * @brief Get the detection confidence threshold
        """
        ...
    def getNMSThreshold(self) -> retval:
        """
        .   * @brief Get the detection confidence threshold
        """
        ...
    def setConfidenceThreshold(self, confThreshold) -> retval:
        """
        .   * @brief Set the detection confidence threshold
        .        * @param[in] confThreshold A threshold used to filter boxes by confidences
        """
        ...
    def setNMSThreshold(self, nmsThreshold) -> retval:
        """
        .   * @brief Set the detection NMS filter threshold
        .        * @param[in] nmsThreshold A threshold used in non maximum suppression
        """
        ...
    ...

class dnn_TextRecognitionModel(dnn_Model):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getDecodeType(self) -> retval:
        """
        .   * @brief Get the decoding method
        .        * @return the decoding method
        """
        ...
    def getVocabulary(self) -> retval:
        """
        .   * @brief Get the vocabulary for recognition.
        .        * @return vocabulary the associated vocabulary
        """
        ...
    def recognize(self, frame) -> retval:
        """
        .   * @brief Given the @p input frame, create input blob, run net and return recognition result
        .        * @param[in] frame The input image
        .        * @return The text recognition result



        recognize(frame, roiRects) -> results
        .   * @brief Given the @p input frame, create input blob, run net and return recognition result
        .        * @param[in] frame The input image
        .        * @param[in] roiRects List of text detection regions of interest (cv::Rect, CV_32SC4). ROIs is be cropped as the network inputs
        .        * @param[out] results A set of text recognition results.
        """
        ...
    def setDecodeType(self, decodeType) -> retval:
        """
        .   * @brief Set the decoding method of translating the network output into string
        .        * @param[in] decodeType The decoding method of translating the network output into string: {'CTC-greedy': greedy decoding for the output of CTC-based methods}
        """
        ...
    def setVocabulary(self, vocabulary) -> retval:
        """
        .   * @brief Set the vocabulary for recognition.
        .        * @param[in] vocabulary the associated vocabulary of the network.
        """
        ...
    ...

class error(builtins.Exception):
    """
    Common base class for all non-exit exceptions.
    """

    code: ... = None
    """
    """

    err: ... = None
    """
    """

    file: ... = None
    """
    """

    func: ... = None
    """
    """

    line: ... = None
    """
    """

    msg: ... = None
    """
    """

    ...

class flann_Index(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def build(self, features, params, distType=...) -> None:
        """
        .
        """
        ...
    def getAlgorithm(self) -> retval:
        """
        .
        """
        ...
    def getDistance(self) -> retval:
        """
        .
        """
        ...
    def knnSearch(
        self, query, knn, indices=..., dists=..., params=...
    ) -> Tuple[indices, dists]:
        """
        .
        """
        ...
    def load(self, features, filename) -> retval:
        """
        .
        """
        ...
    def radiusSearch(
        self, query, radius, maxResults, indices=..., dists=..., params=...
    ) -> Tuple[s, dists]:
        """
        .
        """
        ...
    def release(self) -> None:
        """
        .
        """
        ...
    def save(self, filename) -> None:
        """
        .
        """
        ...
    ...

class gapi_GKernelPackage(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class gapi_GNetPackage(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class gapi_ie_PyParams(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class gapi_wip_GOutputs(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getGArray(self, type) -> retval:
        """
        .
        """
        ...
    def getGMat(self) -> retval:
        """
        .
        """
        ...
    def getGOpaque(self, type) -> retval:
        """
        .
        """
        ...
    def getGScalar(self) -> retval:
        """
        .
        """
        ...
    ...

class gapi_wip_IStreamSource(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class ml_ANN_MLP(ml_StatModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   @brief Creates empty model
        .
        .       Use StatModel::train to train the model, Algorithm::load\<ANN_MLP\>(filename) to load the pre-trained model.
        .       Note that the train method has optional flags: ANN_MLP::TrainFlags.
        """
        ...
    @staticmethod
    def load(filepath) -> retval:
        """
        .   @brief Loads and creates a serialized ANN from a file
        .        *
        .        * Use ANN::save to serialize and store an ANN to disk.
        .        * Load the ANN from this file again, by calling this function with the path to the file.
        .        *
        .        * @param filepath path to serialized ANN
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getAnnealCoolingRatio(self) -> retval:
        """
        .   @see setAnnealCoolingRatio
        """
        ...
    def getAnnealFinalT(self) -> retval:
        """
        .   @see setAnnealFinalT
        """
        ...
    def getAnnealInitialT(self) -> retval:
        """
        .   @see setAnnealInitialT
        """
        ...
    def getAnnealItePerStep(self) -> retval:
        """
        .   @see setAnnealItePerStep
        """
        ...
    def getBackpropMomentumScale(self) -> retval:
        """
        .   @see setBackpropMomentumScale
        """
        ...
    def getBackpropWeightScale(self) -> retval:
        """
        .   @see setBackpropWeightScale
        """
        ...
    def getLayerSizes(self) -> retval:
        """
        .   Integer vector specifying the number of neurons in each layer including the input and output layers.
        .       The very first element specifies the number of elements in the input layer.
        .       The last element - number of elements in the output layer.
        .   @sa setLayerSizes
        """
        ...
    def getRpropDW0(self) -> retval:
        """
        .   @see setRpropDW0
        """
        ...
    def getRpropDWMax(self) -> retval:
        """
        .   @see setRpropDWMax
        """
        ...
    def getRpropDWMin(self) -> retval:
        """
        .   @see setRpropDWMin
        """
        ...
    def getRpropDWMinus(self) -> retval:
        """
        .   @see setRpropDWMinus
        """
        ...
    def getRpropDWPlus(self) -> retval:
        """
        .   @see setRpropDWPlus
        """
        ...
    def getTermCriteria(self) -> retval:
        """
        .   @see setTermCriteria
        """
        ...
    def getTrainMethod(self) -> retval:
        """
        .   Returns current training method
        """
        ...
    def getWeights(self, layerIdx) -> retval:
        """
        .
        """
        ...
    def setActivationFunction(self, type, param1=..., param2=...) -> None:
        """
        .   Initialize the activation function for each neuron.
        .       Currently the default and the only fully supported activation function is ANN_MLP::SIGMOID_SYM.
        .       @param type The type of activation function. See ANN_MLP::ActivationFunctions.
        .       @param param1 The first parameter of the activation function, \f$\alpha\f$. Default value is 0.
        .       @param param2 The second parameter of the activation function, \f$\beta\f$. Default value is 0.
        """
        ...
    def setAnnealCoolingRatio(self, val) -> None:
        """
        .   @copybrief getAnnealCoolingRatio @see getAnnealCoolingRatio
        """
        ...
    def setAnnealFinalT(self, val) -> None:
        """
        .   @copybrief getAnnealFinalT @see getAnnealFinalT
        """
        ...
    def setAnnealInitialT(self, val) -> None:
        """
        .   @copybrief getAnnealInitialT @see getAnnealInitialT
        """
        ...
    def setAnnealItePerStep(self, val) -> None:
        """
        .   @copybrief getAnnealItePerStep @see getAnnealItePerStep
        """
        ...
    def setBackpropMomentumScale(self, val) -> None:
        """
        .   @copybrief getBackpropMomentumScale @see getBackpropMomentumScale
        """
        ...
    def setBackpropWeightScale(self, val) -> None:
        """
        .   @copybrief getBackpropWeightScale @see getBackpropWeightScale
        """
        ...
    def setLayerSizes(self, _layer_sizes) -> None:
        """
        .   Integer vector specifying the number of neurons in each layer including the input and output layers.
        .       The very first element specifies the number of elements in the input layer.
        .       The last element - number of elements in the output layer. Default value is empty Mat.
        .   @sa getLayerSizes
        """
        ...
    def setRpropDW0(self, val) -> None:
        """
        .   @copybrief getRpropDW0 @see getRpropDW0
        """
        ...
    def setRpropDWMax(self, val) -> None:
        """
        .   @copybrief getRpropDWMax @see getRpropDWMax
        """
        ...
    def setRpropDWMin(self, val) -> None:
        """
        .   @copybrief getRpropDWMin @see getRpropDWMin
        """
        ...
    def setRpropDWMinus(self, val) -> None:
        """
        .   @copybrief getRpropDWMinus @see getRpropDWMinus
        """
        ...
    def setRpropDWPlus(self, val) -> None:
        """
        .   @copybrief getRpropDWPlus @see getRpropDWPlus
        """
        ...
    def setTermCriteria(self, val) -> None:
        """
        .   @copybrief getTermCriteria @see getTermCriteria
        """
        ...
    def setTrainMethod(self, method, param1=..., param2=...) -> None:
        """
        .   Sets training method and common parameters.
        .       @param method Default value is ANN_MLP::RPROP. See ANN_MLP::TrainingMethods.
        .       @param param1 passed to setRpropDW0 for ANN_MLP::RPROP and to setBackpropWeightScale for ANN_MLP::BACKPROP and to initialT for ANN_MLP::ANNEAL.
        .       @param param2 passed to setRpropDWMin for ANN_MLP::RPROP and to setBackpropMomentumScale for ANN_MLP::BACKPROP and to finalT for ANN_MLP::ANNEAL.
        """
        ...
    ...

class ml_Boost(ml_DTrees):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   Creates the empty model.
        .   Use StatModel::train to train the model, Algorithm::load\<Boost\>(filename) to load the pre-trained model.
        """
        ...
    @staticmethod
    def load(filepath, nodeName=...) -> retval:
        """
        .   @brief Loads and creates a serialized Boost from a file
        .        *
        .        * Use Boost::save to serialize and store an RTree to disk.
        .        * Load the Boost from this file again, by calling this function with the path to the file.
        .        * Optionally specify the node for the file containing the classifier
        .        *
        .        * @param filepath path to serialized Boost
        .        * @param nodeName name of node containing the classifier
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getBoostType(self) -> retval:
        """
        .   @see setBoostType
        """
        ...
    def getWeakCount(self) -> retval:
        """
        .   @see setWeakCount
        """
        ...
    def getWeightTrimRate(self) -> retval:
        """
        .   @see setWeightTrimRate
        """
        ...
    def setBoostType(self, val) -> None:
        """
        .   @copybrief getBoostType @see getBoostType
        """
        ...
    def setWeakCount(self, val) -> None:
        """
        .   @copybrief getWeakCount @see getWeakCount
        """
        ...
    def setWeightTrimRate(self, val) -> None:
        """
        .   @copybrief getWeightTrimRate @see getWeightTrimRate
        """
        ...
    ...

class ml_DTrees(ml_StatModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   @brief Creates the empty model
        .
        .       The static method creates empty decision tree with the specified parameters. It should be then
        .       trained using train method (see StatModel::train). Alternatively, you can load the model from
        .       file using Algorithm::load\<DTrees\>(filename).
        """
        ...
    @staticmethod
    def load(filepath, nodeName=...) -> retval:
        """
        .   @brief Loads and creates a serialized DTrees from a file
        .        *
        .        * Use DTree::save to serialize and store an DTree to disk.
        .        * Load the DTree from this file again, by calling this function with the path to the file.
        .        * Optionally specify the node for the file containing the classifier
        .        *
        .        * @param filepath path to serialized DTree
        .        * @param nodeName name of node containing the classifier
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getCVFolds(self) -> retval:
        """
        .   @see setCVFolds
        """
        ...
    def getMaxCategories(self) -> retval:
        """
        .   @see setMaxCategories
        """
        ...
    def getMaxDepth(self) -> retval:
        """
        .   @see setMaxDepth
        """
        ...
    def getMinSampleCount(self) -> retval:
        """
        .   @see setMinSampleCount
        """
        ...
    def getPriors(self) -> retval:
        """
        .   @see setPriors
        """
        ...
    def getRegressionAccuracy(self) -> retval:
        """
        .   @see setRegressionAccuracy
        """
        ...
    def getTruncatePrunedTree(self) -> retval:
        """
        .   @see setTruncatePrunedTree
        """
        ...
    def getUse1SERule(self) -> retval:
        """
        .   @see setUse1SERule
        """
        ...
    def getUseSurrogates(self) -> retval:
        """
        .   @see setUseSurrogates
        """
        ...
    def setCVFolds(self, val) -> None:
        """
        .   @copybrief getCVFolds @see getCVFolds
        """
        ...
    def setMaxCategories(self, val) -> None:
        """
        .   @copybrief getMaxCategories @see getMaxCategories
        """
        ...
    def setMaxDepth(self, val) -> None:
        """
        .   @copybrief getMaxDepth @see getMaxDepth
        """
        ...
    def setMinSampleCount(self, val) -> None:
        """
        .   @copybrief getMinSampleCount @see getMinSampleCount
        """
        ...
    def setPriors(self, val) -> None:
        """
        .   @copybrief getPriors @see getPriors
        """
        ...
    def setRegressionAccuracy(self, val) -> None:
        """
        .   @copybrief getRegressionAccuracy @see getRegressionAccuracy
        """
        ...
    def setTruncatePrunedTree(self, val) -> None:
        """
        .   @copybrief getTruncatePrunedTree @see getTruncatePrunedTree
        """
        ...
    def setUse1SERule(self, val) -> None:
        """
        .   @copybrief getUse1SERule @see getUse1SERule
        """
        ...
    def setUseSurrogates(self, val) -> None:
        """
        .   @copybrief getUseSurrogates @see getUseSurrogates
        """
        ...
    ...

class ml_EM(ml_StatModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   Creates empty %EM model.
        .       The model should be trained then using StatModel::train(traindata, flags) method. Alternatively, you
        .       can use one of the EM::train\* methods or load it from file using Algorithm::load\<EM\>(filename).
        """
        ...
    @staticmethod
    def load(filepath, nodeName=...) -> retval:
        """
        .   @brief Loads and creates a serialized EM from a file
        .        *
        .        * Use EM::save to serialize and store an EM to disk.
        .        * Load the EM from this file again, by calling this function with the path to the file.
        .        * Optionally specify the node for the file containing the classifier
        .        *
        .        * @param filepath path to serialized EM
        .        * @param nodeName name of node containing the classifier
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getClustersNumber(self) -> retval:
        """
        .   @see setClustersNumber
        """
        ...
    def getCovarianceMatrixType(self) -> retval:
        """
        .   @see setCovarianceMatrixType
        """
        ...
    def getCovs(self, covs=...) -> covs:
        """
        .   @brief Returns covariation matrices
        .
        .       Returns vector of covariation matrices. Number of matrices is the number of gaussian mixtures,
        .       each matrix is a square floating-point matrix NxN, where N is the space dimensionality.
        """
        ...
    def getMeans(self) -> retval:
        """
        .   @brief Returns the cluster centers (means of the Gaussian mixture)
        .
        .       Returns matrix with the number of rows equal to the number of mixtures and number of columns
        .       equal to the space dimensionality.
        """
        ...
    def getTermCriteria(self) -> retval:
        """
        .   @see setTermCriteria
        """
        ...
    def getWeights(self) -> retval:
        """
        .   @brief Returns weights of the mixtures
        .
        .       Returns vector with the number of elements equal to the number of mixtures.
        """
        ...
    def predict(self, samples, results=..., flags=...) -> Tuple[retval, results]:
        """
        .   @brief Returns posterior probabilities for the provided samples
        .
        .       @param samples The input samples, floating-point matrix
        .       @param results The optional output \f$ nSamples \times nClusters\f$ matrix of results. It contains
        .       posterior probabilities for each sample from the input
        .       @param flags This parameter will be ignored
        """
        ...
    def predict2(self, sample, probs=...) -> Tuple[retval, probs]:
        """
        .   @brief Returns a likelihood logarithm value and an index of the most probable mixture component
        .       for the given sample.
        .
        .       @param sample A sample for classification. It should be a one-channel matrix of
        .           \f$1 \times dims\f$ or \f$dims \times 1\f$ size.
        .       @param probs Optional output matrix that contains posterior probabilities of each component
        .           given the sample. It has \f$1 \times nclusters\f$ size and CV_64FC1 type.
        .
        .       The method returns a two-element double vector. Zero element is a likelihood logarithm value for
        .       the sample. First element is an index of the most probable mixture component for the given
        .       sample.
        """
        ...
    def setClustersNumber(self, val) -> None:
        """
        .   @copybrief getClustersNumber @see getClustersNumber
        """
        ...
    def setCovarianceMatrixType(self, val) -> None:
        """
        .   @copybrief getCovarianceMatrixType @see getCovarianceMatrixType
        """
        ...
    def setTermCriteria(self, val) -> None:
        """
        .   @copybrief getTermCriteria @see getTermCriteria
        """
        ...
    def trainE(
        self,
        samples,
        means0,
        covs0=...,
        weights0=...,
        logLikelihoods=...,
        labels=...,
        probs=...,
    ) -> Tuple[labels, probs]:
        """
        .   @brief Estimate the Gaussian mixture parameters from a samples set.
        .
        .       This variation starts with Expectation step. You need to provide initial means \f$a_k\f$ of
        .       mixture components. Optionally you can pass initial weights \f$\pi_k\f$ and covariance matrices
        .       \f$S_k\f$ of mixture components.
        .
        .       @param samples Samples from which the Gaussian mixture model will be estimated. It should be a
        .           one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type
        .           it will be converted to the inner matrix of such type for the further computing.
        .       @param means0 Initial means \f$a_k\f$ of mixture components. It is a one-channel matrix of
        .           \f$nclusters \times dims\f$ size. If the matrix does not have CV_64F type it will be
        .           converted to the inner matrix of such type for the further computing.
        .       @param covs0 The vector of initial covariance matrices \f$S_k\f$ of mixture components. Each of
        .           covariance matrices is a one-channel matrix of \f$dims \times dims\f$ size. If the matrices
        .           do not have CV_64F type they will be converted to the inner matrices of such type for the
        .           further computing.
        .       @param weights0 Initial weights \f$\pi_k\f$ of mixture components. It should be a one-channel
        .           floating-point matrix with \f$1 \times nclusters\f$ or \f$nclusters \times 1\f$ size.
        .       @param logLikelihoods The optional output matrix that contains a likelihood logarithm value for
        .           each sample. It has \f$nsamples \times 1\f$ size and CV_64FC1 type.
        .       @param labels The optional output "class label" for each sample:
        .           \f$\texttt{labels}_i=\texttt{arg max}_k(p_{i,k}), i=1..N\f$ (indices of the most probable
        .           mixture component for each sample). It has \f$nsamples \times 1\f$ size and CV_32SC1 type.
        .       @param probs The optional output matrix that contains posterior probabilities of each Gaussian
        .           mixture component given the each sample. It has \f$nsamples \times nclusters\f$ size and
        .           CV_64FC1 type.
        """
        ...
    def trainEM(
        self, samples, logLikelihoods=..., labels=..., probs=...
    ) -> Tuple[labels, probs]:
        """
        .   @brief Estimate the Gaussian mixture parameters from a samples set.
        .
        .       This variation starts with Expectation step. Initial values of the model parameters will be
        .       estimated by the k-means algorithm.
        .
        .       Unlike many of the ML models, %EM is an unsupervised learning algorithm and it does not take
        .       responses (class labels or function values) as input. Instead, it computes the *Maximum
        .       Likelihood Estimate* of the Gaussian mixture parameters from an input sample set, stores all the
        .       parameters inside the structure: \f$p_{i,k}\f$ in probs, \f$a_k\f$ in means , \f$S_k\f$ in
        .       covs[k], \f$\pi_k\f$ in weights , and optionally computes the output "class label" for each
        .       sample: \f$\texttt{labels}_i=\texttt{arg max}_k(p_{i,k}), i=1..N\f$ (indices of the most
        .       probable mixture component for each sample).
        .
        .       The trained model can be used further for prediction, just like any other classifier. The
        .       trained model is similar to the NormalBayesClassifier.
        .
        .       @param samples Samples from which the Gaussian mixture model will be estimated. It should be a
        .           one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type
        .           it will be converted to the inner matrix of such type for the further computing.
        .       @param logLikelihoods The optional output matrix that contains a likelihood logarithm value for
        .           each sample. It has \f$nsamples \times 1\f$ size and CV_64FC1 type.
        .       @param labels The optional output "class label" for each sample:
        .           \f$\texttt{labels}_i=\texttt{arg max}_k(p_{i,k}), i=1..N\f$ (indices of the most probable
        .           mixture component for each sample). It has \f$nsamples \times 1\f$ size and CV_32SC1 type.
        .       @param probs The optional output matrix that contains posterior probabilities of each Gaussian
        .           mixture component given the each sample. It has \f$nsamples \times nclusters\f$ size and
        .           CV_64FC1 type.
        """
        ...
    def trainM(
        self, samples, probs0, logLikelihoods=..., labels=..., probs=...
    ) -> Tuple[labels, probs]:
        """
        .   @brief Estimate the Gaussian mixture parameters from a samples set.
        .
        .       This variation starts with Maximization step. You need to provide initial probabilities
        .       \f$p_{i,k}\f$ to use this option.
        .
        .       @param samples Samples from which the Gaussian mixture model will be estimated. It should be a
        .           one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type
        .           it will be converted to the inner matrix of such type for the further computing.
        .       @param probs0 the probabilities
        .       @param logLikelihoods The optional output matrix that contains a likelihood logarithm value for
        .           each sample. It has \f$nsamples \times 1\f$ size and CV_64FC1 type.
        .       @param labels The optional output "class label" for each sample:
        .           \f$\texttt{labels}_i=\texttt{arg max}_k(p_{i,k}), i=1..N\f$ (indices of the most probable
        .           mixture component for each sample). It has \f$nsamples \times 1\f$ size and CV_32SC1 type.
        .       @param probs The optional output matrix that contains posterior probabilities of each Gaussian
        .           mixture component given the each sample. It has \f$nsamples \times nclusters\f$ size and
        .           CV_64FC1 type.
        """
        ...
    ...

class ml_KNearest(ml_StatModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   @brief Creates the empty model
        .
        .       The static method creates empty %KNearest classifier. It should be then trained using StatModel::train method.
        """
        ...
    @staticmethod
    def load(filepath) -> retval:
        """
        .   @brief Loads and creates a serialized knearest from a file
        .        *
        .        * Use KNearest::save to serialize and store an KNearest to disk.
        .        * Load the KNearest from this file again, by calling this function with the path to the file.
        .        *
        .        * @param filepath path to serialized KNearest
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def findNearest(
        self, samples, k, results=..., neighborResponses=..., dist=...
    ) -> Tuple[neighborResponses, dist]:
        """
        .   @brief Finds the neighbors and predicts responses for input vectors.
        .
        .       @param samples Input samples stored by rows. It is a single-precision floating-point matrix of
        .           `<number_of_samples> * k` size.
        .       @param k Number of used nearest neighbors. Should be greater than 1.
        .       @param results Vector with results of prediction (regression or classification) for each input
        .           sample. It is a single-precision floating-point vector with `<number_of_samples>` elements.
        .       @param neighborResponses Optional output values for corresponding neighbors. It is a single-
        .           precision floating-point matrix of `<number_of_samples> * k` size.
        .       @param dist Optional output distances from the input vectors to the corresponding neighbors. It
        .           is a single-precision floating-point matrix of `<number_of_samples> * k` size.
        .
        .       For each input vector (a row of the matrix samples), the method finds the k nearest neighbors.
        .       In case of regression, the predicted result is a mean value of the particular vector's neighbor
        .       responses. In case of classification, the class is determined by voting.
        .
        .       For each input vector, the neighbors are sorted by their distances to the vector.
        .
        .       In case of C++ interface you can use output pointers to empty matrices and the function will
        .       allocate memory itself.
        .
        .       If only a single input vector is passed, all output matrices are optional and the predicted
        .       value is returned by the method.
        .
        .       The function is parallelized with the TBB library.
        """
        ...
    def getAlgorithmType(self) -> retval:
        """
        .   @see setAlgorithmType
        """
        ...
    def getDefaultK(self) -> retval:
        """
        .   @see setDefaultK
        """
        ...
    def getEmax(self) -> retval:
        """
        .   @see setEmax
        """
        ...
    def getIsClassifier(self) -> retval:
        """
        .   @see setIsClassifier
        """
        ...
    def setAlgorithmType(self, val) -> None:
        """
        .   @copybrief getAlgorithmType @see getAlgorithmType
        """
        ...
    def setDefaultK(self, val) -> None:
        """
        .   @copybrief getDefaultK @see getDefaultK
        """
        ...
    def setEmax(self, val) -> None:
        """
        .   @copybrief getEmax @see getEmax
        """
        ...
    def setIsClassifier(self, val) -> None:
        """
        .   @copybrief getIsClassifier @see getIsClassifier
        """
        ...
    ...

class ml_LogisticRegression(ml_StatModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   @brief Creates empty model.
        .
        .       Creates Logistic Regression model with parameters given.
        """
        ...
    @staticmethod
    def load(filepath, nodeName=...) -> retval:
        """
        .   @brief Loads and creates a serialized LogisticRegression from a file
        .        *
        .        * Use LogisticRegression::save to serialize and store an LogisticRegression to disk.
        .        * Load the LogisticRegression from this file again, by calling this function with the path to the file.
        .        * Optionally specify the node for the file containing the classifier
        .        *
        .        * @param filepath path to serialized LogisticRegression
        .        * @param nodeName name of node containing the classifier
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getIterations(self) -> retval:
        """
        .   @see setIterations
        """
        ...
    def getLearningRate(self) -> retval:
        """
        .   @see setLearningRate
        """
        ...
    def getMiniBatchSize(self) -> retval:
        """
        .   @see setMiniBatchSize
        """
        ...
    def getRegularization(self) -> retval:
        """
        .   @see setRegularization
        """
        ...
    def getTermCriteria(self) -> retval:
        """
        .   @see setTermCriteria
        """
        ...
    def getTrainMethod(self) -> retval:
        """
        .   @see setTrainMethod
        """
        ...
    def get_learnt_thetas(self) -> retval:
        """
        .   @brief This function returns the trained parameters arranged across rows.
        .
        .       For a two class classification problem, it returns a row matrix. It returns learnt parameters of
        .       the Logistic Regression as a matrix of type CV_32F.
        """
        ...
    def predict(self, samples, results=..., flags=...) -> Tuple[retval, results]:
        """
        .   @brief Predicts responses for input samples and returns a float type.
        .
        .       @param samples The input data for the prediction algorithm. Matrix [m x n], where each row
        .           contains variables (features) of one object being classified. Should have data type CV_32F.
        .       @param results Predicted labels as a column matrix of type CV_32S.
        .       @param flags Not used.
        """
        ...
    def setIterations(self, val) -> None:
        """
        .   @copybrief getIterations @see getIterations
        """
        ...
    def setLearningRate(self, val) -> None:
        """
        .   @copybrief getLearningRate @see getLearningRate
        """
        ...
    def setMiniBatchSize(self, val) -> None:
        """
        .   @copybrief getMiniBatchSize @see getMiniBatchSize
        """
        ...
    def setRegularization(self, val) -> None:
        """
        .   @copybrief getRegularization @see getRegularization
        """
        ...
    def setTermCriteria(self, val) -> None:
        """
        .   @copybrief getTermCriteria @see getTermCriteria
        """
        ...
    def setTrainMethod(self, val) -> None:
        """
        .   @copybrief getTrainMethod @see getTrainMethod
        """
        ...
    ...

class ml_NormalBayesClassifier(ml_StatModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   Creates empty model
        .   Use StatModel::train to train the model after creation.
        """
        ...
    @staticmethod
    def load(filepath, nodeName=...) -> retval:
        """
        .   @brief Loads and creates a serialized NormalBayesClassifier from a file
        .        *
        .        * Use NormalBayesClassifier::save to serialize and store an NormalBayesClassifier to disk.
        .        * Load the NormalBayesClassifier from this file again, by calling this function with the path to the file.
        .        * Optionally specify the node for the file containing the classifier
        .        *
        .        * @param filepath path to serialized NormalBayesClassifier
        .        * @param nodeName name of node containing the classifier
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def predictProb(
        self, inputs, outputs=..., outputProbs=..., flags=...
    ) -> Tuple[s, outputProbs]:
        """
        .   @brief Predicts the response for sample(s).
        .
        .       The method estimates the most probable classes for input vectors. Input vectors (one or more)
        .       are stored as rows of the matrix inputs. In case of multiple input vectors, there should be one
        .       output vector outputs. The predicted class for a single input vector is returned by the method.
        .       The vector outputProbs contains the output probabilities corresponding to each element of
        .       result.
        """
        ...
    ...

class ml_ParamGrid(builtins.object):
    logStep: ...
    """
    logStep
    """

    maxVal: ...
    """
    maxVal
    """

    minVal: ...
    """
    minVal
    """
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(minVal=..., maxVal=..., logstep=...) -> retval:
        """
        .   @brief Creates a ParamGrid Ptr that can be given to the %SVM::trainAuto method
        .
        .       @param minVal minimum value of the parameter grid
        .       @param maxVal maximum value of the parameter grid
        .       @param logstep Logarithmic step for iterating the statmodel parameter
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class ml_RTrees(ml_DTrees):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   Creates the empty model.
        .       Use StatModel::train to train the model, StatModel::train to create and train the model,
        .       Algorithm::load to load the pre-trained model.
        """
        ...
    @staticmethod
    def load(filepath, nodeName=...) -> retval:
        """
        .   @brief Loads and creates a serialized RTree from a file
        .        *
        .        * Use RTree::save to serialize and store an RTree to disk.
        .        * Load the RTree from this file again, by calling this function with the path to the file.
        .        * Optionally specify the node for the file containing the classifier
        .        *
        .        * @param filepath path to serialized RTree
        .        * @param nodeName name of node containing the classifier
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getActiveVarCount(self) -> retval:
        """
        .   @see setActiveVarCount
        """
        ...
    def getCalculateVarImportance(self) -> retval:
        """
        .   @see setCalculateVarImportance
        """
        ...
    def getOOBError(self) -> retval:
        """
        .   Returns the OOB error value, computed at the training stage when calcOOBError is set to true.
        .        * If this flag was set to false, 0 is returned. The OOB error is also scaled by sample weighting.
        """
        ...
    def getTermCriteria(self) -> retval:
        """
        .   @see setTermCriteria
        """
        ...
    def getVarImportance(self) -> retval:
        """
        .   Returns the variable importance array.
        .       The method returns the variable importance vector, computed at the training stage when
        .       CalculateVarImportance is set to true. If this flag was set to false, the empty matrix is
        .       returned.
        """
        ...
    def getVotes(self, samples, flags, results=...) -> results:
        """
        .   Returns the result of each individual tree in the forest.
        .       In case the model is a regression problem, the method will return each of the trees'
        .       results for each of the sample cases. If the model is a classifier, it will return
        .       a Mat with samples + 1 rows, where the first row gives the class number and the
        .       following rows return the votes each class had for each sample.
        .           @param samples Array containing the samples for which votes will be calculated.
        .           @param results Array where the result of the calculation will be written.
        .           @param flags Flags for defining the type of RTrees.
        """
        ...
    def setActiveVarCount(self, val) -> None:
        """
        .   @copybrief getActiveVarCount @see getActiveVarCount
        """
        ...
    def setCalculateVarImportance(self, val) -> None:
        """
        .   @copybrief getCalculateVarImportance @see getCalculateVarImportance
        """
        ...
    def setTermCriteria(self, val) -> None:
        """
        .   @copybrief getTermCriteria @see getTermCriteria
        """
        ...
    ...

class ml_SVM(ml_StatModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   Creates empty model.
        .       Use StatModel::train to train the model. Since %SVM has several parameters, you may want to
        .   find the best parameters for your problem, it can be done with SVM::trainAuto.
        """
        ...
    @staticmethod
    def getDefaultGridPtr(param_id) -> retval:
        """
        .   @brief Generates a grid for %SVM parameters.
        .
        .       @param param_id %SVM parameters IDs that must be one of the SVM::ParamTypes. The grid is
        .       generated for the parameter with this ID.
        .
        .       The function generates a grid pointer for the specified parameter of the %SVM algorithm.
        .       The grid may be passed to the function SVM::trainAuto.
        """
        ...
    @staticmethod
    def load(filepath) -> retval:
        """
        .   @brief Loads and creates a serialized svm from a file
        .        *
        .        * Use SVM::save to serialize and store an SVM to disk.
        .        * Load the SVM from this file again, by calling this function with the path to the file.
        .        *
        .        * @param filepath path to serialized svm
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getC(self) -> retval:
        """
        .   @see setC
        """
        ...
    def getClassWeights(self) -> retval:
        """
        .   @see setClassWeights
        """
        ...
    def getCoef0(self) -> retval:
        """
        .   @see setCoef0
        """
        ...
    def getDecisionFunction(self, i, alpha=..., svidx=...) -> Tuple[a, svidx]:
        """
        .   @brief Retrieves the decision function
        .
        .       @param i the index of the decision function. If the problem solved is regression, 1-class or
        .           2-class classification, then there will be just one decision function and the index should
        .           always be 0. Otherwise, in the case of N-class classification, there will be \f$N(N-1)/2\f$
        .           decision functions.
        .       @param alpha the optional output vector for weights, corresponding to different support vectors.
        .           In the case of linear %SVM all the alpha's will be 1's.
        .       @param svidx the optional output vector of indices of support vectors within the matrix of
        .           support vectors (which can be retrieved by SVM::getSupportVectors). In the case of linear
        .           %SVM each decision function consists of a single "compressed" support vector.
        .
        .       The method returns rho parameter of the decision function, a scalar subtracted from the weighted
        .       sum of kernel responses.
        """
        ...
    def getDegree(self) -> retval:
        """
        .   @see setDegree
        """
        ...
    def getGamma(self) -> retval:
        """
        .   @see setGamma
        """
        ...
    def getKernelType(self) -> retval:
        """
        .   Type of a %SVM kernel.
        .   See SVM::KernelTypes. Default value is SVM::RBF.
        """
        ...
    def getNu(self) -> retval:
        """
        .   @see setNu
        """
        ...
    def getP(self) -> retval:
        """
        .   @see setP
        """
        ...
    def getSupportVectors(self) -> retval:
        """
        .   @brief Retrieves all the support vectors
        .
        .       The method returns all the support vectors as a floating-point matrix, where support vectors are
        .       stored as matrix rows.
        """
        ...
    def getTermCriteria(self) -> retval:
        """
        .   @see setTermCriteria
        """
        ...
    def getType(self) -> retval:
        """
        .   @see setType
        """
        ...
    def getUncompressedSupportVectors(self) -> retval:
        """
        .   @brief Retrieves all the uncompressed support vectors of a linear %SVM
        .
        .       The method returns all the uncompressed support vectors of a linear %SVM that the compressed
        .       support vector, used for prediction, was derived from. They are returned in a floating-point
        .       matrix, where the support vectors are stored as matrix rows.
        """
        ...
    def setC(self, val) -> None:
        """
        .   @copybrief getC @see getC
        """
        ...
    def setClassWeights(self, val) -> None:
        """
        .   @copybrief getClassWeights @see getClassWeights
        """
        ...
    def setCoef0(self, val) -> None:
        """
        .   @copybrief getCoef0 @see getCoef0
        """
        ...
    def setDegree(self, val) -> None:
        """
        .   @copybrief getDegree @see getDegree
        """
        ...
    def setGamma(self, val) -> None:
        """
        .   @copybrief getGamma @see getGamma
        """
        ...
    def setKernel(self, kernelType) -> None:
        """
        .   Initialize with one of predefined kernels.
        .   See SVM::KernelTypes.
        """
        ...
    def setNu(self, val) -> None:
        """
        .   @copybrief getNu @see getNu
        """
        ...
    def setP(self, val) -> None:
        """
        .   @copybrief getP @see getP
        """
        ...
    def setTermCriteria(self, val) -> None:
        """
        .   @copybrief getTermCriteria @see getTermCriteria
        """
        ...
    def setType(self, val) -> None:
        """
        .   @copybrief getType @see getType
        """
        ...
    def trainAuto(
        self,
        samples,
        layout,
        responses,
        kFold=...,
        Cgrid=...,
        gammaGrid=...,
        pGrid=...,
        nuGrid=...,
        coeffGrid=...,
        degreeGrid=...,
        balanced=...,
    ) -> retval:
        """
        .   @brief Trains an %SVM with optimal parameters
        .
        .       @param samples training samples
        .       @param layout See ml::SampleTypes.
        .       @param responses vector of responses associated with the training samples.
        .       @param kFold Cross-validation parameter. The training set is divided into kFold subsets. One
        .           subset is used to test the model, the others form the train set. So, the %SVM algorithm is
        .       @param Cgrid grid for C
        .       @param gammaGrid grid for gamma
        .       @param pGrid grid for p
        .       @param nuGrid grid for nu
        .       @param coeffGrid grid for coeff
        .       @param degreeGrid grid for degree
        .       @param balanced If true and the problem is 2-class classification then the method creates more
        .           balanced cross-validation subsets that is proportions between classes in subsets are close
        .           to such proportion in the whole train dataset.
        .
        .       The method trains the %SVM model automatically by choosing the optimal parameters C, gamma, p,
        .       nu, coef0, degree. Parameters are considered optimal when the cross-validation
        .       estimate of the test set error is minimal.
        .
        .       This function only makes use of SVM::getDefaultGrid for parameter optimization and thus only
        .       offers rudimentary parameter options.
        .
        .       This function works for the classification (SVM::C_SVC or SVM::NU_SVC) as well as for the
        .       regression (SVM::EPS_SVR or SVM::NU_SVR). If it is SVM::ONE_CLASS, no optimization is made and
        .       the usual %SVM with parameters specified in params is executed.
        """
        ...
    ...

class ml_SVMSGD(ml_StatModel):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create() -> retval:
        """
        .   @brief Creates empty model.
        .        * Use StatModel::train to train the model. Since %SVMSGD has several parameters, you may want to
        .        * find the best parameters for your problem or use setOptimalParameters() to set some default parameters.
        """
        ...
    @staticmethod
    def load(filepath, nodeName=...) -> retval:
        """
        .   @brief Loads and creates a serialized SVMSGD from a file
        .        *
        .        * Use SVMSGD::save to serialize and store an SVMSGD to disk.
        .        * Load the SVMSGD from this file again, by calling this function with the path to the file.
        .        * Optionally specify the node for the file containing the classifier
        .        *
        .        * @param filepath path to serialized SVMSGD
        .        * @param nodeName name of node containing the classifier
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getInitialStepSize(self) -> retval:
        """
        .   @see setInitialStepSize
        """
        ...
    def getMarginRegularization(self) -> retval:
        """
        .   @see setMarginRegularization
        """
        ...
    def getMarginType(self) -> retval:
        """
        .   @see setMarginType
        """
        ...
    def getShift(self) -> retval:
        """
        .   * @return the shift of the trained model (decision function f(x) = weights * x + shift).
        """
        ...
    def getStepDecreasingPower(self) -> retval:
        """
        .   @see setStepDecreasingPower
        """
        ...
    def getSvmsgdType(self) -> retval:
        """
        .   @see setSvmsgdType
        """
        ...
    def getTermCriteria(self) -> retval:
        """
        .   @see setTermCriteria
        """
        ...
    def getWeights(self) -> retval:
        """
        .   * @return the weights of the trained model (decision function f(x) = weights * x + shift).
        """
        ...
    def setInitialStepSize(self, InitialStepSize) -> None:
        """
        .   @copybrief getInitialStepSize @see getInitialStepSize
        """
        ...
    def setMarginRegularization(self, marginRegularization) -> None:
        """
        .   @copybrief getMarginRegularization @see getMarginRegularization
        """
        ...
    def setMarginType(self, marginType) -> None:
        """
        .   @copybrief getMarginType @see getMarginType
        """
        ...
    def setOptimalParameters(self, svmsgdType=..., marginType=...) -> None:
        """
        .   @brief Function sets optimal parameters values for chosen SVM SGD model.
        .        * @param svmsgdType is the type of SVMSGD classifier.
        .        * @param marginType is the type of margin constraint.
        """
        ...
    def setStepDecreasingPower(self, stepDecreasingPower) -> None:
        """
        .   @copybrief getStepDecreasingPower @see getStepDecreasingPower
        """
        ...
    def setSvmsgdType(self, svmsgdType) -> None:
        """
        .   @copybrief getSvmsgdType @see getSvmsgdType
        """
        ...
    def setTermCriteria(self, val) -> None:
        """
        .   @copybrief getTermCriteria @see getTermCriteria
        """
        ...
    ...

class ml_StatModel(Algorithm):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def calcError(self, data, test, resp=...) -> Tuple[retval, resp]:
        """
        .   @brief Computes error on the training or test dataset
        .
        .       @param data the training data
        .       @param test if true, the error is computed over the test subset of the data, otherwise it's
        .           computed over the training subset of the data. Please note that if you loaded a completely
        .           different dataset to evaluate already trained classifier, you will probably want not to set
        .           the test subset at all with TrainData::setTrainTestSplitRatio and specify test=false, so
        .           that the error is computed for the whole new set. Yes, this sounds a bit confusing.
        .       @param resp the optional output responses.
        .
        .       The method uses StatModel::predict to compute the error. For regression models the error is
        .       computed as RMS, for classifiers - as a percent of missclassified samples (0%-100%).
        """
        ...
    def empty(self) -> retval:
        """
        .
        """
        ...
    def getVarCount(self) -> retval:
        """
        .   @brief Returns the number of variables in training samples
        """
        ...
    def isClassifier(self) -> retval:
        """
        .   @brief Returns true if the model is classifier
        """
        ...
    def isTrained(self) -> retval:
        """
        .   @brief Returns true if the model is trained
        """
        ...
    def predict(self, samples, results=..., flags=...) -> Tuple[retval, results]:
        """
        .   @brief Predicts response(s) for the provided sample(s)
        .
        .       @param samples The input samples, floating-point matrix
        .       @param results The optional output matrix of results.
        .       @param flags The optional flags, model-dependent. See cv::ml::StatModel::Flags.
        """
        ...
    def train(self, trainData, flags=...) -> retval:
        """
        .   @brief Trains the statistical model
        .
        .       @param trainData training data that can be loaded from file using TrainData::loadFromCSV or
        .           created with TrainData::create.
        .       @param flags optional flags, depending on the model. Some of the models can be updated with the
        .           new training samples, not completely overwritten (such as NormalBayesClassifier or ANN_MLP).



        train(samples, layout, responses) -> retval
        .   @brief Trains the statistical model
        .
        .       @param samples training samples
        .       @param layout See ml::SampleTypes.
        .       @param responses vector of responses associated with the training samples.
        """
        ...
    ...

class ml_TrainData(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def create(
        samples,
        layout,
        responses,
        varIdx=...,
        sampleIdx=...,
        sampleWeights=...,
        varType=...,
    ) -> retval:
        """
        .   @brief Creates training data from in-memory arrays.
        .
        .       @param samples matrix of samples. It should have CV_32F type.
        .       @param layout see ml::SampleTypes.
        .       @param responses matrix of responses. If the responses are scalar, they should be stored as a
        .           single row or as a single column. The matrix should have type CV_32F or CV_32S (in the
        .           former case the responses are considered as ordered by default; in the latter case - as
        .           categorical)
        .       @param varIdx vector specifying which variables to use for training. It can be an integer vector
        .           (CV_32S) containing 0-based variable indices or byte vector (CV_8U) containing a mask of
        .           active variables.
        .       @param sampleIdx vector specifying which samples to use for training. It can be an integer
        .           vector (CV_32S) containing 0-based sample indices or byte vector (CV_8U) containing a mask
        .           of training samples.
        .       @param sampleWeights optional vector with weights for each sample. It should have CV_32F type.
        .       @param varType optional vector of type CV_8U and size `<number_of_variables_in_samples> +
        .           <number_of_variables_in_responses>`, containing types of each input and output variable. See
        .           ml::VariableTypes.
        """
        ...
    @staticmethod
    def getSubMatrix(matrix, idx, layout) -> retval:
        """
        .   @brief Extract from matrix rows/cols specified by passed indexes.
        .       @param matrix input matrix (supported types: CV_32S, CV_32F, CV_64F)
        .       @param idx 1D index vector
        .       @param layout specifies to extract rows (cv::ml::ROW_SAMPLES) or to extract columns (cv::ml::COL_SAMPLES)
        """
        ...
    @staticmethod
    def getSubVector(vec, idx) -> retval:
        """
        .   @brief Extract from 1D vector elements specified by passed indexes.
        .       @param vec input vector (supported types: CV_32S, CV_32F, CV_64F)
        .       @param idx 1D index vector
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def getCatCount(self, vi) -> retval:
        """
        .
        """
        ...
    def getCatMap(self) -> retval:
        """
        .
        """
        ...
    def getCatOfs(self) -> retval:
        """
        .
        """
        ...
    def getClassLabels(self) -> retval:
        """
        .   @brief Returns the vector of class labels
        .
        .       The function returns vector of unique labels occurred in the responses.
        """
        ...
    def getDefaultSubstValues(self) -> retval:
        """
        .
        """
        ...
    def getLayout(self) -> retval:
        """
        .
        """
        ...
    def getMissing(self) -> retval:
        """
        .
        """
        ...
    def getNAllVars(self) -> retval:
        """
        .
        """
        ...
    def getNSamples(self) -> retval:
        """
        .
        """
        ...
    def getNTestSamples(self) -> retval:
        """
        .
        """
        ...
    def getNTrainSamples(self) -> retval:
        """
        .
        """
        ...
    def getNVars(self) -> retval:
        """
        .
        """
        ...
    def getNames(self, names) -> None:
        """
        .   @brief Returns vector of symbolic names captured in loadFromCSV()
        """
        ...
    def getNormCatResponses(self) -> retval:
        """
        .
        """
        ...
    def getResponseType(self) -> retval:
        """
        .
        """
        ...
    def getResponses(self) -> retval:
        """
        .
        """
        ...
    def getSample(self, varIdx, sidx, buf) -> None:
        """
        .
        """
        ...
    def getSampleWeights(self) -> retval:
        """
        .
        """
        ...
    def getSamples(self) -> retval:
        """
        .
        """
        ...
    def getTestNormCatResponses(self) -> retval:
        """
        .
        """
        ...
    def getTestResponses(self) -> retval:
        """
        .
        """
        ...
    def getTestSampleIdx(self) -> retval:
        """
        .
        """
        ...
    def getTestSampleWeights(self) -> retval:
        """
        .
        """
        ...
    def getTestSamples(self) -> retval:
        """
        .   @brief Returns matrix of test samples
        """
        ...
    def getTrainNormCatResponses(self) -> retval:
        """
        .   @brief Returns the vector of normalized categorical responses
        .
        .       The function returns vector of responses. Each response is integer from `0` to `<number of
        .       classes>-1`. The actual label value can be retrieved then from the class label vector, see
        .       TrainData::getClassLabels.
        """
        ...
    def getTrainResponses(self) -> retval:
        """
        .   @brief Returns the vector of responses
        .
        .       The function returns ordered or the original categorical responses. Usually it's used in
        .       regression algorithms.
        """
        ...
    def getTrainSampleIdx(self) -> retval:
        """
        .
        """
        ...
    def getTrainSampleWeights(self) -> retval:
        """
        .
        """
        ...
    def getTrainSamples(
        self, layout=..., compressSamples=..., compressVars=...
    ) -> retval:
        """
        .   @brief Returns matrix of train samples
        .
        .       @param layout The requested layout. If it's different from the initial one, the matrix is
        .           transposed. See ml::SampleTypes.
        .       @param compressSamples if true, the function returns only the training samples (specified by
        .           sampleIdx)
        .       @param compressVars if true, the function returns the shorter training samples, containing only
        .           the active variables.
        .
        .       In current implementation the function tries to avoid physical data copying and returns the
        .       matrix stored inside TrainData (unless the transposition or compression is needed).
        """
        ...
    def getValues(self, vi, sidx, values) -> None:
        """
        .
        """
        ...
    def getVarIdx(self) -> retval:
        """
        .
        """
        ...
    def getVarSymbolFlags(self) -> retval:
        """
        .
        """
        ...
    def getVarType(self) -> retval:
        """
        .
        """
        ...
    def setTrainTestSplit(self, count, shuffle=...) -> None:
        """
        .   @brief Splits the training data into the training and test parts
        .       @sa TrainData::setTrainTestSplitRatio
        """
        ...
    def setTrainTestSplitRatio(self, ratio, shuffle=...) -> None:
        """
        .   @brief Splits the training data into the training and test parts
        .
        .       The function selects a subset of specified relative size and then returns it as the training
        .       set. If the function is not called, all the data is used for training. Please, note that for
        .       each of TrainData::getTrain\* there is corresponding TrainData::getTest\*, so that the test
        .       subset can be retrieved and processed as well.
        .       @sa TrainData::setTrainTestSplit
        """
        ...
    def shuffleTrainTest(self) -> None:
        """
        .
        """
        ...
    ...

class ocl_Device(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    @staticmethod
    def getDefault() -> retval:
        """
        .
        """
        ...
    def OpenCLVersion(self) -> retval:
        """
        .
        """
        ...
    def OpenCL_C_Version(self) -> retval:
        """
        .
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def addressBits(self) -> retval:
        """
        .
        """
        ...
    def available(self) -> retval:
        """
        .
        """
        ...
    def compilerAvailable(self) -> retval:
        """
        .
        """
        ...
    def deviceVersionMajor(self) -> retval:
        """
        .
        """
        ...
    def deviceVersionMinor(self) -> retval:
        """
        .
        """
        ...
    def doubleFPConfig(self) -> retval:
        """
        .
        """
        ...
    def driverVersion(self) -> retval:
        """
        .
        """
        ...
    def endianLittle(self) -> retval:
        """
        .
        """
        ...
    def errorCorrectionSupport(self) -> retval:
        """
        .
        """
        ...
    def executionCapabilities(self) -> retval:
        """
        .
        """
        ...
    def extensions(self) -> retval:
        """
        .
        """
        ...
    def globalMemCacheLineSize(self) -> retval:
        """
        .
        """
        ...
    def globalMemCacheSize(self) -> retval:
        """
        .
        """
        ...
    def globalMemCacheType(self) -> retval:
        """
        .
        """
        ...
    def globalMemSize(self) -> retval:
        """
        .
        """
        ...
    def halfFPConfig(self) -> retval:
        """
        .
        """
        ...
    def hostUnifiedMemory(self) -> retval:
        """
        .
        """
        ...
    def image2DMaxHeight(self) -> retval:
        """
        .
        """
        ...
    def image2DMaxWidth(self) -> retval:
        """
        .
        """
        ...
    def image3DMaxDepth(self) -> retval:
        """
        .
        """
        ...
    def image3DMaxHeight(self) -> retval:
        """
        .
        """
        ...
    def image3DMaxWidth(self) -> retval:
        """
        .
        """
        ...
    def imageFromBufferSupport(self) -> retval:
        """
        .
        """
        ...
    def imageMaxArraySize(self) -> retval:
        """
        .
        """
        ...
    def imageMaxBufferSize(self) -> retval:
        """
        .
        """
        ...
    def imageSupport(self) -> retval:
        """
        .
        """
        ...
    def intelSubgroupsSupport(self) -> retval:
        """
        .
        """
        ...
    def isAMD(self) -> retval:
        """
        .
        """
        ...
    def isExtensionSupported(self, extensionName) -> retval:
        """
        .
        """
        ...
    def isIntel(self) -> retval:
        """
        .
        """
        ...
    def isNVidia(self) -> retval:
        """
        .
        """
        ...
    def linkerAvailable(self) -> retval:
        """
        .
        """
        ...
    def localMemSize(self) -> retval:
        """
        .
        """
        ...
    def localMemType(self) -> retval:
        """
        .
        """
        ...
    def maxClockFrequency(self) -> retval:
        """
        .
        """
        ...
    def maxComputeUnits(self) -> retval:
        """
        .
        """
        ...
    def maxConstantArgs(self) -> retval:
        """
        .
        """
        ...
    def maxConstantBufferSize(self) -> retval:
        """
        .
        """
        ...
    def maxMemAllocSize(self) -> retval:
        """
        .
        """
        ...
    def maxParameterSize(self) -> retval:
        """
        .
        """
        ...
    def maxReadImageArgs(self) -> retval:
        """
        .
        """
        ...
    def maxSamplers(self) -> retval:
        """
        .
        """
        ...
    def maxWorkGroupSize(self) -> retval:
        """
        .
        """
        ...
    def maxWorkItemDims(self) -> retval:
        """
        .
        """
        ...
    def maxWriteImageArgs(self) -> retval:
        """
        .
        """
        ...
    def memBaseAddrAlign(self) -> retval:
        """
        .
        """
        ...
    def name(self) -> retval:
        """
        .
        """
        ...
    def nativeVectorWidthChar(self) -> retval:
        """
        .
        """
        ...
    def nativeVectorWidthDouble(self) -> retval:
        """
        .
        """
        ...
    def nativeVectorWidthFloat(self) -> retval:
        """
        .
        """
        ...
    def nativeVectorWidthHalf(self) -> retval:
        """
        .
        """
        ...
    def nativeVectorWidthInt(self) -> retval:
        """
        .
        """
        ...
    def nativeVectorWidthLong(self) -> retval:
        """
        .
        """
        ...
    def nativeVectorWidthShort(self) -> retval:
        """
        .
        """
        ...
    def preferredVectorWidthChar(self) -> retval:
        """
        .
        """
        ...
    def preferredVectorWidthDouble(self) -> retval:
        """
        .
        """
        ...
    def preferredVectorWidthFloat(self) -> retval:
        """
        .
        """
        ...
    def preferredVectorWidthHalf(self) -> retval:
        """
        .
        """
        ...
    def preferredVectorWidthInt(self) -> retval:
        """
        .
        """
        ...
    def preferredVectorWidthLong(self) -> retval:
        """
        .
        """
        ...
    def preferredVectorWidthShort(self) -> retval:
        """
        .
        """
        ...
    def printfBufferSize(self) -> retval:
        """
        .
        """
        ...
    def profilingTimerResolution(self) -> retval:
        """
        .
        """
        ...
    def singleFPConfig(self) -> retval:
        """
        .
        """
        ...
    def type(self) -> retval:
        """
        .
        """
        ...
    def vendorID(self) -> retval:
        """
        .
        """
        ...
    def vendorName(self) -> retval:
        """
        .
        """
        ...
    def version(self) -> retval:
        """
        .
        """
        ...
    ...

class ocl_OpenCLExecutionContext(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    ...

class segmentation_IntelligentScissorsMB(builtins.object):
    @staticmethod
    def __new__(*args, **kwargs):
        """
        Create and return a new object.  See help(type) for accurate signature.
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    def __repr__(self):
        """
        Return repr(self).
        """
        ...
    def applyImage(self, image) -> retval:
        """
        .   @brief Specify input image and extract image features
        .        *
        .        * @param image input image. Type is #CV_8UC1 / #CV_8UC3
        """
        ...
    def applyImageFeatures(
        self, non_edge, gradient_direction, gradient_magnitude, image=...
    ) -> retval:
        """
        .   @brief Specify custom features of imput image
        .        *
        .        * Customized advanced variant of applyImage() call.
        .        *
        .        * @param non_edge Specify cost of non-edge pixels. Type is CV_8UC1. Expected values are `{0, 1}`.
        .        * @param gradient_direction Specify gradient direction feature. Type is CV_32FC2. Values are expected to be normalized: `x^2 + y^2 == 1`
        .        * @param gradient_magnitude Specify cost of gradient magnitude function: Type is CV_32FC1. Values should be in range `[0, 1]`.
        .        * @param image **Optional parameter**. Must be specified if subset of features is specified (non-specified features are calculated internally)
        """
        ...
    def buildMap(self, sourcePt) -> None:
        """
        .   @brief Prepares a map of optimal paths for the given source point on the image
        .        *
        .        * @note applyImage() / applyImageFeatures() must be called before this call
        .        *
        .        * @param sourcePt The source point used to find the paths
        """
        ...
    def getContour(self, targetPt, contour=..., backward=...) -> contour:
        """
        .   @brief Extracts optimal contour for the given target point on the image
        .        *
        .        * @note buildMap() must be called before this call
        .        *
        .        * @param targetPt The target point
        .        * @param[out] contour The list of pixels which contains optimal path between the source and the target points of the image. Type is CV_32SC2 (compatible with `std::vector<Point>`)
        .        * @param backward Flag to indicate reverse order of retrived pixels (use "true" value to fetch points from the target to the source point)
        """
        ...
    def setEdgeFeatureCannyParameters(
        self, threshold1, threshold2, apertureSize=..., L2gradient=...
    ) -> retval:
        """
        .   @brief Switch edge feature extractor to use Canny edge detector
        .        *
        .        * @note "Laplacian Zero-Crossing" feature extractor is used by default (following to original article)
        .        *
        .        * @sa Canny
        """
        ...
    def setEdgeFeatureZeroCrossingParameters(
        self, gradient_magnitude_min_value=...
    ) -> retval:
        """
        .   @brief Switch to "Laplacian Zero-Crossing" edge feature extractor and specify its parameters
        .        *
        .        * This feature extractor is used by default according to article.
        .        *
        .        * Implementation has additional filtering for regions with low-amplitude noise.
        .        * This filtering is enabled through parameter of minimal gradient amplitude (use some small value 4, 8, 16).
        .        *
        .        * @note Current implementation of this feature extractor is based on processing of grayscale images (color image is converted to grayscale image first).
        .        *
        .        * @note Canny edge detector is a bit slower, but provides better results (especially on color images): use setEdgeFeatureCannyParameters().
        .        *
        .        * @param gradient_magnitude_min_value Minimal gradient magnitude value for edge pixels (default: 0, check is disabled)
        """
        ...
    def setGradientMagnitudeMaxLimit(
        self, gradient_magnitude_threshold_max=...
    ) -> retval:
        """
        .   @brief Specify gradient magnitude max value threshold
        .        *
        .        * Zero limit value is used to disable gradient magnitude thresholding (default behavior, as described in original article).
        .        * Otherwize pixels with `gradient magnitude >= threshold` have zero cost.
        .        *
        .        * @note Thresholding should be used for images with irregular regions (to avoid stuck on parameters from high-contract areas, like embedded logos).
        .        *
        .        * @param gradient_magnitude_threshold_max Specify gradient magnitude max value threshold (default: 0, disabled)
        """
        ...
    def setWeights(
        self, weight_non_edge, weight_gradient_direction, weight_gradient_magnitude
    ) -> retval:
        """
        .   @brief Specify weights of feature functions
        .        *
        .        * Consider keeping weights normalized (sum of weights equals to 1.0)
        .        * Discrete dynamic programming (DP) goal is minimization of costs between pixels.
        .        *
        .        * @param weight_non_edge Specify cost of non-edge pixels (default: 0.43f)
        .        * @param weight_gradient_direction Specify cost of gradient direction function (default: 0.43f)
        .        * @param weight_gradient_magnitude Specify cost of gradient magnitude function (default: 0.14f)
        """
        ...
    ...

def AKAZE_create(
    descriptor_type=...,
    descriptor_size=...,
    descriptor_channels=...,
    threshold=...,
    nOctaves=...,
    nOctaveLayers=...,
    diffusivity=...,
) -> retval:
    """
    .   @brief The AKAZE constructor
    .
    .       @param descriptor_type Type of the extracted descriptor: DESCRIPTOR_KAZE,
    .       DESCRIPTOR_KAZE_UPRIGHT, DESCRIPTOR_MLDB or DESCRIPTOR_MLDB_UPRIGHT.
    .       @param descriptor_size Size of the descriptor in bits. 0 -\> Full size
    .       @param descriptor_channels Number of channels in the descriptor (1, 2, 3)
    .       @param threshold Detector response threshold to accept point
    .       @param nOctaves Maximum octave evolution of the image
    .       @param nOctaveLayers Default number of sublevels per scale level
    .       @param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, DIFF_WEICKERT or
    .       DIFF_CHARBONNIER
    """
    ...

def AffineFeature_create(
    backend, maxTilt=..., minTilt=..., tiltStep=..., rotateStepBase=...
) -> retval:
    """
    .   @param backend The detector/extractor you want to use as backend.
    .       @param maxTilt The highest power index of tilt factor. 5 is used in the paper as tilt sampling range n.
    .       @param minTilt The lowest power index of tilt factor. 0 is used in the paper.
    .       @param tiltStep Tilt sampling step \f$\delta_t\f$ in Algorithm 1 in the paper.
    .       @param rotateStepBase Rotation sampling step factor b in Algorithm 1 in the paper.
    """
    ...

def AgastFeatureDetector_create(
    threshold=..., nonmaxSuppression=..., type=...
) -> retval:
    """
    .
    """
    ...

def BFMatcher_create(normType=..., crossCheck=...) -> retval:
    """
    .   @brief Brute-force matcher create method.
    .       @param normType One of NORM_L1, NORM_L2, NORM_HAMMING, NORM_HAMMING2. L1 and L2 norms are
    .       preferable choices for SIFT and SURF descriptors, NORM_HAMMING should be used with ORB, BRISK and
    .       BRIEF, NORM_HAMMING2 should be used with ORB when WTA_K==3 or 4 (see ORB::ORB constructor
    .       description).
    .       @param crossCheck If it is false, this is will be default BFMatcher behaviour when it finds the k
    .       nearest neighbors for each query descriptor. If crossCheck==true, then the knnMatch() method with
    .       k=1 will only return pairs (i,j) such that for i-th query descriptor the j-th descriptor in the
    .       matcher's collection is the nearest and vice versa, i.e. the BFMatcher will only return consistent
    .       pairs. Such technique usually produces best results with minimal number of outliers when there are
    .       enough matches. This is alternative to the ratio test, used by D. Lowe in SIFT paper.
    """
    ...

def BRISK_create(thresh=..., octaves=..., patternScale=...) -> retval:
    """
    .   @brief The BRISK constructor
    .
    .       @param thresh AGAST detection threshold score.
    .       @param octaves detection octaves. Use 0 to do single scale.
    .       @param patternScale apply this scale to the pattern used for sampling the neighbourhood of a
    .       keypoint.



    BRISK_create(radiusList, numberList, dMax=..., dMin=..., indexChange=...) -> retval
    .   @brief The BRISK constructor for a custom pattern
    .
    .       @param radiusList defines the radii (in pixels) where the samples around a keypoint are taken (for
    .       keypoint scale 1).
    .       @param numberList defines the number of sampling points on the sampling circle. Must be the same
    .       size as radiusList..
    .       @param dMax threshold for the short pairings used for descriptor formation (in pixels for keypoint
    .       scale 1).
    .       @param dMin threshold for the long pairings used for orientation determination (in pixels for
    .       keypoint scale 1).
    .   @param indexChange index remapping of the bits.



    BRISK_create(thresh, octaves, radiusList, numberList, dMax=..., dMin=..., indexChange=...) -> retval
    .   @brief The BRISK constructor for a custom pattern, detection threshold and octaves
    .
    .       @param thresh AGAST detection threshold score.
    .       @param octaves detection octaves. Use 0 to do single scale.
    .       @param radiusList defines the radii (in pixels) where the samples around a keypoint are taken (for
    .       keypoint scale 1).
    .       @param numberList defines the number of sampling points on the sampling circle. Must be the same
    .       size as radiusList..
    .       @param dMax threshold for the short pairings used for descriptor formation (in pixels for keypoint
    .       scale 1).
    .       @param dMin threshold for the long pairings used for orientation determination (in pixels for
    .       keypoint scale 1).
    .   @param indexChange index remapping of the bits.
    """
    ...

def CamShift(probImage, window, criteria) -> Tuple[retval, window]:
    """
    .   @brief Finds an object center, size, and orientation.
    .
    .   @param probImage Back projection of the object histogram. See calcBackProject.
    .   @param window Initial search window.
    .   @param criteria Stop criteria for the underlying meanShift.
    .   returns
    .   (in old interfaces) Number of iterations CAMSHIFT took to converge
    .   The function implements the CAMSHIFT object tracking algorithm @cite Bradski98 . First, it finds an
    .   object center using meanShift and then adjusts the window size and finds the optimal rotation. The
    .   function returns the rotated rectangle structure that includes the object position, size, and
    .   orientation. The next position of the search window can be obtained with RotatedRect::boundingRect()
    .
    .   See the OpenCV sample camshiftdemo.c that tracks colored objects.
    .
    .   @note
    .   -   (Python) A sample explaining the camshift tracking algorithm can be found at
    .       opencv_source_code/samples/python/camshift.py
    """
    ...

def Canny(
    image: ndarray,
    threshold1: int,
    threshold2: int,
    edges: ndarray = ...,
    apertureSize: int = ...,
    L2gradient: int = ...,
) -> ndarray:
    """
    .   @brief Finds edges in an image using the Canny algorithm @cite Canny86 .
    .
    .   The function finds edges in the input image and marks them in the output map edges using the
    .   Canny algorithm. The smallest value between threshold1 and threshold2 is used for edge linking. The
    .   largest value is used to find initial segments of strong edges. See
    .   <http://en.wikipedia.org/wiki/Canny_edge_detector>
    .
    .   @param image 8-bit input image.
    .   @param edges output edge map; single channels 8-bit image, which has the same size as image .
    .   @param threshold1 first threshold for the hysteresis procedure.
    .   @param threshold2 second threshold for the hysteresis procedure.
    .   @param apertureSize aperture size for the Sobel operator.
    .   @param L2gradient a flag, indicating whether a more accurate \f$L_2\f$ norm
    .   \f$=\sqrt{(dI/dx)^2 + (dI/dy)^2}\f$ should be used to calculate the image gradient magnitude (
    .   L2gradient=true ), or whether the default \f$L_1\f$ norm \f$=|dI/dx|+|dI/dy|\f$ is enough (
    .   L2gradient=false ).



    Canny(dx, dy, threshold1, threshold2, edges=..., L2gradient=...) -> edges
    .   \overload
    .
    .   Finds edges in an image using the Canny algorithm with custom image gradient.
    .
    .   @param dx 16-bit x derivative of input image (CV_16SC1 or CV_16SC3).
    .   @param dy 16-bit y derivative of input image (same type as dx).
    .   @param edges output edge map; single channels 8-bit image, which has the same size as image .
    .   @param threshold1 first threshold for the hysteresis procedure.
    .   @param threshold2 second threshold for the hysteresis procedure.
    .   @param L2gradient a flag, indicating whether a more accurate \f$L_2\f$ norm
    .   \f$=\sqrt{(dI/dx)^2 + (dI/dy)^2}\f$ should be used to calculate the image gradient magnitude (
    .   L2gradient=true ), or whether the default \f$L_1\f$ norm \f$=|dI/dx|+|dI/dy|\f$ is enough (
    .   L2gradient=false ).
    """
    ...

def CascadeClassifier_convert(oldcascade, newcascade) -> retval:
    """
    .
    """
    ...

def DISOpticalFlow_create(preset=...) -> retval:
    """
    .   @brief Creates an instance of DISOpticalFlow
    .
    .       @param preset one of PRESET_ULTRAFAST, PRESET_FAST and PRESET_MEDIUM
    """
    ...

def DescriptorMatcher_create(descriptorMatcherType) -> retval:
    """
    .   @brief Creates a descriptor matcher of a given type with the default parameters (using default
    .       constructor).
    .
    .       @param descriptorMatcherType Descriptor matcher type. Now the following matcher types are
    .       supported:
    .       -   `BruteForce` (it uses L2 )
    .       -   `BruteForce-L1`
    .       -   `BruteForce-Hamming`
    .       -   `BruteForce-Hamming(2)`
    .       -   `FlannBased`



    DescriptorMatcher_create(matcherType) -> retval
    .
    """
    ...

def EMD(
    signature1, signature2, distType, cost=..., lowerBound=..., flow=...
) -> Tuple[d, flow]:
    """
    .   @brief Computes the "minimal work" distance between two weighted point configurations.
    .
    .   The function computes the earth mover distance and/or a lower boundary of the distance between the
    .   two weighted point configurations. One of the applications described in @cite RubnerSept98,
    .   @cite Rubner2000 is multi-dimensional histogram comparison for image retrieval. EMD is a transportation
    .   problem that is solved using some modification of a simplex algorithm, thus the complexity is
    .   exponential in the worst case, though, on average it is much faster. In the case of a real metric
    .   the lower boundary can be calculated even faster (using linear-time algorithm) and it can be used
    .   to determine roughly whether the two signatures are far enough so that they cannot relate to the
    .   same object.
    .
    .   @param signature1 First signature, a \f$\texttt{size1}\times \texttt{dims}+1\f$ floating-point matrix.
    .   Each row stores the point weight followed by the point coordinates. The matrix is allowed to have
    .   a single column (weights only) if the user-defined cost matrix is used. The weights must be
    .   non-negative and have at least one non-zero value.
    .   @param signature2 Second signature of the same format as signature1 , though the number of rows
    .   may be different. The total weights may be different. In this case an extra "dummy" point is added
    .   to either signature1 or signature2. The weights must be non-negative and have at least one non-zero
    .   value.
    .   @param distType Used metric. See #DistanceTypes.
    .   @param cost User-defined \f$\texttt{size1}\times \texttt{size2}\f$ cost matrix. Also, if a cost matrix
    .   is used, lower boundary lowerBound cannot be calculated because it needs a metric function.
    .   @param lowerBound Optional input/output parameter: lower boundary of a distance between the two
    .   signatures that is a distance between mass centers. The lower boundary may not be calculated if
    .   the user-defined cost matrix is used, the total weights of point configurations are not equal, or
    .   if the signatures consist of weights only (the signature matrices have a single column). You
    .   **must** initialize \*lowerBound . If the calculated distance between mass centers is greater or
    .   equal to \*lowerBound (it means that the signatures are far enough), the function does not
    .   calculate EMD. In any case \*lowerBound is set to the calculated distance between mass centers on
    .   return. Thus, if you want to calculate both distance between mass centers and EMD, \*lowerBound
    .   should be set to 0.
    .   @param flow Resultant \f$\texttt{size1} \times \texttt{size2}\f$ flow matrix: \f$\texttt{flow}_{i,j}\f$ is
    .   a flow from \f$i\f$ -th point of signature1 to \f$j\f$ -th point of signature2 .
    """
    ...

def FarnebackOpticalFlow_create(
    numLevels=...,
    pyrScale=...,
    fastPyramids=...,
    winSize=...,
    numIters=...,
    polyN=...,
    polySigma=...,
    flags=...,
) -> retval:
    """
    .
    """
    ...

def FastFeatureDetector_create(
    threshold=..., nonmaxSuppression=..., type=...
) -> retval:
    """
    .
    """
    ...

def FlannBasedMatcher_create() -> retval:
    """
    .
    """
    ...

def GFTTDetector_create(
    maxCorners=...,
    qualityLevel=...,
    minDistance=...,
    blockSize=...,
    useHarrisDetector=...,
    k=...,
) -> retval:
    """
    .



    GFTTDetector_create(maxCorners, qualityLevel, minDistance, blockSize, gradiantSize, useHarrisDetector=..., k=...) -> retval
    .
    """
    ...

def GIn(*args, **kwargs) -> GInputProtoArgs:
    """ """
    ...

def GOut(*args, **kwargs) -> GOutputProtoArgs:
    """ """
    ...

def GaussianBlur(
    src: ndarray,
    ksize: Tuple[int, int],
    sigmaX: int,
    dst: ndarray = ...,
    sigmaY: int = ...,
    borderType: int = ...,
) -> ndarray:
    """
    .   @brief Blurs an image using a Gaussian filter.
    .
    .   The function convolves the source image with the specified Gaussian kernel. In-place filtering is
    .   supported.
    .
    .   @param src input image; the image can have any number of channels, which are processed
    .   independently, but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.
    .   @param dst output image of the same size and type as src.
    .   @param ksize Gaussian kernel size. ksize.width and ksize.height can differ but they both must be
    .   positive and odd. Or, they can be zero's and then they are computed from sigma.
    .   @param sigmaX Gaussian kernel standard deviation in X direction.
    .   @param sigmaY Gaussian kernel standard deviation in Y direction; if sigmaY is zero, it is set to be
    .   equal to sigmaX, if both sigmas are zeros, they are computed from ksize.width and ksize.height,
    .   respectively (see #getGaussianKernel for details); to fully control the result regardless of
    .   possible future modifications of all this semantics, it is recommended to specify all of ksize,
    .   sigmaX, and sigmaY.
    .   @param borderType pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not supported.
    .
    .   @sa  sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur
    """
    ...

def HOGDescriptor_getDaimlerPeopleDetector() -> retval:
    """
    .   @brief Returns coefficients of the classifier trained for people detection (for 48x96 windows).
    """
    ...

def HOGDescriptor_getDefaultPeopleDetector() -> retval:
    """
    .   @brief Returns coefficients of the classifier trained for people detection (for 64x128 windows).
    """
    ...

def HoughCircles(
    image,
    method,
    dp,
    minDist,
    circles=...,
    param1=...,
    param2=...,
    minRadius=...,
    maxRadius=...,
) -> circles:
    """
    .   @brief Finds circles in a grayscale image using the Hough transform.
    .
    .   The function finds circles in a grayscale image using a modification of the Hough transform.
    .
    .   Example: :
    .   @include snippets/imgproc_HoughLinesCircles.cpp
    .
    .   @note Usually the function detects the centers of circles well. However, it may fail to find correct
    .   radii. You can assist to the function by specifying the radius range ( minRadius and maxRadius ) if
    .   you know it. Or, in the case of #HOUGH_GRADIENT method you may set maxRadius to a negative number
    .   to return centers only without radius search, and find the correct radius using an additional procedure.
    .
    .   It also helps to smooth image a bit unless it's already soft. For example,
    .   GaussianBlur() with 7x7 kernel and 1.5x1.5 sigma or similar blurring may help.
    .
    .   @param image 8-bit, single-channel, grayscale input image.
    .   @param circles Output vector of found circles. Each vector is encoded as  3 or 4 element
    .   floating-point vector \f$(x, y, radius)\f$ or \f$(x, y, radius, votes)\f$ .
    .   @param method Detection method, see #HoughModes. The available methods are #HOUGH_GRADIENT and #HOUGH_GRADIENT_ALT.
    .   @param dp Inverse ratio of the accumulator resolution to the image resolution. For example, if
    .   dp=1 , the accumulator has the same resolution as the input image. If dp=2 , the accumulator has
    .   half as big width and height. For #HOUGH_GRADIENT_ALT the recommended value is dp=1.5,
    .   unless some small very circles need to be detected.
    .   @param minDist Minimum distance between the centers of the detected circles. If the parameter is
    .   too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is
    .   too large, some circles may be missed.
    .   @param param1 First method-specific parameter. In case of #HOUGH_GRADIENT and #HOUGH_GRADIENT_ALT,
    .   it is the higher threshold of the two passed to the Canny edge detector (the lower one is twice smaller).
    .   Note that #HOUGH_GRADIENT_ALT uses #Scharr algorithm to compute image derivatives, so the threshold value
    .   shough normally be higher, such as 300 or normally exposed and contrasty images.
    .   @param param2 Second method-specific parameter. In case of #HOUGH_GRADIENT, it is the
    .   accumulator threshold for the circle centers at the detection stage. The smaller it is, the more
    .   false circles may be detected. Circles, corresponding to the larger accumulator values, will be
    .   returned first. In the case of #HOUGH_GRADIENT_ALT algorithm, this is the circle "perfectness" measure.
    .   The closer it to 1, the better shaped circles algorithm selects. In most cases 0.9 should be fine.
    .   If you want get better detection of small circles, you may decrease it to 0.85, 0.8 or even less.
    .   But then also try to limit the search range [minRadius, maxRadius] to avoid many false circles.
    .   @param minRadius Minimum circle radius.
    .   @param maxRadius Maximum circle radius. If <= 0, uses the maximum image dimension. If < 0, #HOUGH_GRADIENT returns
    .   centers without finding the radius. #HOUGH_GRADIENT_ALT always computes circle radiuses.
    .
    .   @sa fitEllipse, minEnclosingCircle
    """
    ...

def HoughLines(
    image,
    rho,
    theta,
    threshold,
    lines=...,
    srn=...,
    stn=...,
    min_theta=...,
    max_theta=...,
) -> lines:
    """
    .   @brief Finds lines in a binary image using the standard Hough transform.
    .
    .   The function implements the standard or standard multi-scale Hough transform algorithm for line
    .   detection. See <http://homepages.inf.ed.ac.uk/rbf/HIPR2/hough.htm> for a good explanation of Hough
    .   transform.
    .
    .   @param image 8-bit, single-channel binary source image. The image may be modified by the function.
    .   @param lines Output vector of lines. Each line is represented by a 2 or 3 element vector
    .   \f$(\rho, \theta)\f$ or \f$(\rho, \theta, \textrm{votes})\f$ . \f$\rho\f$ is the distance from the coordinate origin \f$(0,0)\f$ (top-left corner of
    .   the image). \f$\theta\f$ is the line rotation angle in radians (
    .   \f$0 \sim \textrm{vertical line}, \pi/2 \sim \textrm{horizontal line}\f$ ).
    .   \f$\textrm{votes}\f$ is the value of accumulator.
    .   @param rho Distance resolution of the accumulator in pixels.
    .   @param theta Angle resolution of the accumulator in radians.
    .   @param threshold Accumulator threshold parameter. Only those lines are returned that get enough
    .   votes ( \f$>\texttt{threshold}\f$ ).
    .   @param srn For the multi-scale Hough transform, it is a divisor for the distance resolution rho .
    .   The coarse accumulator distance resolution is rho and the accurate accumulator resolution is
    .   rho/srn . If both srn=0 and stn=0 , the classical Hough transform is used. Otherwise, both these
    .   parameters should be positive.
    .   @param stn For the multi-scale Hough transform, it is a divisor for the distance resolution theta.
    .   @param min_theta For standard and multi-scale Hough transform, minimum angle to check for lines.
    .   Must fall between 0 and max_theta.
    .   @param max_theta For standard and multi-scale Hough transform, maximum angle to check for lines.
    .   Must fall between min_theta and CV_PI.
    """
    ...

def HoughLinesP(
    image, rho, theta, threshold, lines=..., minLineLength=..., maxLineGap=...
) -> lines:
    """
    .   @brief Finds line segments in a binary image using the probabilistic Hough transform.
    .
    .   The function implements the probabilistic Hough transform algorithm for line detection, described
    .   in @cite Matas00
    .
    .   See the line detection example below:
    .   @include snippets/imgproc_HoughLinesP.cpp
    .   This is a sample picture the function parameters have been tuned for:
    .
    .   ![image](pics/building.jpg)
    .
    .   And this is the output of the above program in case of the probabilistic Hough transform:
    .
    .   ![image](pics/houghp.png)
    .
    .   @param image 8-bit, single-channel binary source image. The image may be modified by the function.
    .   @param lines Output vector of lines. Each line is represented by a 4-element vector
    .   \f$(x_1, y_1, x_2, y_2)\f$ , where \f$(x_1,y_1)\f$ and \f$(x_2, y_2)\f$ are the ending points of each detected
    .   line segment.
    .   @param rho Distance resolution of the accumulator in pixels.
    .   @param theta Angle resolution of the accumulator in radians.
    .   @param threshold Accumulator threshold parameter. Only those lines are returned that get enough
    .   votes ( \f$>\texttt{threshold}\f$ ).
    .   @param minLineLength Minimum line length. Line segments shorter than that are rejected.
    .   @param maxLineGap Maximum allowed gap between points on the same line to link them.
    .
    .   @sa LineSegmentDetector
    """
    ...

def HoughLinesPointSet(
    _point,
    lines_max,
    threshold,
    min_rho,
    max_rho,
    rho_step,
    min_theta,
    max_theta,
    theta_step,
    _lines=...,
) -> _lines:
    """
    .   @brief Finds lines in a set of points using the standard Hough transform.
    .
    .   The function finds lines in a set of points using a modification of the Hough transform.
    .   @include snippets/imgproc_HoughLinesPointSet.cpp
    .   @param _point Input vector of points. Each vector must be encoded as a Point vector \f$(x,y)\f$. Type must be CV_32FC2 or CV_32SC2.
    .   @param _lines Output vector of found lines. Each vector is encoded as a vector<Vec3d> \f$(votes, rho, theta)\f$.
    .   The larger the value of 'votes', the higher the reliability of the Hough line.
    .   @param lines_max Max count of hough lines.
    .   @param threshold Accumulator threshold parameter. Only those lines are returned that get enough
    .   votes ( \f$>\texttt{threshold}\f$ )
    .   @param min_rho Minimum Distance value of the accumulator in pixels.
    .   @param max_rho Maximum Distance value of the accumulator in pixels.
    .   @param rho_step Distance resolution of the accumulator in pixels.
    .   @param min_theta Minimum angle value of the accumulator in radians.
    .   @param max_theta Maximum angle value of the accumulator in radians.
    .   @param theta_step Angle resolution of the accumulator in radians.
    """
    ...

def HoughLinesWithAccumulator(
    image,
    rho,
    theta,
    threshold,
    lines=...,
    srn=...,
    stn=...,
    min_theta=...,
    max_theta=...,
) -> lines:
    """
    .   @brief Finds lines in a binary image using the standard Hough transform and get accumulator.
    .    *
    .    * @note This function is for bindings use only. Use original function in C++ code
    .    *
    .    * @sa HoughLines
    """
    ...

def HuMoments(m, hu=...) -> hu:
    """
    .   @overload
    """
    ...

def KAZE_create(
    extended=...,
    upright=...,
    threshold=...,
    nOctaves=...,
    nOctaveLayers=...,
    diffusivity=...,
) -> retval:
    """
    .   @brief The KAZE constructor
    .
    .       @param extended Set to enable extraction of extended (128-byte) descriptor.
    .       @param upright Set to enable use of upright descriptors (non rotation-invariant).
    .       @param threshold Detector response threshold to accept point
    .       @param nOctaves Maximum octave evolution of the image
    .       @param nOctaveLayers Default number of sublevels per scale level
    .       @param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, DIFF_WEICKERT or
    .       DIFF_CHARBONNIER
    """
    ...

def KeyPoint_convert(keypoints, keypointIndexes=...) -> points2f:
    """
    .   This method converts vector of keypoints to vector of points or the reverse, where each keypoint is
    .       assigned the same size and the same orientation.
    .
    .       @param keypoints Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB
    .       @param points2f Array of (x,y) coordinates of each keypoint
    .       @param keypointIndexes Array of indexes of keypoints to be converted to points. (Acts like a mask to
    .       convert only specified keypoints)



    KeyPoint_convert(points2f, size=..., response=..., octave=..., class_id=...) -> keypoints
    .   @overload
    .       @param points2f Array of (x,y) coordinates of each keypoint
    .       @param keypoints Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB
    .       @param size keypoint diameter
    .       @param response keypoint detector response on the keypoint (that is, strength of the keypoint)
    .       @param octave pyramid octave in which the keypoint has been detected
    .       @param class_id object id
    """
    ...

def KeyPoint_overlap(kp1, kp2) -> retval:
    """
    .   This method computes overlap for pair of keypoints. Overlap is the ratio between area of keypoint
    .       regions' intersection and area of keypoint regions' union (considering keypoint region as circle).
    .       If they don't overlap, we get zero. If they coincide at same location with same size, we get 1.
    .       @param kp1 First keypoint
    .       @param kp2 Second keypoint
    """
    ...

def LUT(src, lut, dst=...) -> dst:
    """
    .   @brief Performs a look-up table transform of an array.
    .
    .   The function LUT fills the output array with values from the look-up table. Indices of the entries
    .   are taken from the input array. That is, the function processes each element of src as follows:
    .   \f[\texttt{dst} (I)  \leftarrow \texttt{lut(src(I) + d)}\f]
    .   where
    .   \f[d =  \fork{0}{if \(\texttt{src}\) has depth \(\texttt{CV_8U}\)}{128}{if \(\texttt{src}\) has depth \(\texttt{CV_8S}\)}\f]
    .   @param src input array of 8-bit elements.
    .   @param lut look-up table of 256 elements; in case of multi-channel input array, the table should
    .   either have a single channel (in this case the same table is used for all channels) or the same
    .   number of channels as in the input array.
    .   @param dst output array of the same size and number of channels as src, and the same depth as lut.
    .   @sa  convertScaleAbs, Mat::convertTo
    """
    ...

def Laplacian(
    src, ddepth, dst=..., ksize=..., scale=..., delta=..., borderType=...
) -> dst:
    """
    .   @brief Calculates the Laplacian of an image.
    .
    .   The function calculates the Laplacian of the source image by adding up the second x and y
    .   derivatives calculated using the Sobel operator:
    .
    .   \f[\texttt{dst} =  \Delta \texttt{src} =  \frac{\partial^2 \texttt{src}}{\partial x^2} +  \frac{\partial^2 \texttt{src}}{\partial y^2}\f]
    .
    .   This is done when `ksize > 1`. When `ksize == 1`, the Laplacian is computed by filtering the image
    .   with the following \f$3 \times 3\f$ aperture:
    .
    .   \f[\vecthreethree {0}{1}{0}{1}{-4}{1}{0}{1}{0}\f]
    .
    .   @param src Source image.
    .   @param dst Destination image of the same size and the same number of channels as src .
    .   @param ddepth Desired depth of the destination image.
    .   @param ksize Aperture size used to compute the second-derivative filters. See #getDerivKernels for
    .   details. The size must be positive and odd.
    .   @param scale Optional scale factor for the computed Laplacian values. By default, no scaling is
    .   applied. See #getDerivKernels for details.
    .   @param delta Optional delta value that is added to the results prior to storing them in dst .
    .   @param borderType Pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not supported.
    .   @sa  Sobel, Scharr
    """
    ...

def MSER_create(
    _delta=...,
    _min_area=...,
    _max_area=...,
    _max_variation=...,
    _min_diversity=...,
    _max_evolution=...,
    _area_threshold=...,
    _min_margin=...,
    _edge_blur_size=...,
) -> retval:
    """
    .   @brief Full constructor for %MSER detector
    .
    .       @param _delta it compares \f$(size_{i}-size_{i-delta})/size_{i-delta}\f$
    .       @param _min_area prune the area which smaller than minArea
    .       @param _max_area prune the area which bigger than maxArea
    .       @param _max_variation prune the area have similar size to its children
    .       @param _min_diversity for color image, trace back to cut off mser with diversity less than min_diversity
    .       @param _max_evolution  for color image, the evolution steps
    .       @param _area_threshold for color image, the area threshold to cause re-initialize
    .       @param _min_margin for color image, ignore too small margin
    .       @param _edge_blur_size for color image, the aperture size for edge blur
    """
    ...

def Mahalanobis(v1, v2, icovar) -> retval:
    """
    .   @brief Calculates the Mahalanobis distance between two vectors.
    .
    .   The function cv::Mahalanobis calculates and returns the weighted distance between two vectors:
    .   \f[d( \texttt{vec1} , \texttt{vec2} )= \sqrt{\sum_{i,j}{\texttt{icovar(i,j)}\cdot(\texttt{vec1}(I)-\texttt{vec2}(I))\cdot(\texttt{vec1(j)}-\texttt{vec2(j)})} }\f]
    .   The covariance matrix may be calculated using the #calcCovarMatrix function and then inverted using
    .   the invert function (preferably using the #DECOMP_SVD method, as the most accurate).
    .   @param v1 first 1D input vector.
    .   @param v2 second 1D input vector.
    .   @param icovar inverse covariance matrix.
    """
    ...

def ORB_create(
    features: int = ...,
    scaleFactor: float = ...,
    nlevels: int = ...,
    edgeThreshold: int = ...,
    firstLevel: int = ...,
    WTA_K: int = ...,
    scoreType: int = ...,
    patchSize: int = ...,
    fastThreshold: int = ...,
) -> ORB:
    """
    .   @brief The ORB constructor
    .
    .       @param nfeatures The maximum number of features to retain.
    .       @param scaleFactor Pyramid decimation ratio, greater than 1. scaleFactor==2 means the classical
    .       pyramid, where each next level has 4x less pixels than the previous, but such a big scale factor
    .       will degrade feature matching scores dramatically. On the other hand, too close to 1 scale factor
    .       will mean that to cover certain scale range you will need more pyramid levels and so the speed
    .       will suffer.
    .       @param nlevels The number of pyramid levels. The smallest level will have linear size equal to
    .       input_image_linear_size/pow(scaleFactor, nlevels - firstLevel).
    .       @param edgeThreshold This is size of the border where the features are not detected. It should
    .       roughly match the patchSize parameter.
    .       @param firstLevel The level of pyramid to put source image to. Previous layers are filled
    .       with upscaled source image.
    .       @param WTA_K The number of points that produce each element of the oriented BRIEF descriptor. The
    .       default value 2 means the BRIEF where we take a random point pair and compare their brightnesses,
    .       so we get 0/1 response. Other possible values are 3 and 4. For example, 3 means that we take 3
    .       random points (of course, those point coordinates are random, but they are generated from the
    .       pre-defined seed, so each element of BRIEF descriptor is computed deterministically from the pixel
    .       rectangle), find point of maximum brightness and output index of the winner (0, 1 or 2). Such
    .       output will occupy 2 bits, and therefore it will need a special variant of Hamming distance,
    .       denoted as NORM_HAMMING2 (2 bits per bin). When WTA_K=4, we take 4 random points to compute each
    .       bin (that will also occupy 2 bits with possible values 0, 1, 2 or 3).
    .       @param scoreType The default HARRIS_SCORE means that Harris algorithm is used to rank features
    .       (the score is written to KeyPoint::score and is used to retain best nfeatures features);
    .       FAST_SCORE is alternative value of the parameter that produces slightly less stable keypoints,
    .       but it is a little faster to compute.
    .       @param patchSize size of the patch used by the oriented BRIEF descriptor. Of course, on smaller
    .       pyramid layers the perceived image area covered by a feature will be larger.
    .       @param fastThreshold the fast threshold
    """
    ...

def PCABackProject(data, mean, eigenvectors, result=...) -> result:
    """
    .   wrap PCA::backProject
    """
    ...

def PCACompute(
    data, mean, eigenvectors=..., maxComponents=...
) -> Tuple[mean, eigenvectors]:
    """
    .   wrap PCA::operator()



    PCACompute(data, mean, retainedVariance, eigenvectors=...) -> mean, eigenvectors
    .   wrap PCA::operator()
    """
    ...

def PCACompute2(
    data, mean, eigenvectors=..., eigenvalues=..., maxComponents=...
) -> Tuple[s, eigenvalues]:
    """
    .   wrap PCA::operator() and add eigenvalues output parameter



    PCACompute2(data, mean, retainedVariance, eigenvectors=..., eigenvalues=...) -> mean, eigenvectors, eigenvalues
    .   wrap PCA::operator() and add eigenvalues output parameter
    """
    ...

def PCAProject(data, mean, eigenvectors, result=...) -> result:
    """
    .   wrap PCA::project
    """
    ...

def PSNR(src1, src2, R=...) -> retval:
    """
    .   @brief Computes the Peak Signal-to-Noise Ratio (PSNR) image quality metric.
    .
    .   This function calculates the Peak Signal-to-Noise Ratio (PSNR) image quality metric in decibels (dB),
    .   between two input arrays src1 and src2. The arrays must have the same type.
    .
    .   The PSNR is calculated as follows:
    .
    .   \f[
    .   \texttt{PSNR} = 10 \cdot \log_{10}{\left( \frac{R^2}{MSE} \right) }
    .   \f]
    .
    .   where R is the maximum integer value of depth (e.g. 255 in the case of CV_8U data)
    .   and MSE is the mean squared error between the two arrays.
    .
    .   @param src1 first input array.
    .   @param src2 second input array of the same size as src1.
    .   @param R the maximum pixel value (255 by default)
    """
    ...

def RQDecomp3x3(src, mtxR=..., mtxQ=..., Qx=..., Qy=..., Qz=...) -> Tuple[Qy, Qz]:
    """
    .   @brief Computes an RQ decomposition of 3x3 matrices.
    .
    .   @param src 3x3 input matrix.
    .   @param mtxR Output 3x3 upper-triangular matrix.
    .   @param mtxQ Output 3x3 orthogonal matrix.
    .   @param Qx Optional output 3x3 rotation matrix around x-axis.
    .   @param Qy Optional output 3x3 rotation matrix around y-axis.
    .   @param Qz Optional output 3x3 rotation matrix around z-axis.
    .
    .   The function computes a RQ decomposition using the given rotations. This function is used in
    .   decomposeProjectionMatrix to decompose the left 3x3 submatrix of a projection matrix into a camera
    .   and a rotation matrix.
    .
    .   It optionally returns three rotation matrices, one for each axis, and the three Euler angles in
    .   degrees (as the return value) that could be used in OpenGL. Note, there is always more than one
    .   sequence of rotations about the three principal axes that results in the same orientation of an
    .   object, e.g. see @cite Slabaugh . Returned tree rotation matrices and corresponding three Euler angles
    .   are only one of the possible solutions.
    """
    ...

def Rodrigues(src, dst=..., jacobian=...) -> Tuple[dst, jacobian]:
    """
    .   @brief Converts a rotation matrix to a rotation vector or vice versa.
    .
    .   @param src Input rotation vector (3x1 or 1x3) or rotation matrix (3x3).
    .   @param dst Output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively.
    .   @param jacobian Optional output Jacobian matrix, 3x9 or 9x3, which is a matrix of partial
    .   derivatives of the output array components with respect to the input array components.
    .
    .   \f[\begin{array}{l} \theta \leftarrow norm(r) \\ r  \leftarrow r/ \theta \\ R =  \cos(\theta) I + (1- \cos{\theta} ) r r^T +  \sin(\theta) \vecthreethree{0}{-r_z}{r_y}{r_z}{0}{-r_x}{-r_y}{r_x}{0} \end{array}\f]
    .
    .   Inverse transformation can be also done easily, since
    .
    .   \f[\sin ( \theta ) \vecthreethree{0}{-r_z}{r_y}{r_z}{0}{-r_x}{-r_y}{r_x}{0} = \frac{R - R^T}{2}\f]
    .
    .   A rotation vector is a convenient and most compact representation of a rotation matrix (since any
    .   rotation matrix has just 3 degrees of freedom). The representation is used in the global 3D geometry
    .   optimization procedures like @ref calibrateCamera, @ref stereoCalibrate, or @ref solvePnP .
    .
    .   @note More information about the computation of the derivative of a 3D rotation matrix with respect to its exponential coordinate
    .   can be found in:
    .       - A Compact Formula for the Derivative of a 3-D Rotation in Exponential Coordinates, Guillermo Gallego, Anthony J. Yezzi @cite Gallego2014ACF
    .
    .   @note Useful information on SE(3) and Lie Groups can be found in:
    .       - A tutorial on SE(3) transformation parameterizations and on-manifold optimization, Jose-Luis Blanco @cite blanco2010tutorial
    .       - Lie Groups for 2D and 3D Transformation, Ethan Eade @cite Eade17
    .       - A micro Lie theory for state estimation in robotics, Joan Sol&#224;, J&#233;r&#233;mie Deray, Dinesh Atchuthan @cite Sol2018AML
    """
    ...

def SIFT_create(
    nfeatures=...,
    nOctaveLayers=...,
    contrastThreshold=...,
    edgeThreshold=...,
    sigma=...,
) -> retval:
    """
    .   @param nfeatures The number of best features to retain. The features are ranked by their scores
    .       (measured in SIFT algorithm as the local contrast)
    .
    .       @param nOctaveLayers The number of layers in each octave. 3 is the value used in D. Lowe paper. The
    .       number of octaves is computed automatically from the image resolution.
    .
    .       @param contrastThreshold The contrast threshold used to filter out weak features in semi-uniform
    .       (low-contrast) regions. The larger the threshold, the less features are produced by the detector.
    .
    .       @note The contrast threshold will be divided by nOctaveLayers when the filtering is applied. When
    .       nOctaveLayers is set to default and if you want to use the value used in D. Lowe paper, 0.03, set
    .       this argument to 0.09.
    .
    .       @param edgeThreshold The threshold used to filter out edge-like features. Note that the its meaning
    .       is different from the contrastThreshold, i.e. the larger the edgeThreshold, the less features are
    .       filtered out (more features are retained).
    .
    .       @param sigma The sigma of the Gaussian applied to the input image at the octave \#0. If your image
    .       is captured with a weak camera with soft lenses, you might want to reduce the number.



    SIFT_create(nfeatures, nOctaveLayers, contrastThreshold, edgeThreshold, sigma, descriptorType) -> retval
    .   @brief Create SIFT with specified descriptorType.
    .       @param nfeatures The number of best features to retain. The features are ranked by their scores
    .       (measured in SIFT algorithm as the local contrast)
    .
    .       @param nOctaveLayers The number of layers in each octave. 3 is the value used in D. Lowe paper. The
    .       number of octaves is computed automatically from the image resolution.
    .
    .       @param contrastThreshold The contrast threshold used to filter out weak features in semi-uniform
    .       (low-contrast) regions. The larger the threshold, the less features are produced by the detector.
    .
    .       @note The contrast threshold will be divided by nOctaveLayers when the filtering is applied. When
    .       nOctaveLayers is set to default and if you want to use the value used in D. Lowe paper, 0.03, set
    .       this argument to 0.09.
    .
    .       @param edgeThreshold The threshold used to filter out edge-like features. Note that the its meaning
    .       is different from the contrastThreshold, i.e. the larger the edgeThreshold, the less features are
    .       filtered out (more features are retained).
    .
    .       @param sigma The sigma of the Gaussian applied to the input image at the octave \#0. If your image
    .       is captured with a weak camera with soft lenses, you might want to reduce the number.
    .
    .       @param descriptorType The type of descriptors. Only CV_32F and CV_8U are supported.
    """
    ...

def SVBackSubst(w, u, vt, rhs, dst=...) -> dst:
    """
    .   wrap SVD::backSubst
    """
    ...

def SVDecomp(src, w=..., u=..., vt=..., flags=...) -> Tuple[w, u, vt]:
    """
    .   wrap SVD::compute
    """
    ...

def Scharr(src, ddepth, dx, dy, dst=..., scale=..., delta=..., borderType=...) -> dst:
    """
    .   @brief Calculates the first x- or y- image derivative using Scharr operator.
    .
    .   The function computes the first x- or y- spatial image derivative using the Scharr operator. The
    .   call
    .
    .   \f[\texttt{Scharr(src, dst, ddepth, dx, dy, scale, delta, borderType)}\f]
    .
    .   is equivalent to
    .
    .   \f[\texttt{Sobel(src, dst, ddepth, dx, dy, FILTER_SCHARR, scale, delta, borderType)} .\f]
    .
    .   @param src input image.
    .   @param dst output image of the same size and the same number of channels as src.
    .   @param ddepth output image depth, see @ref filter_depths "combinations"
    .   @param dx order of the derivative x.
    .   @param dy order of the derivative y.
    .   @param scale optional scale factor for the computed derivative values; by default, no scaling is
    .   applied (see #getDerivKernels for details).
    .   @param delta optional delta value that is added to the results prior to storing them in dst.
    .   @param borderType pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not supported.
    .   @sa  cartToPolar
    """
    ...

def SimpleBlobDetector_create(parameters=...) -> retval:
    """
    .
    """
    ...

def Sobel(
    src, ddepth, dx, dy, dst=..., ksize=..., scale=..., delta=..., borderType=...
) -> dst:
    """
    .   @brief Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator.
    .
    .   In all cases except one, the \f$\texttt{ksize} \times \texttt{ksize}\f$ separable kernel is used to
    .   calculate the derivative. When \f$\texttt{ksize = 1}\f$, the \f$3 \times 1\f$ or \f$1 \times 3\f$
    .   kernel is used (that is, no Gaussian smoothing is done). `ksize = 1` can only be used for the first
    .   or the second x- or y- derivatives.
    .
    .   There is also the special value `ksize = #FILTER_SCHARR (-1)` that corresponds to the \f$3\times3\f$ Scharr
    .   filter that may give more accurate results than the \f$3\times3\f$ Sobel. The Scharr aperture is
    .
    .   \f[\vecthreethree{-3}{0}{3}{-10}{0}{10}{-3}{0}{3}\f]
    .
    .   for the x-derivative, or transposed for the y-derivative.
    .
    .   The function calculates an image derivative by convolving the image with the appropriate kernel:
    .
    .   \f[\texttt{dst} =  \frac{\partial^{xorder+yorder} \texttt{src}}{\partial x^{xorder} \partial y^{yorder}}\f]
    .
    .   The Sobel operators combine Gaussian smoothing and differentiation, so the result is more or less
    .   resistant to the noise. Most often, the function is called with ( xorder = 1, yorder = 0, ksize = 3)
    .   or ( xorder = 0, yorder = 1, ksize = 3) to calculate the first x- or y- image derivative. The first
    .   case corresponds to a kernel of:
    .
    .   \f[\vecthreethree{-1}{0}{1}{-2}{0}{2}{-1}{0}{1}\f]
    .
    .   The second case corresponds to a kernel of:
    .
    .   \f[\vecthreethree{-1}{-2}{-1}{0}{0}{0}{1}{2}{1}\f]
    .
    .   @param src input image.
    .   @param dst output image of the same size and the same number of channels as src .
    .   @param ddepth output image depth, see @ref filter_depths "combinations"; in the case of
    .       8-bit input images it will result in truncated derivatives.
    .   @param dx order of the derivative x.
    .   @param dy order of the derivative y.
    .   @param ksize size of the extended Sobel kernel; it must be 1, 3, 5, or 7.
    .   @param scale optional scale factor for the computed derivative values; by default, no scaling is
    .   applied (see #getDerivKernels for details).
    .   @param delta optional delta value that is added to the results prior to storing them in dst.
    .   @param borderType pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not supported.
    .   @sa  Scharr, Laplacian, sepFilter2D, filter2D, GaussianBlur, cartToPolar
    """
    ...

def SparsePyrLKOpticalFlow_create(
    winSize=..., maxLevel=..., crit=..., flags=..., minEigThreshold=...
) -> retval:
    """
    .
    """
    ...

def StereoBM_create(numDisparities=..., blockSize=...) -> retval:
    """
    .   @brief Creates StereoBM object
    .
    .       @param numDisparities the disparity search range. For each pixel algorithm will find the best
    .       disparity from 0 (default minimum disparity) to numDisparities. The search range can then be
    .       shifted by changing the minimum disparity.
    .       @param blockSize the linear size of the blocks compared by the algorithm. The size should be odd
    .       (as the block is centered at the current pixel). Larger block size implies smoother, though less
    .       accurate disparity map. Smaller block size gives more detailed disparity map, but there is higher
    .       chance for algorithm to find a wrong correspondence.
    .
    .       The function create StereoBM object. You can then call StereoBM::compute() to compute disparity for
    .       a specific stereo pair.
    """
    ...

def StereoSGBM_create(
    minDisparity=...,
    numDisparities=...,
    blockSize=...,
    P1=...,
    P2=...,
    disp12MaxDiff=...,
    preFilterCap=...,
    uniquenessRatio=...,
    speckleWindowSize=...,
    speckleRange=...,
    mode=...,
) -> retval:
    """
    .   @brief Creates StereoSGBM object
    .
    .       @param minDisparity Minimum possible disparity value. Normally, it is zero but sometimes
    .       rectification algorithms can shift images, so this parameter needs to be adjusted accordingly.
    .       @param numDisparities Maximum disparity minus minimum disparity. The value is always greater than
    .       zero. In the current implementation, this parameter must be divisible by 16.
    .       @param blockSize Matched block size. It must be an odd number \>=1 . Normally, it should be
    .       somewhere in the 3..11 range.
    .       @param P1 The first parameter controlling the disparity smoothness. See below.
    .       @param P2 The second parameter controlling the disparity smoothness. The larger the values are,
    .       the smoother the disparity is. P1 is the penalty on the disparity change by plus or minus 1
    .       between neighbor pixels. P2 is the penalty on the disparity change by more than 1 between neighbor
    .       pixels. The algorithm requires P2 \> P1 . See stereo_match.cpp sample where some reasonably good
    .       P1 and P2 values are shown (like 8\*number_of_image_channels\*blockSize\*blockSize and
    .       32\*number_of_image_channels\*blockSize\*blockSize , respectively).
    .       @param disp12MaxDiff Maximum allowed difference (in integer pixel units) in the left-right
    .       disparity check. Set it to a non-positive value to disable the check.
    .       @param preFilterCap Truncation value for the prefiltered image pixels. The algorithm first
    .       computes x-derivative at each pixel and clips its value by [-preFilterCap, preFilterCap] interval.
    .       The result values are passed to the Birchfield-Tomasi pixel cost function.
    .       @param uniquenessRatio Margin in percentage by which the best (minimum) computed cost function
    .       value should "win" the second best value to consider the found match correct. Normally, a value
    .       within the 5-15 range is good enough.
    .       @param speckleWindowSize Maximum size of smooth disparity regions to consider their noise speckles
    .       and invalidate. Set it to 0 to disable speckle filtering. Otherwise, set it somewhere in the
    .       50-200 range.
    .       @param speckleRange Maximum disparity variation within each connected component. If you do speckle
    .       filtering, set the parameter to a positive value, it will be implicitly multiplied by 16.
    .       Normally, 1 or 2 is good enough.
    .       @param mode Set it to StereoSGBM::MODE_HH to run the full-scale two-pass dynamic programming
    .       algorithm. It will consume O(W\*H\*numDisparities) bytes, which is large for 640x480 stereo and
    .       huge for HD-size pictures. By default, it is set to false .
    .
    .       The first constructor initializes StereoSGBM with all the default parameters. So, you only have to
    .       set StereoSGBM::numDisparities at minimum. The second constructor enables you to set each parameter
    .       to a custom value.
    """
    ...

def Stitcher_create(mode=...) -> retval:
    """
    .   @brief Creates a Stitcher configured in one of the stitching modes.
    .
    .       @param mode Scenario for stitcher operation. This is usually determined by source of images
    .       to stitch and their transformation. Default parameters will be chosen for operation in given
    .       scenario.
    .       @return Stitcher class instance.
    """
    ...

def TrackerGOTURN_create(parameters=...) -> retval:
    """
    .   @brief Constructor
    .       @param parameters GOTURN parameters TrackerGOTURN::Params
    """
    ...

def TrackerMIL_create(parameters=...) -> retval:
    """
    .   @brief Create MIL tracker instance
    .        *  @param parameters MIL parameters TrackerMIL::Params
    """
    ...

def UMat_context() -> retval:
    """
    .
    """
    ...

def UMat_queue() -> retval:
    """
    .
    """
    ...

def VariationalRefinement_create() -> retval:
    """
    .   @brief Creates an instance of VariationalRefinement
    """
    ...

def VideoWriter_fourcc(c1, c2, c3, c4) -> retval:
    """
    .   @brief Concatenates 4 chars to a fourcc code
    .
    .       @return a fourcc code
    .
    .       This static method constructs the fourcc code of the codec to be used in the constructor
    .       VideoWriter::VideoWriter or VideoWriter::open.
    """
    ...

def absdiff(src1: ndarray, src2: ndarray, dst: ndarray = ...) -> ndarray:
    """
    .   @brief Calculates the per-element absolute difference between two arrays or between an array and a scalar.
    .
    .   The function cv::absdiff calculates:
    .   *   Absolute difference between two arrays when they have the same
    .       size and type:
    .       \f[\texttt{dst}(I) =  \texttt{saturate} (| \texttt{src1}(I) -  \texttt{src2}(I)|)\f]
    .   *   Absolute difference between an array and a scalar when the second
    .       array is constructed from Scalar or has as many elements as the
    .       number of channels in `src1`:
    .       \f[\texttt{dst}(I) =  \texttt{saturate} (| \texttt{src1}(I) -  \texttt{src2} |)\f]
    .   *   Absolute difference between a scalar and an array when the first
    .       array is constructed from Scalar or has as many elements as the
    .       number of channels in `src2`:
    .       \f[\texttt{dst}(I) =  \texttt{saturate} (| \texttt{src1} -  \texttt{src2}(I) |)\f]
    .       where I is a multi-dimensional index of array elements. In case of
    .       multi-channel arrays, each channel is processed independently.
    .   @note Saturation is not applied when the arrays have the depth CV_32S.
    .   You may even get a negative value in the case of overflow.
    .   @param src1 first input array or a scalar.
    .   @param src2 second input array or a scalar.
    .   @param dst output array that has the same size and type as input arrays.
    .   @sa cv::abs(const Mat&)
    """
    ...

def accumulate(src, dst, mask=...) -> dst:
    """
    .   @brief Adds an image to the accumulator image.
    .
    .   The function adds src or some of its elements to dst :
    .
    .   \f[\texttt{dst} (x,y)  \leftarrow \texttt{dst} (x,y) +  \texttt{src} (x,y)  \quad \text{if} \quad \texttt{mask} (x,y)  \ne 0\f]
    .
    .   The function supports multi-channel images. Each channel is processed independently.
    .
    .   The function cv::accumulate can be used, for example, to collect statistics of a scene background
    .   viewed by a still camera and for the further foreground-background segmentation.
    .
    .   @param src Input image of type CV_8UC(n), CV_16UC(n), CV_32FC(n) or CV_64FC(n), where n is a positive integer.
    .   @param dst %Accumulator image with the same number of channels as input image, and a depth of CV_32F or CV_64F.
    .   @param mask Optional operation mask.
    .
    .   @sa  accumulateSquare, accumulateProduct, accumulateWeighted
    """
    ...

def accumulateProduct(src1, src2, dst, mask=...) -> dst:
    """
    .   @brief Adds the per-element product of two input images to the accumulator image.
    .
    .   The function adds the product of two images or their selected regions to the accumulator dst :
    .
    .   \f[\texttt{dst} (x,y)  \leftarrow \texttt{dst} (x,y) +  \texttt{src1} (x,y)  \cdot \texttt{src2} (x,y)  \quad \text{if} \quad \texttt{mask} (x,y)  \ne 0\f]
    .
    .   The function supports multi-channel images. Each channel is processed independently.
    .
    .   @param src1 First input image, 1- or 3-channel, 8-bit or 32-bit floating point.
    .   @param src2 Second input image of the same type and the same size as src1 .
    .   @param dst %Accumulator image with the same number of channels as input images, 32-bit or 64-bit
    .   floating-point.
    .   @param mask Optional operation mask.
    .
    .   @sa  accumulate, accumulateSquare, accumulateWeighted
    """
    ...

def accumulateSquare(src, dst, mask=...) -> dst:
    """
    .   @brief Adds the square of a source image to the accumulator image.
    .
    .   The function adds the input image src or its selected region, raised to a power of 2, to the
    .   accumulator dst :
    .
    .   \f[\texttt{dst} (x,y)  \leftarrow \texttt{dst} (x,y) +  \texttt{src} (x,y)^2  \quad \text{if} \quad \texttt{mask} (x,y)  \ne 0\f]
    .
    .   The function supports multi-channel images. Each channel is processed independently.
    .
    .   @param src Input image as 1- or 3-channel, 8-bit or 32-bit floating point.
    .   @param dst %Accumulator image with the same number of channels as input image, 32-bit or 64-bit
    .   floating-point.
    .   @param mask Optional operation mask.
    .
    .   @sa  accumulateSquare, accumulateProduct, accumulateWeighted
    """
    ...

def accumulateWeighted(src, dst, alpha, mask=...) -> dst:
    """
    .   @brief Updates a running average.
    .
    .   The function calculates the weighted sum of the input image src and the accumulator dst so that dst
    .   becomes a running average of a frame sequence:
    .
    .   \f[\texttt{dst} (x,y)  \leftarrow (1- \texttt{alpha} )  \cdot \texttt{dst} (x,y) +  \texttt{alpha} \cdot \texttt{src} (x,y)  \quad \text{if} \quad \texttt{mask} (x,y)  \ne 0\f]
    .
    .   That is, alpha regulates the update speed (how fast the accumulator "forgets" about earlier images).
    .   The function supports multi-channel images. Each channel is processed independently.
    .
    .   @param src Input image as 1- or 3-channel, 8-bit or 32-bit floating point.
    .   @param dst %Accumulator image with the same number of channels as input image, 32-bit or 64-bit
    .   floating-point.
    .   @param alpha Weight of the input image.
    .   @param mask Optional operation mask.
    .
    .   @sa  accumulate, accumulateSquare, accumulateProduct
    """
    ...

def adaptiveThreshold(
    src: ndarray,
    maxValue: float,
    adaptiveMethod: int,
    thresholdType: int,
    blockSize: int,
    C: float,
    dst: ndarray = ...,
) -> ndarray:
    """
    .   @brief Applies an adaptive threshold to an array.
    .
    .   The function transforms a grayscale image to a binary image according to the formulae:
    .   -   **THRESH_BINARY**
    .       \f[dst(x,y) =  \fork{\texttt{maxValue}}{if \(src(x,y) > T(x,y)\)}{0}{otherwise}\f]
    .   -   **THRESH_BINARY_INV**
    .       \f[dst(x,y) =  \fork{0}{if \(src(x,y) > T(x,y)\)}{\texttt{maxValue}}{otherwise}\f]
    .   where \f$T(x,y)\f$ is a threshold calculated individually for each pixel (see adaptiveMethod parameter).
    .
    .   The function can process the image in-place.
    .
    .   @param src Source 8-bit single-channel image.
    .   @param dst Destination image of the same size and the same type as src.
    .   @param maxValue Non-zero value assigned to the pixels for which the condition is satisfied
    .   @param adaptiveMethod Adaptive thresholding algorithm to use, see #AdaptiveThresholdTypes.
    .   The #BORDER_REPLICATE | #BORDER_ISOLATED is used to process boundaries.
    .   @param thresholdType Thresholding type that must be either #THRESH_BINARY or #THRESH_BINARY_INV,
    .   see #ThresholdTypes.
    .   @param blockSize Size of a pixel neighborhood that is used to calculate a threshold value for the
    .   pixel: 3, 5, 7, and so on.
    .   @param C Constant subtracted from the mean or weighted mean (see the details below). Normally, it
    .   is positive but may be zero or negative as well.
    .
    .   @sa  threshold, blur, GaussianBlur
    """
    ...

def add(src1, src2, dst=..., mask=..., dtype=...) -> dst:
    """
    .   @brief Calculates the per-element sum of two arrays or an array and a scalar.
    .
    .   The function add calculates:
    .   - Sum of two arrays when both input arrays have the same size and the same number of channels:
    .   \f[\texttt{dst}(I) =  \texttt{saturate} ( \texttt{src1}(I) +  \texttt{src2}(I)) \quad \texttt{if mask}(I) \ne0\f]
    .   - Sum of an array and a scalar when src2 is constructed from Scalar or has the same number of
    .   elements as `src1.channels()`:
    .   \f[\texttt{dst}(I) =  \texttt{saturate} ( \texttt{src1}(I) +  \texttt{src2} ) \quad \texttt{if mask}(I) \ne0\f]
    .   - Sum of a scalar and an array when src1 is constructed from Scalar or has the same number of
    .   elements as `src2.channels()`:
    .   \f[\texttt{dst}(I) =  \texttt{saturate} ( \texttt{src1} +  \texttt{src2}(I) ) \quad \texttt{if mask}(I) \ne0\f]
    .   where `I` is a multi-dimensional index of array elements. In case of multi-channel arrays, each
    .   channel is processed independently.
    .
    .   The first function in the list above can be replaced with matrix expressions:
    .   @code{.cpp}
    .       dst = src1 + src2;
    .       dst += src1; // equivalent to add(dst, src1, dst);
    .   @endcode
    .   The input arrays and the output array can all have the same or different depths. For example, you
    .   can add a 16-bit unsigned array to a 8-bit signed array and store the sum as a 32-bit
    .   floating-point array. Depth of the output array is determined by the dtype parameter. In the second
    .   and third cases above, as well as in the first case, when src1.depth() == src2.depth(), dtype can
    .   be set to the default -1. In this case, the output array will have the same depth as the input
    .   array, be it src1, src2 or both.
    .   @note Saturation is not applied when the output array has the depth CV_32S. You may even get
    .   result of an incorrect sign in the case of overflow.
    .   @param src1 first input array or a scalar.
    .   @param src2 second input array or a scalar.
    .   @param dst output array that has the same size and number of channels as the input array(s); the
    .   depth is defined by dtype or src1/src2.
    .   @param mask optional operation mask - 8-bit single channel array, that specifies elements of the
    .   output array to be changed.
    .   @param dtype optional depth of the output array (see the discussion below).
    .   @sa subtract, addWeighted, scaleAdd, Mat::convertTo
    """
    ...

def addText(
    img,
    text,
    org,
    nameFont,
    pointSize=...,
    color=...,
    weight=...,
    style=...,
    spacing=...,
) -> None:
    """
    .   @brief Draws a text on the image.
    .
    .   @param img 8-bit 3-channel image where the text should be drawn.
    .   @param text Text to write on an image.
    .   @param org Point(x,y) where the text should start on an image.
    .   @param nameFont Name of the font. The name should match the name of a system font (such as
    .   *Times*). If the font is not found, a default one is used.
    .   @param pointSize Size of the font. If not specified, equal zero or negative, the point size of the
    .   font is set to a system-dependent default value. Generally, this is 12 points.
    .   @param color Color of the font in BGRA where A = 255 is fully transparent.
    .   @param weight Font weight. Available operation flags are : cv::QtFontWeights You can also specify a positive integer for better control.
    .   @param style Font style. Available operation flags are : cv::QtFontStyles
    .   @param spacing Spacing between characters. It can be negative or positive.
    """
    ...

def addWeighted(src1, alpha, src2, beta, gamma, dst=..., dtype=...) -> dst:
    """
    .   @brief Calculates the weighted sum of two arrays.
    .
    .   The function addWeighted calculates the weighted sum of two arrays as follows:
    .   \f[\texttt{dst} (I)= \texttt{saturate} ( \texttt{src1} (I)* \texttt{alpha} +  \texttt{src2} (I)* \texttt{beta} +  \texttt{gamma} )\f]
    .   where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each
    .   channel is processed independently.
    .   The function can be replaced with a matrix expression:
    .   @code{.cpp}
    .       dst = src1*alpha + src2*beta + gamma;
    .   @endcode
    .   @note Saturation is not applied when the output array has the depth CV_32S. You may even get
    .   result of an incorrect sign in the case of overflow.
    .   @param src1 first input array.
    .   @param alpha weight of the first array elements.
    .   @param src2 second input array of the same size and channel number as src1.
    .   @param beta weight of the second array elements.
    .   @param gamma scalar added to each sum.
    .   @param dst output array that has the same size and number of channels as the input arrays.
    .   @param dtype optional depth of the output array; when both input arrays have the same depth, dtype
    .   can be set to -1, which will be equivalent to src1.depth().
    .   @sa  add, subtract, scaleAdd, Mat::convertTo
    """
    ...

def applyColorMap(src, colormap, dst=...) -> dst:
    """
    .   @brief Applies a GNU Octave/MATLAB equivalent colormap on a given image.
    .
    .   @param src The source image, grayscale or colored of type CV_8UC1 or CV_8UC3.
    .   @param dst The result is the colormapped source image. Note: Mat::create is called on dst.
    .   @param colormap The colormap to apply, see #ColormapTypes



    applyColorMap(src, userColor, dst=...) -> dst
    .   @brief Applies a user colormap on a given image.
    .
    .   @param src The source image, grayscale or colored of type CV_8UC1 or CV_8UC3.
    .   @param dst The result is the colormapped source image. Note: Mat::create is called on dst.
    .   @param userColor The colormap to apply of type CV_8UC1 or CV_8UC3 and size 256
    """
    ...

def approxPolyDP(curve, epsilon, closed, approxCurve=...) -> approxCurve:
    """
    .   @brief Approximates a polygonal curve(s) with the specified precision.
    .
    .   The function cv::approxPolyDP approximates a curve or a polygon with another curve/polygon with less
    .   vertices so that the distance between them is less or equal to the specified precision. It uses the
    .   Douglas-Peucker algorithm <http://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm>
    .
    .   @param curve Input vector of a 2D point stored in std::vector or Mat
    .   @param approxCurve Result of the approximation. The type should match the type of the input curve.
    .   @param epsilon Parameter specifying the approximation accuracy. This is the maximum distance
    .   between the original curve and its approximation.
    .   @param closed If true, the approximated curve is closed (its first and last vertices are
    .   connected). Otherwise, it is not closed.
    """
    ...

def arcLength(curve, closed) -> retval:
    """
    .   @brief Calculates a contour perimeter or a curve length.
    .
    .   The function computes a curve length or a closed contour perimeter.
    .
    .   @param curve Input vector of 2D points, stored in std::vector or Mat.
    .   @param closed Flag indicating whether the curve is closed or not.
    """
    ...

def arrowedLine(
    img, pt1, pt2, color, thickness=..., line_type=..., shift=..., tipLength=...
) -> img:
    """
    .   @brief Draws a arrow segment pointing from the first point to the second one.
    .
    .   The function cv::arrowedLine draws an arrow between pt1 and pt2 points in the image. See also #line.
    .
    .   @param img Image.
    .   @param pt1 The point the arrow starts from.
    .   @param pt2 The point the arrow points to.
    .   @param color Line color.
    .   @param thickness Line thickness.
    .   @param line_type Type of the line. See #LineTypes
    .   @param shift Number of fractional bits in the point coordinates.
    .   @param tipLength The length of the arrow tip in relation to the arrow length
    """
    ...

def batchDistance(
    src1,
    src2,
    dtype,
    dist=...,
    nidx=...,
    normType=...,
    K=...,
    mask=...,
    update=...,
    crosscheck=...,
) -> Tuple[dist, nidx]:
    """
    .   @brief naive nearest neighbor finder
    .
    .   see http://en.wikipedia.org/wiki/Nearest_neighbor_search
    .   @todo document
    """
    ...

def bilateralFilter(src, d, sigmaColor, sigmaSpace, dst=..., borderType=...) -> dst:
    """
    .   @brief Applies the bilateral filter to an image.
    .
    .   The function applies bilateral filtering to the input image, as described in
    .   http://www.dai.ed.ac.uk/CVonline/LOCAL_COPIES/MANDUCHI1/Bilateral_Filtering.html
    .   bilateralFilter can reduce unwanted noise very well while keeping edges fairly sharp. However, it is
    .   very slow compared to most filters.
    .
    .   _Sigma values_: For simplicity, you can set the 2 sigma values to be the same. If they are small (\<
    .   10), the filter will not have much effect, whereas if they are large (\> 150), they will have a very
    .   strong effect, making the image look "cartoonish".
    .
    .   _Filter size_: Large filters (d \> 5) are very slow, so it is recommended to use d=5 for real-time
    .   applications, and perhaps d=9 for offline applications that need heavy noise filtering.
    .
    .   This filter does not work inplace.
    .   @param src Source 8-bit or floating-point, 1-channel or 3-channel image.
    .   @param dst Destination image of the same size and type as src .
    .   @param d Diameter of each pixel neighborhood that is used during filtering. If it is non-positive,
    .   it is computed from sigmaSpace.
    .   @param sigmaColor Filter sigma in the color space. A larger value of the parameter means that
    .   farther colors within the pixel neighborhood (see sigmaSpace) will be mixed together, resulting
    .   in larger areas of semi-equal color.
    .   @param sigmaSpace Filter sigma in the coordinate space. A larger value of the parameter means that
    .   farther pixels will influence each other as long as their colors are close enough (see sigmaColor
    .   ). When d\>0, it specifies the neighborhood size regardless of sigmaSpace. Otherwise, d is
    .   proportional to sigmaSpace.
    .   @param borderType border mode used to extrapolate pixels outside of the image, see #BorderTypes
    """
    ...

def bitwise_and(
    src1: ndarray, src2: ndarray, dst: ndarray = ..., mask: ndarray = ...
) -> ndarray:
    """
    .   @brief computes bitwise conjunction of the two arrays (dst = src1 & src2)
    .   Calculates the per-element bit-wise conjunction of two arrays or an
    .   array and a scalar.
    .
    .   The function cv::bitwise_and calculates the per-element bit-wise logical conjunction for:
    .   *   Two arrays when src1 and src2 have the same size:
    .       \f[\texttt{dst} (I) =  \texttt{src1} (I)  \wedge \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0\f]
    .   *   An array and a scalar when src2 is constructed from Scalar or has
    .       the same number of elements as `src1.channels()`:
    .       \f[\texttt{dst} (I) =  \texttt{src1} (I)  \wedge \texttt{src2} \quad \texttt{if mask} (I) \ne0\f]
    .   *   A scalar and an array when src1 is constructed from Scalar or has
    .       the same number of elements as `src2.channels()`:
    .       \f[\texttt{dst} (I) =  \texttt{src1}  \wedge \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0\f]
    .   In case of floating-point arrays, their machine-specific bit
    .   representations (usually IEEE754-compliant) are used for the operation.
    .   In case of multi-channel arrays, each channel is processed
    .   independently. In the second and third cases above, the scalar is first
    .   converted to the array type.
    .   @param src1 first input array or a scalar.
    .   @param src2 second input array or a scalar.
    .   @param dst output array that has the same size and type as the input
    .   arrays.
    .   @param mask optional operation mask, 8-bit single channel array, that
    .   specifies elements of the output array to be changed.
    """
    ...

def bitwise_not(src, dst=..., mask=...) -> dst:
    """
    .   @brief  Inverts every bit of an array.
    .
    .   The function cv::bitwise_not calculates per-element bit-wise inversion of the input
    .   array:
    .   \f[\texttt{dst} (I) =  \neg \texttt{src} (I)\f]
    .   In case of a floating-point input array, its machine-specific bit
    .   representation (usually IEEE754-compliant) is used for the operation. In
    .   case of multi-channel arrays, each channel is processed independently.
    .   @param src input array.
    .   @param dst output array that has the same size and type as the input
    .   array.
    .   @param mask optional operation mask, 8-bit single channel array, that
    .   specifies elements of the output array to be changed.
    """
    ...

def bitwise_or(src1, src2, dst=..., mask=...) -> dst:
    """
    .   @brief Calculates the per-element bit-wise disjunction of two arrays or an
    .   array and a scalar.
    .
    .   The function cv::bitwise_or calculates the per-element bit-wise logical disjunction for:
    .   *   Two arrays when src1 and src2 have the same size:
    .       \f[\texttt{dst} (I) =  \texttt{src1} (I)  \vee \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0\f]
    .   *   An array and a scalar when src2 is constructed from Scalar or has
    .       the same number of elements as `src1.channels()`:
    .       \f[\texttt{dst} (I) =  \texttt{src1} (I)  \vee \texttt{src2} \quad \texttt{if mask} (I) \ne0\f]
    .   *   A scalar and an array when src1 is constructed from Scalar or has
    .       the same number of elements as `src2.channels()`:
    .       \f[\texttt{dst} (I) =  \texttt{src1}  \vee \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0\f]
    .   In case of floating-point arrays, their machine-specific bit
    .   representations (usually IEEE754-compliant) are used for the operation.
    .   In case of multi-channel arrays, each channel is processed
    .   independently. In the second and third cases above, the scalar is first
    .   converted to the array type.
    .   @param src1 first input array or a scalar.
    .   @param src2 second input array or a scalar.
    .   @param dst output array that has the same size and type as the input
    .   arrays.
    .   @param mask optional operation mask, 8-bit single channel array, that
    .   specifies elements of the output array to be changed.
    """
    ...

def bitwise_xor(src1, src2, dst=..., mask=...) -> dst:
    """
    .   @brief Calculates the per-element bit-wise "exclusive or" operation on two
    .   arrays or an array and a scalar.
    .
    .   The function cv::bitwise_xor calculates the per-element bit-wise logical "exclusive-or"
    .   operation for:
    .   *   Two arrays when src1 and src2 have the same size:
    .       \f[\texttt{dst} (I) =  \texttt{src1} (I)  \oplus \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0\f]
    .   *   An array and a scalar when src2 is constructed from Scalar or has
    .       the same number of elements as `src1.channels()`:
    .       \f[\texttt{dst} (I) =  \texttt{src1} (I)  \oplus \texttt{src2} \quad \texttt{if mask} (I) \ne0\f]
    .   *   A scalar and an array when src1 is constructed from Scalar or has
    .       the same number of elements as `src2.channels()`:
    .       \f[\texttt{dst} (I) =  \texttt{src1}  \oplus \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0\f]
    .   In case of floating-point arrays, their machine-specific bit
    .   representations (usually IEEE754-compliant) are used for the operation.
    .   In case of multi-channel arrays, each channel is processed
    .   independently. In the 2nd and 3rd cases above, the scalar is first
    .   converted to the array type.
    .   @param src1 first input array or a scalar.
    .   @param src2 second input array or a scalar.
    .   @param dst output array that has the same size and type as the input
    .   arrays.
    .   @param mask optional operation mask, 8-bit single channel array, that
    .   specifies elements of the output array to be changed.
    """
    ...

def blendLinear(src1, src2, weights1, weights2, dst=...) -> dst:
    """
    .
    """
    ...

def blur(
    src: ndarray,
    ksize: Tuple[int, int],
    dst: ndarray = ...,
    anchor: Tuple[int, int] = ...,
    borderType: int = ...,
) -> ndarray:
    """
    .   @brief Blurs an image using the normalized box filter.
    .
    .   The function smooths an image using the kernel:
    .
    .   \f[\texttt{K} =  \frac{1}{\texttt{ksize.width*ksize.height}} \begin{bmatrix} 1 & 1 & 1 &  \cdots & 1 & 1  \\ 1 & 1 & 1 &  \cdots & 1 & 1  \\ \hdotsfor{6} \\ 1 & 1 & 1 &  \cdots & 1 & 1  \\ \end{bmatrix}\f]
    .
    .   The call `blur(src, dst, ksize, anchor, borderType)` is equivalent to `boxFilter(src, dst, src.type(), ksize,
    .   anchor, true, borderType)`.
    .
    .   @param src input image; it can have any number of channels, which are processed independently, but
    .   the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.
    .   @param dst output image of the same size and type as src.
    .   @param ksize blurring kernel size.
    .   @param anchor anchor point; default value Point(-1,-1) means that the anchor is at the kernel
    .   center.
    .   @param borderType border mode used to extrapolate pixels outside of the image, see #BorderTypes. #BORDER_WRAP is not supported.
    .   @sa  boxFilter, bilateralFilter, GaussianBlur, medianBlur
    """
    ...

def borderInterpolate(p, len, borderType) -> retval:
    """
    .   @brief Computes the source location of an extrapolated pixel.
    .
    .   The function computes and returns the coordinate of a donor pixel corresponding to the specified
    .   extrapolated pixel when using the specified extrapolation border mode. For example, if you use
    .   cv::BORDER_WRAP mode in the horizontal direction, cv::BORDER_REFLECT_101 in the vertical direction and
    .   want to compute value of the "virtual" pixel Point(-5, 100) in a floating-point image img , it
    .   looks like:
    .   @code{.cpp}
    .       float val = img.at<float>(borderInterpolate(100, img.rows, cv::BORDER_REFLECT_101),
    .                                 borderInterpolate(-5, img.cols, cv::BORDER_WRAP));
    .   @endcode
    .   Normally, the function is not called directly. It is used inside filtering functions and also in
    .   copyMakeBorder.
    .   @param p 0-based coordinate of the extrapolated pixel along one of the axes, likely \<0 or \>= len
    .   @param len Length of the array along the corresponding axis.
    .   @param borderType Border type, one of the #BorderTypes, except for #BORDER_TRANSPARENT and
    .   #BORDER_ISOLATED . When borderType==#BORDER_CONSTANT , the function always returns -1, regardless
    .   of p and len.
    .
    .   @sa copyMakeBorder
    """
    ...

def boundingRect(array: ndarray) -> Tuple[int, int, int, int]:
    """
    .   @brief Calculates the up-right bounding rectangle of a point set or non-zero pixels of gray-scale image.
    .
    .   The function calculates and returns the minimal up-right bounding rectangle for the specified point set or
    .   non-zero pixels of gray-scale image.
    .
    .   @param array Input gray-scale image or 2D point set, stored in std::vector or Mat.
    """
    ...

def boxFilter(
    src, ddepth, ksize, dst=..., anchor=..., normalize=..., borderType=...
) -> dst:
    """
    .   @brief Blurs an image using the box filter.
    .
    .   The function smooths an image using the kernel:
    .
    .   \f[\texttt{K} =  \alpha \begin{bmatrix} 1 & 1 & 1 &  \cdots & 1 & 1  \\ 1 & 1 & 1 &  \cdots & 1 & 1  \\ \hdotsfor{6} \\ 1 & 1 & 1 &  \cdots & 1 & 1 \end{bmatrix}\f]
    .
    .   where
    .
    .   \f[\alpha = \begin{cases} \frac{1}{\texttt{ksize.width*ksize.height}} & \texttt{when } \texttt{normalize=true}  \\1 & \texttt{otherwise}\end{cases}\f]
    .
    .   Unnormalized box filter is useful for computing various integral characteristics over each pixel
    .   neighborhood, such as covariance matrices of image derivatives (used in dense optical flow
    .   algorithms, and so on). If you need to compute pixel sums over variable-size windows, use #integral.
    .
    .   @param src input image.
    .   @param dst output image of the same size and type as src.
    .   @param ddepth the output image depth (-1 to use src.depth()).
    .   @param ksize blurring kernel size.
    .   @param anchor anchor point; default value Point(-1,-1) means that the anchor is at the kernel
    .   center.
    .   @param normalize flag, specifying whether the kernel is normalized by its area or not.
    .   @param borderType border mode used to extrapolate pixels outside of the image, see #BorderTypes. #BORDER_WRAP is not supported.
    .   @sa  blur, bilateralFilter, GaussianBlur, medianBlur, integral
    """
    ...

def boxPoints(box, points=...) -> points:
    """
    .   @brief Finds the four vertices of a rotated rect. Useful to draw the rotated rectangle.
    .
    .   The function finds the four vertices of a rotated rectangle. This function is useful to draw the
    .   rectangle. In C++, instead of using this function, you can directly use RotatedRect::points method. Please
    .   visit the @ref tutorial_bounding_rotated_ellipses "tutorial on Creating Bounding rotated boxes and ellipses for contours" for more information.
    .
    .   @param box The input rotated rectangle. It may be the output of
    .   @param points The output array of four vertices of rectangles.
    """
    ...

def buildOpticalFlowPyramid(
    img,
    winSize,
    maxLevel,
    pyramid=...,
    withDerivatives=...,
    pyrBorder=...,
    derivBorder=...,
    tryReuseInputImage=...,
) -> Tuple[retval, pyramid]:
    """
    .   @brief Constructs the image pyramid which can be passed to calcOpticalFlowPyrLK.
    .
    .   @param img 8-bit input image.
    .   @param pyramid output pyramid.
    .   @param winSize window size of optical flow algorithm. Must be not less than winSize argument of
    .   calcOpticalFlowPyrLK. It is needed to calculate required padding for pyramid levels.
    .   @param maxLevel 0-based maximal pyramid level number.
    .   @param withDerivatives set to precompute gradients for the every pyramid level. If pyramid is
    .   constructed without the gradients then calcOpticalFlowPyrLK will calculate them internally.
    .   @param pyrBorder the border mode for pyramid layers.
    .   @param derivBorder the border mode for gradients.
    .   @param tryReuseInputImage put ROI of input image into the pyramid if possible. You can pass false
    .   to force data copying.
    .   @return number of levels in constructed pyramid. Can be less than maxLevel.
    """
    ...

def calcBackProject(images, channels, hist, ranges, scale, dst=...) -> dst:
    """
    .   @overload
    """
    ...

def calcCovarMatrix(samples, mean, flags, covar=..., ctype=...) -> Tuple[covar, mean]:
    """
    .   @overload
    .   @note use #COVAR_ROWS or #COVAR_COLS flag
    .   @param samples samples stored as rows/columns of a single matrix.
    .   @param covar output covariance matrix of the type ctype and square size.
    .   @param mean input or output (depending on the flags) array as the average value of the input vectors.
    .   @param flags operation flags as a combination of #CovarFlags
    .   @param ctype type of the matrixl; it equals 'CV_64F' by default.
    """
    ...

def calcHist(
    images: ndarray,
    channels: Tuple[int, ...],
    mask: Optional[ndarray],
    histSize: Tuple[int],
    ranges: Tuple[int, int],
    hist: ndarray = ...,
    accumulate: bool = ...,
) -> ndarray:
    """
    .   @overload
    """
    ...

def calcOpticalFlowFarneback(
    prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags
) -> flow:
    """
    .   @brief Computes a dense optical flow using the Gunnar Farneback's algorithm.
    .
    .   @param prev first 8-bit single-channel input image.
    .   @param next second input image of the same size and the same type as prev.
    .   @param flow computed flow image that has the same size as prev and type CV_32FC2.
    .   @param pyr_scale parameter, specifying the image scale (\<1) to build pyramids for each image;
    .   pyr_scale=0.5 means a classical pyramid, where each next layer is twice smaller than the previous
    .   one.
    .   @param levels number of pyramid layers including the initial image; levels=1 means that no extra
    .   layers are created and only the original images are used.
    .   @param winsize averaging window size; larger values increase the algorithm robustness to image
    .   noise and give more chances for fast motion detection, but yield more blurred motion field.
    .   @param iterations number of iterations the algorithm does at each pyramid level.
    .   @param poly_n size of the pixel neighborhood used to find polynomial expansion in each pixel;
    .   larger values mean that the image will be approximated with smoother surfaces, yielding more
    .   robust algorithm and more blurred motion field, typically poly_n =5 or 7.
    .   @param poly_sigma standard deviation of the Gaussian that is used to smooth derivatives used as a
    .   basis for the polynomial expansion; for poly_n=5, you can set poly_sigma=1.1, for poly_n=7, a
    .   good value would be poly_sigma=1.5.
    .   @param flags operation flags that can be a combination of the following:
    .    -   **OPTFLOW_USE_INITIAL_FLOW** uses the input flow as an initial flow approximation.
    .    -   **OPTFLOW_FARNEBACK_GAUSSIAN** uses the Gaussian \f$\texttt{winsize}\times\texttt{winsize}\f$
    .        filter instead of a box filter of the same size for optical flow estimation; usually, this
    .        option gives z more accurate flow than with a box filter, at the cost of lower speed;
    .        normally, winsize for a Gaussian window should be set to a larger value to achieve the same
    .        level of robustness.
    .
    .   The function finds an optical flow for each prev pixel using the @cite Farneback2003 algorithm so that
    .
    .   \f[\texttt{prev} (y,x)  \sim \texttt{next} ( y + \texttt{flow} (y,x)[1],  x + \texttt{flow} (y,x)[0])\f]
    .
    .   @note
    .
    .   -   An example using the optical flow algorithm described by Gunnar Farneback can be found at
    .       opencv_source_code/samples/cpp/fback.cpp
    .   -   (Python) An example using the optical flow algorithm described by Gunnar Farneback can be
    .       found at opencv_source_code/samples/python/opt_flow.py
    """
    ...

def calcOpticalFlowPyrLK(
    prevImg,
    nextImg,
    prevPts,
    nextPts,
    status=...,
    err=...,
    winSize=...,
    maxLevel=...,
    criteria=...,
    flags=...,
    minEigThreshold=...,
) -> Tuple[s, err]:
    """
    .   @brief Calculates an optical flow for a sparse feature set using the iterative Lucas-Kanade method with
    .   pyramids.
    .
    .   @param prevImg first 8-bit input image or pyramid constructed by buildOpticalFlowPyramid.
    .   @param nextImg second input image or pyramid of the same size and the same type as prevImg.
    .   @param prevPts vector of 2D points for which the flow needs to be found; point coordinates must be
    .   single-precision floating-point numbers.
    .   @param nextPts output vector of 2D points (with single-precision floating-point coordinates)
    .   containing the calculated new positions of input features in the second image; when
    .   OPTFLOW_USE_INITIAL_FLOW flag is passed, the vector must have the same size as in the input.
    .   @param status output status vector (of unsigned chars); each element of the vector is set to 1 if
    .   the flow for the corresponding features has been found, otherwise, it is set to 0.
    .   @param err output vector of errors; each element of the vector is set to an error for the
    .   corresponding feature, type of the error measure can be set in flags parameter; if the flow wasn't
    .   found then the error is not defined (use the status parameter to find such cases).
    .   @param winSize size of the search window at each pyramid level.
    .   @param maxLevel 0-based maximal pyramid level number; if set to 0, pyramids are not used (single
    .   level), if set to 1, two levels are used, and so on; if pyramids are passed to input then
    .   algorithm will use as many levels as pyramids have but no more than maxLevel.
    .   @param criteria parameter, specifying the termination criteria of the iterative search algorithm
    .   (after the specified maximum number of iterations criteria.maxCount or when the search window
    .   moves by less than criteria.epsilon.
    .   @param flags operation flags:
    .    -   **OPTFLOW_USE_INITIAL_FLOW** uses initial estimations, stored in nextPts; if the flag is
    .        not set, then prevPts is copied to nextPts and is considered the initial estimate.
    .    -   **OPTFLOW_LK_GET_MIN_EIGENVALS** use minimum eigen values as an error measure (see
    .        minEigThreshold description); if the flag is not set, then L1 distance between patches
    .        around the original and a moved point, divided by number of pixels in a window, is used as a
    .        error measure.
    .   @param minEigThreshold the algorithm calculates the minimum eigen value of a 2x2 normal matrix of
    .   optical flow equations (this matrix is called a spatial gradient matrix in @cite Bouguet00), divided
    .   by number of pixels in a window; if this value is less than minEigThreshold, then a corresponding
    .   feature is filtered out and its flow is not processed, so it allows to remove bad points and get a
    .   performance boost.
    .
    .   The function implements a sparse iterative version of the Lucas-Kanade optical flow in pyramids. See
    .   @cite Bouguet00 . The function is parallelized with the TBB library.
    .
    .   @note
    .
    .   -   An example using the Lucas-Kanade optical flow algorithm can be found at
    .       opencv_source_code/samples/cpp/lkdemo.cpp
    .   -   (Python) An example using the Lucas-Kanade optical flow algorithm can be found at
    .       opencv_source_code/samples/python/lk_track.py
    .   -   (Python) An example using the Lucas-Kanade tracker for homography matching can be found at
    .       opencv_source_code/samples/python/lk_homography.py
    """
    ...

def calibrateCamera(
    objectPoints,
    imagePoints,
    imageSize,
    cameraMatrix,
    distCoeffs,
    rvecs=...,
    tvecs=...,
    flags=...,
    criteria=...,
) -> Tuple[s, tvecs]:
    """
    .   @overload
    """
    ...

def calibrateCameraExtended(
    objectPoints,
    imagePoints,
    imageSize,
    cameraMatrix,
    distCoeffs,
    rvecs=...,
    tvecs=...,
    stdDeviationsIntrinsics=...,
    stdDeviationsExtrinsics=...,
    perViewErrors=...,
    flags=...,
    criteria=...,
) -> Tuple[stdDeviationsExtrinsics, perViewErrors]:
    """
    .   @brief Finds the camera intrinsic and extrinsic parameters from several views of a calibration
    .   pattern.
    .
    .   @param objectPoints In the new interface it is a vector of vectors of calibration pattern points in
    .   the calibration pattern coordinate space (e.g. std::vector<std::vector<cv::Vec3f>>). The outer
    .   vector contains as many elements as the number of pattern views. If the same calibration pattern
    .   is shown in each view and it is fully visible, all the vectors will be the same. Although, it is
    .   possible to use partially occluded patterns or even different patterns in different views. Then,
    .   the vectors will be different. Although the points are 3D, they all lie in the calibration pattern's
    .   XY coordinate plane (thus 0 in the Z-coordinate), if the used calibration pattern is a planar rig.
    .   In the old interface all the vectors of object points from different views are concatenated
    .   together.
    .   @param imagePoints In the new interface it is a vector of vectors of the projections of calibration
    .   pattern points (e.g. std::vector<std::vector<cv::Vec2f>>). imagePoints.size() and
    .   objectPoints.size(), and imagePoints[i].size() and objectPoints[i].size() for each i, must be equal,
    .   respectively. In the old interface all the vectors of object points from different views are
    .   concatenated together.
    .   @param imageSize Size of the image used only to initialize the camera intrinsic matrix.
    .   @param cameraMatrix Input/output 3x3 floating-point camera intrinsic matrix
    .   \f$\cameramatrix{A}\f$ . If @ref CALIB_USE_INTRINSIC_GUESS
    .   and/or @ref CALIB_FIX_ASPECT_RATIO are specified, some or all of fx, fy, cx, cy must be
    .   initialized before calling the function.
    .   @param distCoeffs Input/output vector of distortion coefficients
    .   \f$\distcoeffs\f$.
    .   @param rvecs Output vector of rotation vectors (@ref Rodrigues ) estimated for each pattern view
    .   (e.g. std::vector<cv::Mat>>). That is, each i-th rotation vector together with the corresponding
    .   i-th translation vector (see the next output parameter description) brings the calibration pattern
    .   from the object coordinate space (in which object points are specified) to the camera coordinate
    .   space. In more technical terms, the tuple of the i-th rotation and translation vector performs
    .   a change of basis from object coordinate space to camera coordinate space. Due to its duality, this
    .   tuple is equivalent to the position of the calibration pattern with respect to the camera coordinate
    .   space.
    .   @param tvecs Output vector of translation vectors estimated for each pattern view, see parameter
    .   describtion above.
    .   @param stdDeviationsIntrinsics Output vector of standard deviations estimated for intrinsic
    .   parameters. Order of deviations values:
    .   \f$(f_x, f_y, c_x, c_y, k_1, k_2, p_1, p_2, k_3, k_4, k_5, k_6 , s_1, s_2, s_3,
    .    s_4, \tau_x, \tau_y)\f$ If one of parameters is not estimated, it's deviation is equals to zero.
    .   @param stdDeviationsExtrinsics Output vector of standard deviations estimated for extrinsic
    .   parameters. Order of deviations values: \f$(R_0, T_0, \dotsc , R_{M - 1}, T_{M - 1})\f$ where M is
    .   the number of pattern views. \f$R_i, T_i\f$ are concatenated 1x3 vectors.
    .    @param perViewErrors Output vector of the RMS re-projection error estimated for each pattern view.
    .   @param flags Different flags that may be zero or a combination of the following values:
    .   -   @ref CALIB_USE_INTRINSIC_GUESS cameraMatrix contains valid initial values of
    .   fx, fy, cx, cy that are optimized further. Otherwise, (cx, cy) is initially set to the image
    .   center ( imageSize is used), and focal distances are computed in a least-squares fashion.
    .   Note, that if intrinsic parameters are known, there is no need to use this function just to
    .   estimate extrinsic parameters. Use solvePnP instead.
    .   -   @ref CALIB_FIX_PRINCIPAL_POINT The principal point is not changed during the global
    .   optimization. It stays at the center or at a different location specified when
    .    @ref CALIB_USE_INTRINSIC_GUESS is set too.
    .   -   @ref CALIB_FIX_ASPECT_RATIO The functions consider only fy as a free parameter. The
    .   ratio fx/fy stays the same as in the input cameraMatrix . When
    .    @ref CALIB_USE_INTRINSIC_GUESS is not set, the actual input values of fx and fy are
    .   ignored, only their ratio is computed and used further.
    .   -   @ref CALIB_ZERO_TANGENT_DIST Tangential distortion coefficients \f$(p_1, p_2)\f$ are set
    .   to zeros and stay zero.
    .   -   @ref CALIB_FIX_K1,..., @ref CALIB_FIX_K6 The corresponding radial distortion
    .   coefficient is not changed during the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is
    .   set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.
    .   -   @ref CALIB_RATIONAL_MODEL Coefficients k4, k5, and k6 are enabled. To provide the
    .   backward compatibility, this extra flag should be explicitly specified to make the
    .   calibration function use the rational model and return 8 coefficients. If the flag is not
    .   set, the function computes and returns only 5 distortion coefficients.
    .   -   @ref CALIB_THIN_PRISM_MODEL Coefficients s1, s2, s3 and s4 are enabled. To provide the
    .   backward compatibility, this extra flag should be explicitly specified to make the
    .   calibration function use the thin prism model and return 12 coefficients. If the flag is not
    .   set, the function computes and returns only 5 distortion coefficients.
    .   -   @ref CALIB_FIX_S1_S2_S3_S4 The thin prism distortion coefficients are not changed during
    .   the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the
    .   supplied distCoeffs matrix is used. Otherwise, it is set to 0.
    .   -   @ref CALIB_TILTED_MODEL Coefficients tauX and tauY are enabled. To provide the
    .   backward compatibility, this extra flag should be explicitly specified to make the
    .   calibration function use the tilted sensor model and return 14 coefficients. If the flag is not
    .   set, the function computes and returns only 5 distortion coefficients.
    .   -   @ref CALIB_FIX_TAUX_TAUY The coefficients of the tilted sensor model are not changed during
    .   the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the
    .   supplied distCoeffs matrix is used. Otherwise, it is set to 0.
    .   @param criteria Termination criteria for the iterative optimization algorithm.
    .
    .   @return the overall RMS re-projection error.
    .
    .   The function estimates the intrinsic camera parameters and extrinsic parameters for each of the
    .   views. The algorithm is based on @cite Zhang2000 and @cite BouguetMCT . The coordinates of 3D object
    .   points and their corresponding 2D projections in each view must be specified. That may be achieved
    .   by using an object with known geometry and easily detectable feature points. Such an object is
    .   called a calibration rig or calibration pattern, and OpenCV has built-in support for a chessboard as
    .   a calibration rig (see @ref findChessboardCorners). Currently, initialization of intrinsic
    .   parameters (when @ref CALIB_USE_INTRINSIC_GUESS is not set) is only implemented for planar calibration
    .   patterns (where Z-coordinates of the object points must be all zeros). 3D calibration rigs can also
    .   be used as long as initial cameraMatrix is provided.
    .
    .   The algorithm performs the following steps:
    .
    .   -   Compute the initial intrinsic parameters (the option only available for planar calibration
    .       patterns) or read them from the input parameters. The distortion coefficients are all set to
    .       zeros initially unless some of CALIB_FIX_K? are specified.
    .
    .   -   Estimate the initial camera pose as if the intrinsic parameters have been already known. This is
    .       done using solvePnP .
    .
    .   -   Run the global Levenberg-Marquardt optimization algorithm to minimize the reprojection error,
    .       that is, the total sum of squared distances between the observed feature points imagePoints and
    .       the projected (using the current estimates for camera parameters and the poses) object points
    .       objectPoints. See projectPoints for details.
    .
    .   @note
    .       If you use a non-square (i.e. non-N-by-N) grid and @ref findChessboardCorners for calibration,
    .       and @ref calibrateCamera returns bad values (zero distortion coefficients, \f$c_x\f$ and
    .       \f$c_y\f$ very far from the image center, and/or large differences between \f$f_x\f$ and
    .       \f$f_y\f$ (ratios of 10:1 or more)), then you are probably using patternSize=cvSize(rows,cols)
    .       instead of using patternSize=cvSize(cols,rows) in @ref findChessboardCorners.
    .
    .   @sa
    .      calibrateCameraRO, findChessboardCorners, solvePnP, initCameraMatrix2D, stereoCalibrate,
    .      undistort
    """
    ...

def calibrateCameraRO(
    objectPoints,
    imagePoints,
    imageSize,
    iFixedPoint,
    cameraMatrix,
    distCoeffs,
    rvecs=...,
    tvecs=...,
    newObjPoints=...,
    flags=...,
    criteria=...,
) -> Tuple[tvecs, newObjPoints]:
    """
    .   @overload
    """
    ...

def calibrateCameraROExtended(
    objectPoints,
    imagePoints,
    imageSize,
    iFixedPoint,
    cameraMatrix,
    distCoeffs,
    rvecs=...,
    tvecs=...,
    newObjPoints=...,
    stdDeviationsIntrinsics=...,
    stdDeviationsExtrinsics=...,
    stdDeviationsObjPoints=...,
    perViewErrors=...,
    flags=...,
    criteria=...,
) -> Tuple[stdDeviationsObjPoints, perViewErrors]:
    """
    .   @brief Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.
    .
    .   This function is an extension of calibrateCamera() with the method of releasing object which was
    .   proposed in @cite strobl2011iccv. In many common cases with inaccurate, unmeasured, roughly planar
    .   targets (calibration plates), this method can dramatically improve the precision of the estimated
    .   camera parameters. Both the object-releasing method and standard method are supported by this
    .   function. Use the parameter **iFixedPoint** for method selection. In the internal implementation,
    .   calibrateCamera() is a wrapper for this function.
    .
    .   @param objectPoints Vector of vectors of calibration pattern points in the calibration pattern
    .   coordinate space. See calibrateCamera() for details. If the method of releasing object to be used,
    .   the identical calibration board must be used in each view and it must be fully visible, and all
    .   objectPoints[i] must be the same and all points should be roughly close to a plane. **The calibration
    .   target has to be rigid, or at least static if the camera (rather than the calibration target) is
    .   shifted for grabbing images.**
    .   @param imagePoints Vector of vectors of the projections of calibration pattern points. See
    .   calibrateCamera() for details.
    .   @param imageSize Size of the image used only to initialize the intrinsic camera matrix.
    .   @param iFixedPoint The index of the 3D object point in objectPoints[0] to be fixed. It also acts as
    .   a switch for calibration method selection. If object-releasing method to be used, pass in the
    .   parameter in the range of [1, objectPoints[0].size()-2], otherwise a value out of this range will
    .   make standard calibration method selected. Usually the top-right corner point of the calibration
    .   board grid is recommended to be fixed when object-releasing method being utilized. According to
    .   \cite strobl2011iccv, two other points are also fixed. In this implementation, objectPoints[0].front
    .   and objectPoints[0].back.z are used. With object-releasing method, accurate rvecs, tvecs and
    .   newObjPoints are only possible if coordinates of these three fixed points are accurate enough.
    .   @param cameraMatrix Output 3x3 floating-point camera matrix. See calibrateCamera() for details.
    .   @param distCoeffs Output vector of distortion coefficients. See calibrateCamera() for details.
    .   @param rvecs Output vector of rotation vectors estimated for each pattern view. See calibrateCamera()
    .   for details.
    .   @param tvecs Output vector of translation vectors estimated for each pattern view.
    .   @param newObjPoints The updated output vector of calibration pattern points. The coordinates might
    .   be scaled based on three fixed points. The returned coordinates are accurate only if the above
    .   mentioned three fixed points are accurate. If not needed, noArray() can be passed in. This parameter
    .   is ignored with standard calibration method.
    .   @param stdDeviationsIntrinsics Output vector of standard deviations estimated for intrinsic parameters.
    .   See calibrateCamera() for details.
    .   @param stdDeviationsExtrinsics Output vector of standard deviations estimated for extrinsic parameters.
    .   See calibrateCamera() for details.
    .   @param stdDeviationsObjPoints Output vector of standard deviations estimated for refined coordinates
    .   of calibration pattern points. It has the same size and order as objectPoints[0] vector. This
    .   parameter is ignored with standard calibration method.
    .    @param perViewErrors Output vector of the RMS re-projection error estimated for each pattern view.
    .   @param flags Different flags that may be zero or a combination of some predefined values. See
    .   calibrateCamera() for details. If the method of releasing object is used, the calibration time may
    .   be much longer. CALIB_USE_QR or CALIB_USE_LU could be used for faster calibration with potentially
    .   less precise and less stable in some rare cases.
    .   @param criteria Termination criteria for the iterative optimization algorithm.
    .
    .   @return the overall RMS re-projection error.
    .
    .   The function estimates the intrinsic camera parameters and extrinsic parameters for each of the
    .   views. The algorithm is based on @cite Zhang2000, @cite BouguetMCT and @cite strobl2011iccv. See
    .   calibrateCamera() for other detailed explanations.
    .   @sa
    .      calibrateCamera, findChessboardCorners, solvePnP, initCameraMatrix2D, stereoCalibrate, undistort
    """
    ...

def calibrateHandEye(
    R_gripper2base,
    t_gripper2base,
    R_target2cam,
    t_target2cam,
    R_cam2gripper=...,
    t_cam2gripper=...,
    method=...,
) -> Tuple[R_cam2gripper, t_cam2gripper]:
    """
    .   @brief Computes Hand-Eye calibration: \f$_{}^{g}\textrm{T}_c\f$
    .
    .   @param[in] R_gripper2base Rotation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the gripper frame to the robot base frame (\f$_{}^{b}\textrm{T}_g\f$).
    .   This is a vector (`vector<Mat>`) that contains the rotation, `(3x3)` rotation matrices or `(3x1)` rotation vectors,
    .   for all the transformations from gripper frame to robot base frame.
    .   @param[in] t_gripper2base Translation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the gripper frame to the robot base frame (\f$_{}^{b}\textrm{T}_g\f$).
    .   This is a vector (`vector<Mat>`) that contains the `(3x1)` translation vectors for all the transformations
    .   from gripper frame to robot base frame.
    .   @param[in] R_target2cam Rotation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the target frame to the camera frame (\f$_{}^{c}\textrm{T}_t\f$).
    .   This is a vector (`vector<Mat>`) that contains the rotation, `(3x3)` rotation matrices or `(3x1)` rotation vectors,
    .   for all the transformations from calibration target frame to camera frame.
    .   @param[in] t_target2cam Rotation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the target frame to the camera frame (\f$_{}^{c}\textrm{T}_t\f$).
    .   This is a vector (`vector<Mat>`) that contains the `(3x1)` translation vectors for all the transformations
    .   from calibration target frame to camera frame.
    .   @param[out] R_cam2gripper Estimated `(3x3)` rotation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the camera frame to the gripper frame (\f$_{}^{g}\textrm{T}_c\f$).
    .   @param[out] t_cam2gripper Estimated `(3x1)` translation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the camera frame to the gripper frame (\f$_{}^{g}\textrm{T}_c\f$).
    .   @param[in] method One of the implemented Hand-Eye calibration method, see cv::HandEyeCalibrationMethod
    .
    .   The function performs the Hand-Eye calibration using various methods. One approach consists in estimating the
    .   rotation then the translation (separable solutions) and the following methods are implemented:
    .     - R. Tsai, R. Lenz A New Technique for Fully Autonomous and Efficient 3D Robotics Hand/EyeCalibration \cite Tsai89
    .     - F. Park, B. Martin Robot Sensor Calibration: Solving AX = XB on the Euclidean Group \cite Park94
    .     - R. Horaud, F. Dornaika Hand-Eye Calibration \cite Horaud95
    .
    .   Another approach consists in estimating simultaneously the rotation and the translation (simultaneous solutions),
    .   with the following implemented methods:
    .     - N. Andreff, R. Horaud, B. Espiau On-line Hand-Eye Calibration \cite Andreff99
    .     - K. Daniilidis Hand-Eye Calibration Using Dual Quaternions \cite Daniilidis98
    .
    .   The following picture describes the Hand-Eye calibration problem where the transformation between a camera ("eye")
    .   mounted on a robot gripper ("hand") has to be estimated. This configuration is called eye-in-hand.
    .
    .   The eye-to-hand configuration consists in a static camera observing a calibration pattern mounted on the robot
    .   end-effector. The transformation from the camera to the robot base frame can then be estimated by inputting
    .   the suitable transformations to the function, see below.
    .
    .   ![](pics/hand-eye_figure.png)
    .
    .   The calibration procedure is the following:
    .     - a static calibration pattern is used to estimate the transformation between the target frame
    .     and the camera frame
    .     - the robot gripper is moved in order to acquire several poses
    .     - for each pose, the homogeneous transformation between the gripper frame and the robot base frame is recorded using for
    .     instance the robot kinematics
    .   \f[
    .       \begin{bmatrix}
    .       X_b\\
    .       Y_b\\
    .       Z_b\\
    .       1
    .       \end{bmatrix}
    .       =
    .       \begin{bmatrix}
    .       _{}^{b}\textrm{R}_g & _{}^{b}\textrm{t}_g \\
    .       0_{1 \times 3} & 1
    .       \end{bmatrix}
    .       \begin{bmatrix}
    .       X_g\\
    .       Y_g\\
    .       Z_g\\
    .       1
    .       \end{bmatrix}
    .   \f]
    .     - for each pose, the homogeneous transformation between the calibration target frame and the camera frame is recorded using
    .     for instance a pose estimation method (PnP) from 2D-3D point correspondences
    .   \f[
    .       \begin{bmatrix}
    .       X_c\\
    .       Y_c\\
    .       Z_c\\
    .       1
    .       \end{bmatrix}
    .       =
    .       \begin{bmatrix}
    .       _{}^{c}\textrm{R}_t & _{}^{c}\textrm{t}_t \\
    .       0_{1 \times 3} & 1
    .       \end{bmatrix}
    .       \begin{bmatrix}
    .       X_t\\
    .       Y_t\\
    .       Z_t\\
    .       1
    .       \end{bmatrix}
    .   \f]
    .
    .   The Hand-Eye calibration procedure returns the following homogeneous transformation
    .   \f[
    .       \begin{bmatrix}
    .       X_g\\
    .       Y_g\\
    .       Z_g\\
    .       1
    .       \end{bmatrix}
    .       =
    .       \begin{bmatrix}
    .       _{}^{g}\textrm{R}_c & _{}^{g}\textrm{t}_c \\
    .       0_{1 \times 3} & 1
    .       \end{bmatrix}
    .       \begin{bmatrix}
    .       X_c\\
    .       Y_c\\
    .       Z_c\\
    .       1
    .       \end{bmatrix}
    .   \f]
    .
    .   This problem is also known as solving the \f$\mathbf{A}\mathbf{X}=\mathbf{X}\mathbf{B}\f$ equation:
    .     - for an eye-in-hand configuration
    .   \f[
    .       \begin{align*}
    .       ^{b}{\textrm{T}_g}^{(1)} \hspace{0.2em} ^{g}\textrm{T}_c \hspace{0.2em} ^{c}{\textrm{T}_t}^{(1)} &=
    .       \hspace{0.1em} ^{b}{\textrm{T}_g}^{(2)} \hspace{0.2em} ^{g}\textrm{T}_c \hspace{0.2em} ^{c}{\textrm{T}_t}^{(2)} \\
    .
    .       (^{b}{\textrm{T}_g}^{(2)})^{-1} \hspace{0.2em} ^{b}{\textrm{T}_g}^{(1)} \hspace{0.2em} ^{g}\textrm{T}_c &=
    .       \hspace{0.1em} ^{g}\textrm{T}_c \hspace{0.2em} ^{c}{\textrm{T}_t}^{(2)} (^{c}{\textrm{T}_t}^{(1)})^{-1} \\
    .
    .       \textrm{A}_i \textrm{X} &= \textrm{X} \textrm{B}_i \\
    .       \end{align*}
    .   \f]
    .
    .     - for an eye-to-hand configuration
    .   \f[
    .       \begin{align*}
    .       ^{g}{\textrm{T}_b}^{(1)} \hspace{0.2em} ^{b}\textrm{T}_c \hspace{0.2em} ^{c}{\textrm{T}_t}^{(1)} &=
    .       \hspace{0.1em} ^{g}{\textrm{T}_b}^{(2)} \hspace{0.2em} ^{b}\textrm{T}_c \hspace{0.2em} ^{c}{\textrm{T}_t}^{(2)} \\
    .
    .       (^{g}{\textrm{T}_b}^{(2)})^{-1} \hspace{0.2em} ^{g}{\textrm{T}_b}^{(1)} \hspace{0.2em} ^{b}\textrm{T}_c &=
    .       \hspace{0.1em} ^{b}\textrm{T}_c \hspace{0.2em} ^{c}{\textrm{T}_t}^{(2)} (^{c}{\textrm{T}_t}^{(1)})^{-1} \\
    .
    .       \textrm{A}_i \textrm{X} &= \textrm{X} \textrm{B}_i \\
    .       \end{align*}
    .   \f]
    .
    .   \note
    .   Additional information can be found on this [website](http://campar.in.tum.de/Chair/HandEyeCalibration).
    .   \note
    .   A minimum of 2 motions with non parallel rotation axes are necessary to determine the hand-eye transformation.
    .   So at least 3 different poses are required, but it is strongly recommended to use many more poses.
    """
    ...

def calibrateRobotWorldHandEye(
    R_world2cam,
    t_world2cam,
    R_base2gripper,
    t_base2gripper,
    R_base2world=...,
    t_base2world=...,
    R_gripper2cam=...,
    t_gripper2cam=...,
    method=...,
) -> Tuple[R_gripper2cam, t_gripper2cam]:
    """
    .   @brief Computes Robot-World/Hand-Eye calibration: \f$_{}^{w}\textrm{T}_b\f$ and \f$_{}^{c}\textrm{T}_g\f$
    .
    .   @param[in] R_world2cam Rotation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the world frame to the camera frame (\f$_{}^{c}\textrm{T}_w\f$).
    .   This is a vector (`vector<Mat>`) that contains the rotation, `(3x3)` rotation matrices or `(3x1)` rotation vectors,
    .   for all the transformations from world frame to the camera frame.
    .   @param[in] t_world2cam Translation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the world frame to the camera frame (\f$_{}^{c}\textrm{T}_w\f$).
    .   This is a vector (`vector<Mat>`) that contains the `(3x1)` translation vectors for all the transformations
    .   from world frame to the camera frame.
    .   @param[in] R_base2gripper Rotation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the robot base frame to the gripper frame (\f$_{}^{g}\textrm{T}_b\f$).
    .   This is a vector (`vector<Mat>`) that contains the rotation, `(3x3)` rotation matrices or `(3x1)` rotation vectors,
    .   for all the transformations from robot base frame to the gripper frame.
    .   @param[in] t_base2gripper Rotation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the robot base frame to the gripper frame (\f$_{}^{g}\textrm{T}_b\f$).
    .   This is a vector (`vector<Mat>`) that contains the `(3x1)` translation vectors for all the transformations
    .   from robot base frame to the gripper frame.
    .   @param[out] R_base2world Estimated `(3x3)` rotation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the robot base frame to the world frame (\f$_{}^{w}\textrm{T}_b\f$).
    .   @param[out] t_base2world Estimated `(3x1)` translation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the robot base frame to the world frame (\f$_{}^{w}\textrm{T}_b\f$).
    .   @param[out] R_gripper2cam Estimated `(3x3)` rotation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the gripper frame to the camera frame (\f$_{}^{c}\textrm{T}_g\f$).
    .   @param[out] t_gripper2cam Estimated `(3x1)` translation part extracted from the homogeneous matrix that transforms a point
    .   expressed in the gripper frame to the camera frame (\f$_{}^{c}\textrm{T}_g\f$).
    .   @param[in] method One of the implemented Robot-World/Hand-Eye calibration method, see cv::RobotWorldHandEyeCalibrationMethod
    .
    .   The function performs the Robot-World/Hand-Eye calibration using various methods. One approach consists in estimating the
    .   rotation then the translation (separable solutions):
    .     - M. Shah, Solving the robot-world/hand-eye calibration problem using the kronecker product \cite Shah2013SolvingTR
    .
    .   Another approach consists in estimating simultaneously the rotation and the translation (simultaneous solutions),
    .   with the following implemented method:
    .     - A. Li, L. Wang, and D. Wu, Simultaneous robot-world and hand-eye calibration using dual-quaternions and kronecker product \cite Li2010SimultaneousRA
    .
    .   The following picture describes the Robot-World/Hand-Eye calibration problem where the transformations between a robot and a world frame
    .   and between a robot gripper ("hand") and a camera ("eye") mounted at the robot end-effector have to be estimated.
    .
    .   ![](pics/robot-world_hand-eye_figure.png)
    .
    .   The calibration procedure is the following:
    .     - a static calibration pattern is used to estimate the transformation between the target frame
    .     and the camera frame
    .     - the robot gripper is moved in order to acquire several poses
    .     - for each pose, the homogeneous transformation between the gripper frame and the robot base frame is recorded using for
    .     instance the robot kinematics
    .   \f[
    .       \begin{bmatrix}
    .       X_g\\
    .       Y_g\\
    .       Z_g\\
    .       1
    .       \end{bmatrix}
    .       =
    .       \begin{bmatrix}
    .       _{}^{g}\textrm{R}_b & _{}^{g}\textrm{t}_b \\
    .       0_{1 \times 3} & 1
    .       \end{bmatrix}
    .       \begin{bmatrix}
    .       X_b\\
    .       Y_b\\
    .       Z_b\\
    .       1
    .       \end{bmatrix}
    .   \f]
    .     - for each pose, the homogeneous transformation between the calibration target frame (the world frame) and the camera frame is recorded using
    .     for instance a pose estimation method (PnP) from 2D-3D point correspondences
    .   \f[
    .       \begin{bmatrix}
    .       X_c\\
    .       Y_c\\
    .       Z_c\\
    .       1
    .       \end{bmatrix}
    .       =
    .       \begin{bmatrix}
    .       _{}^{c}\textrm{R}_w & _{}^{c}\textrm{t}_w \\
    .       0_{1 \times 3} & 1
    .       \end{bmatrix}
    .       \begin{bmatrix}
    .       X_w\\
    .       Y_w\\
    .       Z_w\\
    .       1
    .       \end{bmatrix}
    .   \f]
    .
    .   The Robot-World/Hand-Eye calibration procedure returns the following homogeneous transformations
    .   \f[
    .       \begin{bmatrix}
    .       X_w\\
    .       Y_w\\
    .       Z_w\\
    .       1
    .       \end{bmatrix}
    .       =
    .       \begin{bmatrix}
    .       _{}^{w}\textrm{R}_b & _{}^{w}\textrm{t}_b \\
    .       0_{1 \times 3} & 1
    .       \end{bmatrix}
    .       \begin{bmatrix}
    .       X_b\\
    .       Y_b\\
    .       Z_b\\
    .       1
    .       \end{bmatrix}
    .   \f]
    .   \f[
    .       \begin{bmatrix}
    .       X_c\\
    .       Y_c\\
    .       Z_c\\
    .       1
    .       \end{bmatrix}
    .       =
    .       \begin{bmatrix}
    .       _{}^{c}\textrm{R}_g & _{}^{c}\textrm{t}_g \\
    .       0_{1 \times 3} & 1
    .       \end{bmatrix}
    .       \begin{bmatrix}
    .       X_g\\
    .       Y_g\\
    .       Z_g\\
    .       1
    .       \end{bmatrix}
    .   \f]
    .
    .   This problem is also known as solving the \f$\mathbf{A}\mathbf{X}=\mathbf{Z}\mathbf{B}\f$ equation, with:
    .     - \f$\mathbf{A} \Leftrightarrow \hspace{0.1em} _{}^{c}\textrm{T}_w\f$
    .     - \f$\mathbf{X} \Leftrightarrow \hspace{0.1em} _{}^{w}\textrm{T}_b\f$
    .     - \f$\mathbf{Z} \Leftrightarrow \hspace{0.1em} _{}^{c}\textrm{T}_g\f$
    .     - \f$\mathbf{B} \Leftrightarrow \hspace{0.1em} _{}^{g}\textrm{T}_b\f$
    .
    .   \note
    .   At least 3 measurements are required (input vectors size must be greater or equal to 3).
    """
    ...

def calibrationMatrixValues(
    cameraMatrix, imageSize, apertureWidth, apertureHeight
) -> Tuple[t, aspectRatio]:
    """
    .   @brief Computes useful camera characteristics from the camera intrinsic matrix.
    .
    .   @param cameraMatrix Input camera intrinsic matrix that can be estimated by calibrateCamera or
    .   stereoCalibrate .
    .   @param imageSize Input image size in pixels.
    .   @param apertureWidth Physical width in mm of the sensor.
    .   @param apertureHeight Physical height in mm of the sensor.
    .   @param fovx Output field of view in degrees along the horizontal sensor axis.
    .   @param fovy Output field of view in degrees along the vertical sensor axis.
    .   @param focalLength Focal length of the lens in mm.
    .   @param principalPoint Principal point in mm.
    .   @param aspectRatio \f$f_y/f_x\f$
    .
    .   The function computes various useful camera characteristics from the previously estimated camera
    .   matrix.
    .
    .   @note
    .      Do keep in mind that the unity measure 'mm' stands for whatever unit of measure one chooses for
    .       the chessboard pitch (it can thus be any value).
    """
    ...

def cartToPolar(
    x, y, magnitude=..., angle=..., angleInDegrees=...
) -> Tuple[magnitude, angle]:
    """
    .   @brief Calculates the magnitude and angle of 2D vectors.
    .
    .   The function cv::cartToPolar calculates either the magnitude, angle, or both
    .   for every 2D vector (x(I),y(I)):
    .   \f[\begin{array}{l} \texttt{magnitude} (I)= \sqrt{\texttt{x}(I)^2+\texttt{y}(I)^2} , \\ \texttt{angle} (I)= \texttt{atan2} ( \texttt{y} (I), \texttt{x} (I))[ \cdot180 / \pi ] \end{array}\f]
    .
    .   The angles are calculated with accuracy about 0.3 degrees. For the point
    .   (0,0), the angle is set to 0.
    .   @param x array of x-coordinates; this must be a single-precision or
    .   double-precision floating-point array.
    .   @param y array of y-coordinates, that must have the same size and same type as x.
    .   @param magnitude output array of magnitudes of the same size and type as x.
    .   @param angle output array of angles that has the same size and type as
    .   x; the angles are measured in radians (from 0 to 2\*Pi) or in degrees (0 to 360 degrees).
    .   @param angleInDegrees a flag, indicating whether the angles are measured
    .   in radians (which is by default), or in degrees.
    .   @sa Sobel, Scharr
    """
    ...

def checkChessboard(img, size) -> retval:
    """
    .
    """
    ...

def checkHardwareSupport(feature) -> retval:
    """
    .   @brief Returns true if the specified feature is supported by the host hardware.
    .
    .   The function returns true if the host hardware supports the specified feature. When user calls
    .   setUseOptimized(false), the subsequent calls to checkHardwareSupport() will return false until
    .   setUseOptimized(true) is called. This way user can dynamically switch on and off the optimized code
    .   in OpenCV.
    .   @param feature The feature of interest, one of cv::CpuFeatures
    """
    ...

def checkRange(a, quiet=..., minVal=..., maxVal=...) -> Tuple[retval, pos]:
    """
    .   @brief Checks every element of an input array for invalid values.
    .
    .   The function cv::checkRange checks that every array element is neither NaN nor infinite. When minVal \>
    .   -DBL_MAX and maxVal \< DBL_MAX, the function also checks that each value is between minVal and
    .   maxVal. In case of multi-channel arrays, each channel is processed independently. If some values
    .   are out of range, position of the first outlier is stored in pos (when pos != NULL). Then, the
    .   function either returns false (when quiet=true) or throws an exception.
    .   @param a input array.
    .   @param quiet a flag, indicating whether the functions quietly return false when the array elements
    .   are out of range or they throw an exception.
    .   @param pos optional output parameter, when not NULL, must be a pointer to array of src.dims
    .   elements.
    .   @param minVal inclusive lower boundary of valid values range.
    .   @param maxVal exclusive upper boundary of valid values range.
    """
    ...

def circle(
    img: ndarray,
    center: Tuple[int, int],
    radius: int,
    color: Tuple[int, ...],
    thickness: int = ...,
    lineType: int = ...,
    shift: int = ...,
) -> ndarray:
    """
    .   @brief Draws a circle.
    .
    .   The function cv::circle draws a simple or filled circle with a given center and radius.
    .   @param img Image where the circle is drawn.
    .   @param center Center of the circle.
    .   @param radius Radius of the circle.
    .   @param color Circle color.
    .   @param thickness Thickness of the circle outline, if positive. Negative values, like #FILLED,
    .   mean that a filled circle is to be drawn.
    .   @param lineType Type of the circle boundary. See #LineTypes
    .   @param shift Number of fractional bits in the coordinates of the center and in the radius value.
    """
    ...

def clipLine(imgRect, pt1, pt2) -> Tuple[1, pt2]:
    """
    .   @overload
    .   @param imgRect Image rectangle.
    .   @param pt1 First line point.
    .   @param pt2 Second line point.
    """
    ...

def colorChange(src, mask, dst=..., red_mul=..., green_mul=..., blue_mul=...) -> dst:
    """
    .   @brief Given an original color image, two differently colored versions of this image can be mixed
    .   seamlessly.
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param mask Input 8-bit 1 or 3-channel image.
    .   @param dst Output image with the same size and type as src .
    .   @param red_mul R-channel multiply factor.
    .   @param green_mul G-channel multiply factor.
    .   @param blue_mul B-channel multiply factor.
    .
    .   Multiplication factor is between .5 to 2.5.
    """
    ...

def compare(src1, src2, cmpop, dst=...) -> dst:
    """
    .   @brief Performs the per-element comparison of two arrays or an array and scalar value.
    .
    .   The function compares:
    .   *   Elements of two arrays when src1 and src2 have the same size:
    .       \f[\texttt{dst} (I) =  \texttt{src1} (I)  \,\texttt{cmpop}\, \texttt{src2} (I)\f]
    .   *   Elements of src1 with a scalar src2 when src2 is constructed from
    .       Scalar or has a single element:
    .       \f[\texttt{dst} (I) =  \texttt{src1}(I) \,\texttt{cmpop}\,  \texttt{src2}\f]
    .   *   src1 with elements of src2 when src1 is constructed from Scalar or
    .       has a single element:
    .       \f[\texttt{dst} (I) =  \texttt{src1}  \,\texttt{cmpop}\, \texttt{src2} (I)\f]
    .   When the comparison result is true, the corresponding element of output
    .   array is set to 255. The comparison operations can be replaced with the
    .   equivalent matrix expressions:
    .   @code{.cpp}
    .       Mat dst1 = src1 >= src2;
    .       Mat dst2 = src1 < 8;
    .       ...
    .   @endcode
    .   @param src1 first input array or a scalar; when it is an array, it must have a single channel.
    .   @param src2 second input array or a scalar; when it is an array, it must have a single channel.
    .   @param dst output array of type ref CV_8U that has the same size and the same number of channels as
    .       the input arrays.
    .   @param cmpop a flag, that specifies correspondence between the arrays (cv::CmpTypes)
    .   @sa checkRange, min, max, threshold
    """
    ...

def compareHist(H1: ndarray, H2: ndarray, method: int) -> float:
    """
    .   @brief Compares two histograms.
    .
    .   The function cv::compareHist compares two dense or two sparse histograms using the specified method.
    .
    .   The function returns \f$d(H_1, H_2)\f$ .
    .
    .   While the function works well with 1-, 2-, 3-dimensional dense histograms, it may not be suitable
    .   for high-dimensional sparse histograms. In such histograms, because of aliasing and sampling
    .   problems, the coordinates of non-zero histogram bins can slightly shift. To compare such histograms
    .   or more general sparse configurations of weighted points, consider using the #EMD function.
    .
    .   @param H1 First compared histogram.
    .   @param H2 Second compared histogram of the same size as H1 .
    .   @param method Comparison method, see #HistCompMethods
    """
    ...

def compile_args(pkg) -> retval:
    """
    .



    compile_args(kernels, nets) -> retval
    .
    """
    ...

def completeSymm(m, lowerToUpper=...) -> m:
    """
    .   @brief Copies the lower or the upper half of a square matrix to its another half.
    .
    .   The function cv::completeSymm copies the lower or the upper half of a square matrix to
    .   its another half. The matrix diagonal remains unchanged:
    .    - \f$\texttt{m}_{ij}=\texttt{m}_{ji}\f$ for \f$i > j\f$ if
    .       lowerToUpper=false
    .    - \f$\texttt{m}_{ij}=\texttt{m}_{ji}\f$ for \f$i < j\f$ if
    .       lowerToUpper=true
    .
    .   @param m input-output floating-point square matrix.
    .   @param lowerToUpper operation flag; if true, the lower half is copied to
    .   the upper half. Otherwise, the upper half is copied to the lower half.
    .   @sa flip, transpose
    """
    ...

def composeRT(
    rvec1,
    tvec1,
    rvec2,
    tvec2,
    rvec3=...,
    tvec3=...,
    dr3dr1=...,
    dr3dt1=...,
    dr3dr2=...,
    dr3dt2=...,
    dt3dr1=...,
    dt3dt1=...,
    dt3dr2=...,
    dt3dt2=...,
) -> Tuple[dt3dr2, dt3dt2]:
    """
    .   @brief Combines two rotation-and-shift transformations.
    .
    .   @param rvec1 First rotation vector.
    .   @param tvec1 First translation vector.
    .   @param rvec2 Second rotation vector.
    .   @param tvec2 Second translation vector.
    .   @param rvec3 Output rotation vector of the superposition.
    .   @param tvec3 Output translation vector of the superposition.
    .   @param dr3dr1 Optional output derivative of rvec3 with regard to rvec1
    .   @param dr3dt1 Optional output derivative of rvec3 with regard to tvec1
    .   @param dr3dr2 Optional output derivative of rvec3 with regard to rvec2
    .   @param dr3dt2 Optional output derivative of rvec3 with regard to tvec2
    .   @param dt3dr1 Optional output derivative of tvec3 with regard to rvec1
    .   @param dt3dt1 Optional output derivative of tvec3 with regard to tvec1
    .   @param dt3dr2 Optional output derivative of tvec3 with regard to rvec2
    .   @param dt3dt2 Optional output derivative of tvec3 with regard to tvec2
    .
    .   The functions compute:
    .
    .   \f[\begin{array}{l} \texttt{rvec3} =  \mathrm{rodrigues} ^{-1} \left ( \mathrm{rodrigues} ( \texttt{rvec2} )  \cdot \mathrm{rodrigues} ( \texttt{rvec1} ) \right )  \\ \texttt{tvec3} =  \mathrm{rodrigues} ( \texttt{rvec2} )  \cdot \texttt{tvec1} +  \texttt{tvec2} \end{array} ,\f]
    .
    .   where \f$\mathrm{rodrigues}\f$ denotes a rotation vector to a rotation matrix transformation, and
    .   \f$\mathrm{rodrigues}^{-1}\f$ denotes the inverse transformation. See Rodrigues for details.
    .
    .   Also, the functions can compute the derivatives of the output vectors with regards to the input
    .   vectors (see matMulDeriv ). The functions are used inside stereoCalibrate but can also be used in
    .   your own code where Levenberg-Marquardt or another gradient-based solver is used to optimize a
    .   function that contains a matrix multiplication.
    """
    ...

def computeCorrespondEpilines(points, whichImage, F, lines=...) -> lines:
    """
    .   @brief For points in an image of a stereo pair, computes the corresponding epilines in the other image.
    .
    .   @param points Input points. \f$N \times 1\f$ or \f$1 \times N\f$ matrix of type CV_32FC2 or
    .   vector\<Point2f\> .
    .   @param whichImage Index of the image (1 or 2) that contains the points .
    .   @param F Fundamental matrix that can be estimated using findFundamentalMat or stereoRectify .
    .   @param lines Output vector of the epipolar lines corresponding to the points in the other image.
    .   Each line \f$ax + by + c=0\f$ is encoded by 3 numbers \f$(a, b, c)\f$ .
    .
    .   For every point in one of the two images of a stereo pair, the function finds the equation of the
    .   corresponding epipolar line in the other image.
    .
    .   From the fundamental matrix definition (see findFundamentalMat ), line \f$l^{(2)}_i\f$ in the second
    .   image for the point \f$p^{(1)}_i\f$ in the first image (when whichImage=1 ) is computed as:
    .
    .   \f[l^{(2)}_i = F p^{(1)}_i\f]
    .
    .   And vice versa, when whichImage=2, \f$l^{(1)}_i\f$ is computed from \f$p^{(2)}_i\f$ as:
    .
    .   \f[l^{(1)}_i = F^T p^{(2)}_i\f]
    .
    .   Line coefficients are defined up to a scale. They are normalized so that \f$a_i^2+b_i^2=1\f$ .
    """
    ...

def computeECC(templateImage, inputImage, inputMask=...) -> retval:
    """
    .   @brief Computes the Enhanced Correlation Coefficient value between two images @cite EP08 .
    .
    .   @param templateImage single-channel template image; CV_8U or CV_32F array.
    .   @param inputImage single-channel input image to be warped to provide an image similar to
    .    templateImage, same type as templateImage.
    .   @param inputMask An optional mask to indicate valid values of inputImage.
    .
    .   @sa
    .   findTransformECC
    """
    ...

def connectedComponents(
    image, labels=..., connectivity=..., ltype=...
) -> Tuple[retval, labels]:
    """
    .   @overload
    .
    .   @param image the 8-bit single-channel image to be labeled
    .   @param labels destination labeled image
    .   @param connectivity 8 or 4 for 8-way or 4-way connectivity respectively
    .   @param ltype output image label type. Currently CV_32S and CV_16U are supported.
    """
    ...

def connectedComponentsWithAlgorithm(
    image, connectivity, ltype, ccltype, labels=...
) -> Tuple[retval, labels]:
    """
    .   @brief computes the connected components labeled image of boolean image
    .
    .   image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0
    .   represents the background label. ltype specifies the output label image type, an important
    .   consideration based on the total number of labels or alternatively the total number of pixels in
    .   the source image. ccltype specifies the connected components labeling algorithm to use, currently
    .   Grana (BBDT) and Wu's (SAUF) @cite Wu2009 algorithms are supported, see the #ConnectedComponentsAlgorithmsTypes
    .   for details. Note that SAUF algorithm forces a row major ordering of labels while BBDT does not.
    .   This function uses parallel version of both Grana and Wu's algorithms if at least one allowed
    .   parallel framework is enabled and if the rows of the image are at least twice the number returned by #getNumberOfCPUs.
    .
    .   @param image the 8-bit single-channel image to be labeled
    .   @param labels destination labeled image
    .   @param connectivity 8 or 4 for 8-way or 4-way connectivity respectively
    .   @param ltype output image label type. Currently CV_32S and CV_16U are supported.
    .   @param ccltype connected components algorithm type (see the #ConnectedComponentsAlgorithmsTypes).
    """
    ...

def connectedComponentsWithStats(
    image, labels=..., stats=..., centroids=..., connectivity=..., ltype=...
) -> Tuple[stats, centroids]:
    """
    .   @overload
    .   @param image the 8-bit single-channel image to be labeled
    .   @param labels destination labeled image
    .   @param stats statistics output for each label, including the background label.
    .   Statistics are accessed via stats(label, COLUMN) where COLUMN is one of
    .   #ConnectedComponentsTypes, selecting the statistic. The data type is CV_32S.
    .   @param centroids centroid output for each label, including the background label. Centroids are
    .   accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F.
    .   @param connectivity 8 or 4 for 8-way or 4-way connectivity respectively
    .   @param ltype output image label type. Currently CV_32S and CV_16U are supported.
    """
    ...

def connectedComponentsWithStatsWithAlgorithm(
    image, connectivity, ltype, ccltype, labels=..., stats=..., centroids=...
) -> Tuple[stats, centroids]:
    """
    .   @brief computes the connected components labeled image of boolean image and also produces a statistics output for each label
    .
    .   image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0
    .   represents the background label. ltype specifies the output label image type, an important
    .   consideration based on the total number of labels or alternatively the total number of pixels in
    .   the source image. ccltype specifies the connected components labeling algorithm to use, currently
    .   Grana's (BBDT) and Wu's (SAUF) @cite Wu2009 algorithms are supported, see the #ConnectedComponentsAlgorithmsTypes
    .   for details. Note that SAUF algorithm forces a row major ordering of labels while BBDT does not.
    .   This function uses parallel version of both Grana and Wu's algorithms (statistics included) if at least one allowed
    .   parallel framework is enabled and if the rows of the image are at least twice the number returned by #getNumberOfCPUs.
    .
    .   @param image the 8-bit single-channel image to be labeled
    .   @param labels destination labeled image
    .   @param stats statistics output for each label, including the background label.
    .   Statistics are accessed via stats(label, COLUMN) where COLUMN is one of
    .   #ConnectedComponentsTypes, selecting the statistic. The data type is CV_32S.
    .   @param centroids centroid output for each label, including the background label. Centroids are
    .   accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F.
    .   @param connectivity 8 or 4 for 8-way or 4-way connectivity respectively
    .   @param ltype output image label type. Currently CV_32S and CV_16U are supported.
    .   @param ccltype connected components algorithm type (see #ConnectedComponentsAlgorithmsTypes).
    """
    ...

def contourArea(contour: ndarray, oriented: bool = ...) -> int:
    """
    .   @brief Calculates a contour area.
    .
    .   The function computes a contour area. Similarly to moments , the area is computed using the Green
    .   formula. Thus, the returned area and the number of non-zero pixels, if you draw the contour using
    .   #drawContours or #fillPoly , can be different. Also, the function will most certainly give a wrong
    .   results for contours with self-intersections.
    .
    .   Example:
    .   @code
    .       vector<Point> contour;
    .       contour.push_back(Point2f(0, 0));
    .       contour.push_back(Point2f(10, 0));
    .       contour.push_back(Point2f(10, 10));
    .       contour.push_back(Point2f(5, 4));
    .
    .       double area0 = contourArea(contour);
    .       vector<Point> approx;
    .       approxPolyDP(contour, approx, 5, true);
    .       double area1 = contourArea(approx);
    .
    .       cout << "area0 =" << area0 << endl <<
    .               "area1 =" << area1 << endl <<
    .               "approx poly vertices" << approx.size() << endl;
    .   @endcode
    .   @param contour Input vector of 2D points (contour vertices), stored in std::vector or Mat.
    .   @param oriented Oriented area flag. If it is true, the function returns a signed area value,
    .   depending on the contour orientation (clockwise or counter-clockwise). Using this feature you can
    .   determine orientation of a contour by taking the sign of an area. By default, the parameter is
    .   false, which means that the absolute value is returned.
    """
    ...

def convertFp16(src, dst=...) -> dst:
    """
    .   @brief Converts an array to half precision floating number.
    .
    .   This function converts FP32 (single precision floating point) from/to FP16 (half precision floating point). CV_16S format is used to represent FP16 data.
    .   There are two use modes (src -> dst): CV_32F -> CV_16S and CV_16S -> CV_32F. The input array has to have type of CV_32F or
    .   CV_16S to represent the bit depth. If the input array is neither of them, the function will raise an error.
    .   The format of half precision floating point is defined in IEEE 754-2008.
    .
    .   @param src input array.
    .   @param dst output array.
    """
    ...

def convertMaps(
    map1, map2, dstmap1type, dstmap1=..., dstmap2=..., nninterpolation=...
) -> Tuple[dstmap1, dstmap2]:
    """
    .   @brief Converts image transformation maps from one representation to another.
    .
    .   The function converts a pair of maps for remap from one representation to another. The following
    .   options ( (map1.type(), map2.type()) \f$\rightarrow\f$ (dstmap1.type(), dstmap2.type()) ) are
    .   supported:
    .
    .   - \f$\texttt{(CV_32FC1, CV_32FC1)} \rightarrow \texttt{(CV_16SC2, CV_16UC1)}\f$. This is the
    .   most frequently used conversion operation, in which the original floating-point maps (see remap )
    .   are converted to a more compact and much faster fixed-point representation. The first output array
    .   contains the rounded coordinates and the second array (created only when nninterpolation=false )
    .   contains indices in the interpolation tables.
    .
    .   - \f$\texttt{(CV_32FC2)} \rightarrow \texttt{(CV_16SC2, CV_16UC1)}\f$. The same as above but
    .   the original maps are stored in one 2-channel matrix.
    .
    .   - Reverse conversion. Obviously, the reconstructed floating-point maps will not be exactly the same
    .   as the originals.
    .
    .   @param map1 The first input map of type CV_16SC2, CV_32FC1, or CV_32FC2 .
    .   @param map2 The second input map of type CV_16UC1, CV_32FC1, or none (empty matrix),
    .   respectively.
    .   @param dstmap1 The first output map that has the type dstmap1type and the same size as src .
    .   @param dstmap2 The second output map.
    .   @param dstmap1type Type of the first output map that should be CV_16SC2, CV_32FC1, or
    .   CV_32FC2 .
    .   @param nninterpolation Flag indicating whether the fixed-point maps are used for the
    .   nearest-neighbor or for a more complex interpolation.
    .
    .   @sa  remap, undistort, initUndistortRectifyMap
    """
    ...

def convertPointsFromHomogeneous(src, dst=...) -> dst:
    """
    .   @brief Converts points from homogeneous to Euclidean space.
    .
    .   @param src Input vector of N-dimensional points.
    .   @param dst Output vector of N-1-dimensional points.
    .
    .   The function converts points homogeneous to Euclidean space using perspective projection. That is,
    .   each point (x1, x2, ... x(n-1), xn) is converted to (x1/xn, x2/xn, ..., x(n-1)/xn). When xn=0, the
    .   output point coordinates will be (0,0,0,...).
    """
    ...

def convertPointsToHomogeneous(src, dst=...) -> dst:
    """
    .   @brief Converts points from Euclidean to homogeneous space.
    .
    .   @param src Input vector of N-dimensional points.
    .   @param dst Output vector of N+1-dimensional points.
    .
    .   The function converts points from Euclidean to homogeneous space by appending 1's to the tuple of
    .   point coordinates. That is, each point (x1, x2, ..., xn) is converted to (x1, x2, ..., xn, 1).
    """
    ...

def convertScaleAbs(src, dst=..., alpha=..., beta=...) -> dst:
    """
    .   @brief Scales, calculates absolute values, and converts the result to 8-bit.
    .
    .   On each element of the input array, the function convertScaleAbs
    .   performs three operations sequentially: scaling, taking an absolute
    .   value, conversion to an unsigned 8-bit type:
    .   \f[\texttt{dst} (I)= \texttt{saturate\_cast<uchar>} (| \texttt{src} (I)* \texttt{alpha} +  \texttt{beta} |)\f]
    .   In case of multi-channel arrays, the function processes each channel
    .   independently. When the output is not 8-bit, the operation can be
    .   emulated by calling the Mat::convertTo method (or by using matrix
    .   expressions) and then by calculating an absolute value of the result.
    .   For example:
    .   @code{.cpp}
    .       Mat_<float> A(30,30);
    .       randu(A, Scalar(-100), Scalar(100));
    .       Mat_<float> B = A*5 + 3;
    .       B = abs(B);
    .       // Mat_<float> B = abs(A*5+3) will also do the job,
    .       // but it will allocate a temporary matrix
    .   @endcode
    .   @param src input array.
    .   @param dst output array.
    .   @param alpha optional scale factor.
    .   @param beta optional delta added to the scaled values.
    .   @sa  Mat::convertTo, cv::abs(const Mat&)
    """
    ...

def convexHull(points, hull=..., clockwise=..., returnPoints=...) -> hull:
    """
    .   @brief Finds the convex hull of a point set.
    .
    .   The function cv::convexHull finds the convex hull of a 2D point set using the Sklansky's algorithm @cite Sklansky82
    .   that has *O(N logN)* complexity in the current implementation.
    .
    .   @param points Input 2D point set, stored in std::vector or Mat.
    .   @param hull Output convex hull. It is either an integer vector of indices or vector of points. In
    .   the first case, the hull elements are 0-based indices of the convex hull points in the original
    .   array (since the set of convex hull points is a subset of the original point set). In the second
    .   case, hull elements are the convex hull points themselves.
    .   @param clockwise Orientation flag. If it is true, the output convex hull is oriented clockwise.
    .   Otherwise, it is oriented counter-clockwise. The assumed coordinate system has its X axis pointing
    .   to the right, and its Y axis pointing upwards.
    .   @param returnPoints Operation flag. In case of a matrix, when the flag is true, the function
    .   returns convex hull points. Otherwise, it returns indices of the convex hull points. When the
    .   output array is std::vector, the flag is ignored, and the output depends on the type of the
    .   vector: std::vector\<int\> implies returnPoints=false, std::vector\<Point\> implies
    .   returnPoints=true.
    .
    .   @note `points` and `hull` should be different arrays, inplace processing isn't supported.
    .
    .   Check @ref tutorial_hull "the corresponding tutorial" for more details.
    .
    .   useful links:
    .
    .   https://www.learnopencv.com/convex-hull-using-opencv-in-python-and-c/
    """
    ...

def convexityDefects(contour, convexhull, convexityDefects=...) -> convexityDefects:
    """
    .   @brief Finds the convexity defects of a contour.
    .
    .   The figure below displays convexity defects of a hand contour:
    .
    .   ![image](pics/defects.png)
    .
    .   @param contour Input contour.
    .   @param convexhull Convex hull obtained using convexHull that should contain indices of the contour
    .   points that make the hull.
    .   @param convexityDefects The output vector of convexity defects. In C++ and the new Python/Java
    .   interface each convexity defect is represented as 4-element integer vector (a.k.a. #Vec4i):
    .   (start_index, end_index, farthest_pt_index, fixpt_depth), where indices are 0-based indices
    .   in the original contour of the convexity defect beginning, end and the farthest point, and
    .   fixpt_depth is fixed-point approximation (with 8 fractional bits) of the distance between the
    .   farthest contour point and the hull. That is, to get the floating-point value of the depth will be
    .   fixpt_depth/256.0.
    """
    ...

def copyMakeBorder(
    src: ndarray,
    top: int,
    bottom: int,
    left: int,
    right: int,
    borderType: int,
    dst: ndarray = ...,
    value: Any = ...,
) -> ndarray:
    """
    .   @brief Forms a border around an image.
    .
    .   The function copies the source image into the middle of the destination image. The areas to the
    .   left, to the right, above and below the copied source image will be filled with extrapolated
    .   pixels. This is not what filtering functions based on it do (they extrapolate pixels on-fly), but
    .   what other more complex functions, including your own, may do to simplify image boundary handling.
    .
    .   The function supports the mode when src is already in the middle of dst . In this case, the
    .   function does not copy src itself but simply constructs the border, for example:
    .
    .   @code{.cpp}
    .       // let border be the same in all directions
    .       int border=2;
    .       // constructs a larger image to fit both the image and the border
    .       Mat gray_buf(rgb.rows + border*2, rgb.cols + border*2, rgb.depth());
    .       // select the middle part of it w/o copying data
    .       Mat gray(gray_canvas, Rect(border, border, rgb.cols, rgb.rows));
    .       // convert image from RGB to grayscale
    .       cvtColor(rgb, gray, COLOR_RGB2GRAY);
    .       // form a border in-place
    .       copyMakeBorder(gray, gray_buf, border, border,
    .                      border, border, BORDER_REPLICATE);
    .       // now do some custom filtering ...
    .       ...
    .   @endcode
    .   @note When the source image is a part (ROI) of a bigger image, the function will try to use the
    .   pixels outside of the ROI to form a border. To disable this feature and always do extrapolation, as
    .   if src was not a ROI, use borderType | #BORDER_ISOLATED.
    .
    .   @param src Source image.
    .   @param dst Destination image of the same type as src and the size Size(src.cols+left+right,
    .   src.rows+top+bottom) .
    .   @param top the top pixels
    .   @param bottom the bottom pixels
    .   @param left the left pixels
    .   @param right Parameter specifying how many pixels in each direction from the source image rectangle
    .   to extrapolate. For example, top=1, bottom=1, left=1, right=1 mean that 1 pixel-wide border needs
    .   to be built.
    .   @param borderType Border type. See borderInterpolate for details.
    .   @param value Border value if borderType==BORDER_CONSTANT .
    .
    .   @sa  borderInterpolate
    """
    ...

def copyTo(src: ndarray, mask: ndarray = ..., dst: ndarray = ...) -> ndarray:
    """
    .   @brief  This is an overloaded member function, provided for convenience (python)
    .   Copies the matrix to another one.
    .   When the operation mask is specified, if the Mat::create call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data.
    .   @param src source matrix.
    .   @param dst Destination matrix. If it does not have a proper size or type before the operation, it is
    .   reallocated.
    .   @param mask Operation mask of the same size as \*this. Its non-zero elements indicate which matrix
    .   elements need to be copied. The mask has to be of type CV_8U and can have 1 or multiple channels.
    """
    ...

def cornerEigenValsAndVecs(src, blockSize, ksize, dst=..., borderType=...) -> dst:
    """
    .   @brief Calculates eigenvalues and eigenvectors of image blocks for corner detection.
    .
    .   For every pixel \f$p\f$ , the function cornerEigenValsAndVecs considers a blockSize \f$\times\f$ blockSize
    .   neighborhood \f$S(p)\f$ . It calculates the covariation matrix of derivatives over the neighborhood as:
    .
    .   \f[M =  \begin{bmatrix} \sum _{S(p)}(dI/dx)^2 &  \sum _{S(p)}dI/dx dI/dy  \\ \sum _{S(p)}dI/dx dI/dy &  \sum _{S(p)}(dI/dy)^2 \end{bmatrix}\f]
    .
    .   where the derivatives are computed using the Sobel operator.
    .
    .   After that, it finds eigenvectors and eigenvalues of \f$M\f$ and stores them in the destination image as
    .   \f$(\lambda_1, \lambda_2, x_1, y_1, x_2, y_2)\f$ where
    .
    .   -   \f$\lambda_1, \lambda_2\f$ are the non-sorted eigenvalues of \f$M\f$
    .   -   \f$x_1, y_1\f$ are the eigenvectors corresponding to \f$\lambda_1\f$
    .   -   \f$x_2, y_2\f$ are the eigenvectors corresponding to \f$\lambda_2\f$
    .
    .   The output of the function can be used for robust edge or corner detection.
    .
    .   @param src Input single-channel 8-bit or floating-point image.
    .   @param dst Image to store the results. It has the same size as src and the type CV_32FC(6) .
    .   @param blockSize Neighborhood size (see details below).
    .   @param ksize Aperture parameter for the Sobel operator.
    .   @param borderType Pixel extrapolation method. See #BorderTypes. #BORDER_WRAP is not supported.
    .
    .   @sa  cornerMinEigenVal, cornerHarris, preCornerDetect
    """
    ...

def cornerHarris(src, blockSize, ksize, k, dst=..., borderType=...) -> dst:
    """
    .   @brief Harris corner detector.
    .
    .   The function runs the Harris corner detector on the image. Similarly to cornerMinEigenVal and
    .   cornerEigenValsAndVecs , for each pixel \f$(x, y)\f$ it calculates a \f$2\times2\f$ gradient covariance
    .   matrix \f$M^{(x,y)}\f$ over a \f$\texttt{blockSize} \times \texttt{blockSize}\f$ neighborhood. Then, it
    .   computes the following characteristic:
    .
    .   \f[\texttt{dst} (x,y) =  \mathrm{det} M^{(x,y)} - k  \cdot \left ( \mathrm{tr} M^{(x,y)} \right )^2\f]
    .
    .   Corners in the image can be found as the local maxima of this response map.
    .
    .   @param src Input single-channel 8-bit or floating-point image.
    .   @param dst Image to store the Harris detector responses. It has the type CV_32FC1 and the same
    .   size as src .
    .   @param blockSize Neighborhood size (see the details on #cornerEigenValsAndVecs ).
    .   @param ksize Aperture parameter for the Sobel operator.
    .   @param k Harris detector free parameter. See the formula above.
    .   @param borderType Pixel extrapolation method. See #BorderTypes. #BORDER_WRAP is not supported.
    """
    ...

def cornerMinEigenVal(src, blockSize, dst=..., ksize=..., borderType=...) -> dst:
    """
    .   @brief Calculates the minimal eigenvalue of gradient matrices for corner detection.
    .
    .   The function is similar to cornerEigenValsAndVecs but it calculates and stores only the minimal
    .   eigenvalue of the covariance matrix of derivatives, that is, \f$\min(\lambda_1, \lambda_2)\f$ in terms
    .   of the formulae in the cornerEigenValsAndVecs description.
    .
    .   @param src Input single-channel 8-bit or floating-point image.
    .   @param dst Image to store the minimal eigenvalues. It has the type CV_32FC1 and the same size as
    .   src .
    .   @param blockSize Neighborhood size (see the details on #cornerEigenValsAndVecs ).
    .   @param ksize Aperture parameter for the Sobel operator.
    .   @param borderType Pixel extrapolation method. See #BorderTypes. #BORDER_WRAP is not supported.
    """
    ...

def cornerSubPix(image, corners, winSize, zeroZone, criteria) -> corners:
    """
    .   @brief Refines the corner locations.
    .
    .   The function iterates to find the sub-pixel accurate location of corners or radial saddle
    .   points as described in @cite forstner1987fast, and as shown on the figure below.
    .
    .   ![image](pics/cornersubpix.png)
    .
    .   Sub-pixel accurate corner locator is based on the observation that every vector from the center \f$q\f$
    .   to a point \f$p\f$ located within a neighborhood of \f$q\f$ is orthogonal to the image gradient at \f$p\f$
    .   subject to image and measurement noise. Consider the expression:
    .
    .   \f[\epsilon _i = {DI_{p_i}}^T  \cdot (q - p_i)\f]
    .
    .   where \f${DI_{p_i}}\f$ is an image gradient at one of the points \f$p_i\f$ in a neighborhood of \f$q\f$ . The
    .   value of \f$q\f$ is to be found so that \f$\epsilon_i\f$ is minimized. A system of equations may be set up
    .   with \f$\epsilon_i\f$ set to zero:
    .
    .   \f[\sum _i(DI_{p_i}  \cdot {DI_{p_i}}^T) \cdot q -  \sum _i(DI_{p_i}  \cdot {DI_{p_i}}^T  \cdot p_i)\f]
    .
    .   where the gradients are summed within a neighborhood ("search window") of \f$q\f$ . Calling the first
    .   gradient term \f$G\f$ and the second gradient term \f$b\f$ gives:
    .
    .   \f[q = G^{-1}  \cdot b\f]
    .
    .   The algorithm sets the center of the neighborhood window at this new center \f$q\f$ and then iterates
    .   until the center stays within a set threshold.
    .
    .   @param image Input single-channel, 8-bit or float image.
    .   @param corners Initial coordinates of the input corners and refined coordinates provided for
    .   output.
    .   @param winSize Half of the side length of the search window. For example, if winSize=Size(5,5) ,
    .   then a \f$(5*2+1) \times (5*2+1) = 11 \times 11\f$ search window is used.
    .   @param zeroZone Half of the size of the dead region in the middle of the search zone over which
    .   the summation in the formula below is not done. It is used sometimes to avoid possible
    .   singularities of the autocorrelation matrix. The value of (-1,-1) indicates that there is no such
    .   a size.
    .   @param criteria Criteria for termination of the iterative process of corner refinement. That is,
    .   the process of corner position refinement stops either after criteria.maxCount iterations or when
    .   the corner position moves by less than criteria.epsilon on some iteration.
    """
    ...

def correctMatches(
    F, points1, points2, newPoints1=..., newPoints2=...
) -> Tuple[newPoints1, newPoints2]:
    """
    .   @brief Refines coordinates of corresponding points.
    .
    .   @param F 3x3 fundamental matrix.
    .   @param points1 1xN array containing the first set of points.
    .   @param points2 1xN array containing the second set of points.
    .   @param newPoints1 The optimized points1.
    .   @param newPoints2 The optimized points2.
    .
    .   The function implements the Optimal Triangulation Method (see Multiple View Geometry for details).
    .   For each given point correspondence points1[i] \<-\> points2[i], and a fundamental matrix F, it
    .   computes the corrected correspondences newPoints1[i] \<-\> newPoints2[i] that minimize the geometric
    .   error \f$d(points1[i], newPoints1[i])^2 + d(points2[i],newPoints2[i])^2\f$ (where \f$d(a,b)\f$ is the
    .   geometric distance between points \f$a\f$ and \f$b\f$ ) subject to the epipolar constraint
    .   \f$newPoints2^T * F * newPoints1 = 0\f$ .
    """
    ...


def createAlignMTB(max_bits=..., exclude_range=..., cut=...) -> retval:
    """
    .   @brief Creates AlignMTB object
    .
    .   @param max_bits logarithm to the base 2 of maximal shift in each dimension. Values of 5 and 6 are
    .   usually good enough (31 and 63 pixels shift respectively).
    .   @param exclude_range range for exclusion bitmap that is constructed to suppress noise around the
    .   median value.
    .   @param cut if true cuts images, otherwise fills the new regions with zeros.
    """
    ...

def createBackgroundSubtractorKNN(
    history=..., dist2Threshold=..., detectShadows=...
) -> retval:
    """
    .   @brief Creates KNN Background Subtractor
    .
    .   @param history Length of the history.
    .   @param dist2Threshold Threshold on the squared distance between the pixel and the sample to decide
    .   whether a pixel is close to that sample. This parameter does not affect the background update.
    .   @param detectShadows If true, the algorithm will detect shadows and mark them. It decreases the
    .   speed a bit, so if you do not need this feature, set the parameter to false.
    """
    ...

def createBackgroundSubtractorMOG2(
    history=..., varThreshold=..., detectShadows=...
) -> retval:
    """
    .   @brief Creates MOG2 Background Subtractor
    .
    .   @param history Length of the history.
    .   @param varThreshold Threshold on the squared Mahalanobis distance between the pixel and the model
    .   to decide whether a pixel is well described by the background model. This parameter does not
    .   affect the background update.
    .   @param detectShadows If true, the algorithm will detect shadows and mark them. It decreases the
    .   speed a bit, so if you do not need this feature, set the parameter to false.
    """
    ...

def createButton(
    buttonName, onChange, userData=..., buttonType=..., initialButtonState=...
) -> None:
    """ """
    ...

def createCLAHE(clipLimit=..., tileGridSize=...) -> retval:
    """
    .   @brief Creates a smart pointer to a cv::CLAHE class and initializes it.
    .
    .   @param clipLimit Threshold for contrast limiting.
    .   @param tileGridSize Size of grid for histogram equalization. Input image will be divided into
    .   equally sized rectangular tiles. tileGridSize defines the number of tiles in row and column.
    """
    ...

def createCalibrateDebevec(samples=..., lambda_=..., random=...) -> retval:
    """
    .   @brief Creates CalibrateDebevec object
    .
    .   @param samples number of pixel locations to use
    .   @param lambda smoothness term weight. Greater values produce smoother results, but can alter the
    .   response.
    .   @param random if true sample pixel locations are chosen at random, otherwise they form a
    .   rectangular grid.
    """
    ...

def createCalibrateRobertson(max_iter=..., threshold=...) -> retval:
    """
    .   @brief Creates CalibrateRobertson object
    .
    .   @param max_iter maximal number of Gauss-Seidel solver iterations.
    .   @param threshold target difference between results of two successive steps of the minimization.
    """
    ...

def createGeneralizedHoughBallard() -> retval:
    """
    .   @brief Creates a smart pointer to a cv::GeneralizedHoughBallard class and initializes it.
    """
    ...

def createGeneralizedHoughGuil() -> retval:
    """
    .   @brief Creates a smart pointer to a cv::GeneralizedHoughGuil class and initializes it.
    """
    ...

def createHanningWindow(winSize, type, dst=...) -> dst:
    """
    .   @brief This function computes a Hanning window coefficients in two dimensions.
    .
    .   See (http://en.wikipedia.org/wiki/Hann_function) and (http://en.wikipedia.org/wiki/Window_function)
    .   for more information.
    .
    .   An example is shown below:
    .   @code
    .       // create hanning window of size 100x100 and type CV_32F
    .       Mat hann;
    .       createHanningWindow(hann, Size(100, 100), CV_32F);
    .   @endcode
    .   @param dst Destination array to place Hann coefficients in
    .   @param winSize The window size specifications (both width and height must be > 1)
    .   @param type Created array type
    """
    ...

def createLineSegmentDetector(
    _refine=...,
    _scale=...,
    _sigma_scale=...,
    _quant=...,
    _ang_th=...,
    _log_eps=...,
    _density_th=...,
    _n_bins=...,
) -> retval:
    """
    .   @brief Creates a smart pointer to a LineSegmentDetector object and initializes it.
    .
    .   The LineSegmentDetector algorithm is defined using the standard values. Only advanced users may want
    .   to edit those, as to tailor it for their own application.
    .
    .   @param _refine The way found lines will be refined, see #LineSegmentDetectorModes
    .   @param _scale The scale of the image that will be used to find the lines. Range (0..1].
    .   @param _sigma_scale Sigma for Gaussian filter. It is computed as sigma = _sigma_scale/_scale.
    .   @param _quant Bound to the quantization error on the gradient norm.
    .   @param _ang_th Gradient angle tolerance in degrees.
    .   @param _log_eps Detection threshold: -log10(NFA) \> log_eps. Used only when advance refinement
    .   is chosen.
    .   @param _density_th Minimal density of aligned region points in the enclosing rectangle.
    .   @param _n_bins Number of bins in pseudo-ordering of gradient modulus.
    .
    .   @note Implementation has been removed due original code license conflict
    """
    ...

def createMergeDebevec() -> retval:
    """
    .   @brief Creates MergeDebevec object
    """
    ...

def createMergeMertens(
    contrast_weight=..., saturation_weight=..., exposure_weight=...
) -> retval:
    """
    .   @brief Creates MergeMertens object
    .
    .   @param contrast_weight contrast measure weight. See MergeMertens.
    .   @param saturation_weight saturation measure weight
    .   @param exposure_weight well-exposedness measure weight
    """
    ...

def createMergeRobertson() -> retval:
    """
    .   @brief Creates MergeRobertson object
    """
    ...

def createTonemap(gamma=...) -> retval:
    """
    .   @brief Creates simple linear mapper with gamma correction
    .
    .   @param gamma positive value for gamma correction. Gamma value of 1.0 implies no correction, gamma
    .   equal to 2.2f is suitable for most displays.
    .   Generally gamma \> 1 brightens the image and gamma \< 1 darkens it.
    """
    ...

def createTonemapDrago(gamma=..., saturation=..., bias=...) -> retval:
    """
    .   @brief Creates TonemapDrago object
    .
    .   @param gamma gamma value for gamma correction. See createTonemap
    .   @param saturation positive saturation enhancement value. 1.0 preserves saturation, values greater
    .   than 1 increase saturation and values less than 1 decrease it.
    .   @param bias value for bias function in [0, 1] range. Values from 0.7 to 0.9 usually give best
    .   results, default value is 0.85.
    """
    ...

def createTonemapMantiuk(gamma=..., scale=..., saturation=...) -> retval:
    """
    .   @brief Creates TonemapMantiuk object
    .
    .   @param gamma gamma value for gamma correction. See createTonemap
    .   @param scale contrast scale factor. HVS response is multiplied by this parameter, thus compressing
    .   dynamic range. Values from 0.6 to 0.9 produce best results.
    .   @param saturation saturation enhancement value. See createTonemapDrago
    """
    ...

def createTonemapReinhard(
    gamma=..., intensity=..., light_adapt=..., color_adapt=...
) -> retval:
    """
    .   @brief Creates TonemapReinhard object
    .
    .   @param gamma gamma value for gamma correction. See createTonemap
    .   @param intensity result intensity in [-8, 8] range. Greater intensity produces brighter results.
    .   @param light_adapt light adaptation in [0, 1] range. If 1 adaptation is based only on pixel
    .   value, if 0 it's global, otherwise it's a weighted mean of this two cases.
    .   @param color_adapt chromatic adaptation in [0, 1] range. If 1 channels are treated independently,
    .   if 0 adaptation level is the same for each channel.
    """
    ...

def createTrackbar(trackbarName, windowName, value, count, onChange) -> None:
    """ """
    ...

def cubeRoot(val) -> retval:
    """
    .   @brief Computes the cube root of an argument.
    .
    .    The function cubeRoot computes \f$\sqrt[3]{\texttt{val}}\f$. Negative arguments are handled correctly.
    .    NaN and Inf are not handled. The accuracy approaches the maximum possible accuracy for
    .    single-precision data.
    .    @param val A function argument.
    """
    ...

def cvtColor(
    src: ndarray, code: int = ..., dst: ndarray = ..., dstCn: int = ...
) -> ndarray:
    """
    .   @brief Converts an image from one color space to another.
    .
    .   The function converts an input image from one color space to another. In case of a transformation
    .   to-from RGB color space, the order of the channels should be specified explicitly (RGB or BGR). Note
    .   that the default color format in OpenCV is often referred to as RGB but it is actually BGR (the
    .   bytes are reversed). So the first byte in a standard (24-bit) color image will be an 8-bit Blue
    .   component, the second byte will be Green, and the third byte will be Red. The fourth, fifth, and
    .   sixth bytes would then be the second pixel (Blue, then Green, then Red), and so on.
    .
    .   The conventional ranges for R, G, and B channel values are:
    .   -   0 to 255 for CV_8U images
    .   -   0 to 65535 for CV_16U images
    .   -   0 to 1 for CV_32F images
    .
    .   In case of linear transformations, the range does not matter. But in case of a non-linear
    .   transformation, an input RGB image should be normalized to the proper value range to get the correct
    .   results, for example, for RGB \f$\rightarrow\f$ L\*u\*v\* transformation. For example, if you have a
    .   32-bit floating-point image directly converted from an 8-bit image without any scaling, then it will
    .   have the 0..255 value range instead of 0..1 assumed by the function. So, before calling #cvtColor ,
    .   you need first to scale the image down:
    .   @code
    .       img *= 1./255;
    .       cvtColor(img, img, COLOR_BGR2Luv);
    .   @endcode
    .   If you use #cvtColor with 8-bit images, the conversion will have some information lost. For many
    .   applications, this will not be noticeable but it is recommended to use 32-bit images in applications
    .   that need the full range of colors or that convert an image before an operation and then convert
    .   back.
    .
    .   If conversion adds the alpha channel, its value will set to the maximum of corresponding channel
    .   range: 255 for CV_8U, 65535 for CV_16U, 1 for CV_32F.
    .
    .   @param src input image: 8-bit unsigned, 16-bit unsigned ( CV_16UC... ), or single-precision
    .   floating-point.
    .   @param dst output image of the same size and depth as src.
    .   @param code color space conversion code (see #ColorConversionCodes).
    .   @param dstCn number of channels in the destination image; if the parameter is 0, the number of the
    .   channels is derived automatically from src and code.
    .
    .   @see @ref imgproc_color_conversions
    """
    ...

def cvtColorTwoPlane(src1, src2, code, dst=...) -> dst:
    """
    .   @brief Converts an image from one color space to another where the source image is
    .   stored in two planes.
    .
    .   This function only supports YUV420 to RGB conversion as of now.
    .
    .   @param src1: 8-bit image (#CV_8U) of the Y plane.
    .   @param src2: image containing interleaved U/V plane.
    .   @param dst: output image.
    .   @param code: Specifies the type of conversion. It can take any of the following values:
    .   - #COLOR_YUV2BGR_NV12
    .   - #COLOR_YUV2RGB_NV12
    .   - #COLOR_YUV2BGRA_NV12
    .   - #COLOR_YUV2RGBA_NV12
    .   - #COLOR_YUV2BGR_NV21
    .   - #COLOR_YUV2RGB_NV21
    .   - #COLOR_YUV2BGRA_NV21
    .   - #COLOR_YUV2RGBA_NV21
    """
    ...

def dct(src, dst=..., flags=...) -> dst:
    """
    .   @brief Performs a forward or inverse discrete Cosine transform of 1D or 2D array.
    .
    .   The function cv::dct performs a forward or inverse discrete Cosine transform (DCT) of a 1D or 2D
    .   floating-point array:
    .   -   Forward Cosine transform of a 1D vector of N elements:
    .       \f[Y = C^{(N)}  \cdot X\f]
    .       where
    .       \f[C^{(N)}_{jk}= \sqrt{\alpha_j/N} \cos \left ( \frac{\pi(2k+1)j}{2N} \right )\f]
    .       and
    .       \f$\alpha_0=1\f$, \f$\alpha_j=2\f$ for *j \> 0*.
    .   -   Inverse Cosine transform of a 1D vector of N elements:
    .       \f[X =  \left (C^{(N)} \right )^{-1}  \cdot Y =  \left (C^{(N)} \right )^T  \cdot Y\f]
    .       (since \f$C^{(N)}\f$ is an orthogonal matrix, \f$C^{(N)} \cdot \left(C^{(N)}\right)^T = I\f$ )
    .   -   Forward 2D Cosine transform of M x N matrix:
    .       \f[Y = C^{(N)}  \cdot X  \cdot \left (C^{(N)} \right )^T\f]
    .   -   Inverse 2D Cosine transform of M x N matrix:
    .       \f[X =  \left (C^{(N)} \right )^T  \cdot X  \cdot C^{(N)}\f]
    .
    .   The function chooses the mode of operation by looking at the flags and size of the input array:
    .   -   If (flags & #DCT_INVERSE) == 0 , the function does a forward 1D or 2D transform. Otherwise, it
    .       is an inverse 1D or 2D transform.
    .   -   If (flags & #DCT_ROWS) != 0 , the function performs a 1D transform of each row.
    .   -   If the array is a single column or a single row, the function performs a 1D transform.
    .   -   If none of the above is true, the function performs a 2D transform.
    .
    .   @note Currently dct supports even-size arrays (2, 4, 6 ...). For data analysis and approximation, you
    .   can pad the array when necessary.
    .   Also, the function performance depends very much, and not monotonically, on the array size (see
    .   getOptimalDFTSize ). In the current implementation DCT of a vector of size N is calculated via DFT
    .   of a vector of size N/2 . Thus, the optimal DCT size N1 \>= N can be calculated as:
    .   @code
    .       size_t getOptimalDCTSize(size_t N) { return 2*getOptimalDFTSize((N+1)/2); }
    .       N1 = getOptimalDCTSize(N);
    .   @endcode
    .   @param src input floating-point array.
    .   @param dst output array of the same size and type as src .
    .   @param flags transformation flags as a combination of cv::DftFlags (DCT_*)
    .   @sa dft , getOptimalDFTSize , idct
    """
    ...

def decolor(src, grayscale=..., color_boost=...) -> Tuple[grayscale, color_boost]:
    """
    .   @brief Transforms a color image to a grayscale image. It is a basic tool in digital printing, stylized
    .   black-and-white photograph rendering, and in many single channel image processing applications
    .   @cite CL12 .
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param grayscale Output 8-bit 1-channel image.
    .   @param color_boost Output 8-bit 3-channel image.
    .
    .   This function is to be applied on color images.
    """
    ...

def decomposeEssentialMat(E, R1=..., R2=..., t=...) -> Tuple[2, t]:
    """
    .   @brief Decompose an essential matrix to possible rotations and translation.
    .
    .   @param E The input essential matrix.
    .   @param R1 One possible rotation matrix.
    .   @param R2 Another possible rotation matrix.
    .   @param t One possible translation.
    .
    .   This function decomposes the essential matrix E using svd decomposition @cite HartleyZ00. In
    .   general, four possible poses exist for the decomposition of E. They are \f$[R_1, t]\f$,
    .   \f$[R_1, -t]\f$, \f$[R_2, t]\f$, \f$[R_2, -t]\f$.
    .
    .   If E gives the epipolar constraint \f$[p_2; 1]^T A^{-T} E A^{-1} [p_1; 1] = 0\f$ between the image
    .   points \f$p_1\f$ in the first image and \f$p_2\f$ in second image, then any of the tuples
    .   \f$[R_1, t]\f$, \f$[R_1, -t]\f$, \f$[R_2, t]\f$, \f$[R_2, -t]\f$ is a change of basis from the first
    .   camera's coordinate system to the second camera's coordinate system. However, by decomposing E, one
    .   can only get the direction of the translation. For this reason, the translation t is returned with
    .   unit length.
    """
    ...

def decomposeHomographyMat(
    H, K, rotations=..., translations=..., normals=...
) -> Tuple[translations, normals]:
    """
    .   @brief Decompose a homography matrix to rotation(s), translation(s) and plane normal(s).
    .
    .   @param H The input homography matrix between two images.
    .   @param K The input camera intrinsic matrix.
    .   @param rotations Array of rotation matrices.
    .   @param translations Array of translation matrices.
    .   @param normals Array of plane normal matrices.
    .
    .   This function extracts relative camera motion between two views of a planar object and returns up to
    .   four mathematical solution tuples of rotation, translation, and plane normal. The decomposition of
    .   the homography matrix H is described in detail in @cite Malis.
    .
    .   If the homography H, induced by the plane, gives the constraint
    .   \f[s_i \vecthree{x'_i}{y'_i}{1} \sim H \vecthree{x_i}{y_i}{1}\f] on the source image points
    .   \f$p_i\f$ and the destination image points \f$p'_i\f$, then the tuple of rotations[k] and
    .   translations[k] is a change of basis from the source camera's coordinate system to the destination
    .   camera's coordinate system. However, by decomposing H, one can only get the translation normalized
    .   by the (typically unknown) depth of the scene, i.e. its direction but with normalized length.
    .
    .   If point correspondences are available, at least two solutions may further be invalidated, by
    .   applying positive depth constraint, i.e. all points must be in front of the camera.
    """
    ...

def decomposeProjectionMatrix(
    projMatrix,
    cameraMatrix=...,
    rotMatrix=...,
    transVect=...,
    rotMatrixX=...,
    rotMatrixY=...,
    rotMatrixZ=...,
    eulerAngles=...,
) -> Tuple[Z, eulerAngles]:
    """
    .   @brief Decomposes a projection matrix into a rotation matrix and a camera intrinsic matrix.
    .
    .   @param projMatrix 3x4 input projection matrix P.
    .   @param cameraMatrix Output 3x3 camera intrinsic matrix \f$\cameramatrix{A}\f$.
    .   @param rotMatrix Output 3x3 external rotation matrix R.
    .   @param transVect Output 4x1 translation vector T.
    .   @param rotMatrixX Optional 3x3 rotation matrix around x-axis.
    .   @param rotMatrixY Optional 3x3 rotation matrix around y-axis.
    .   @param rotMatrixZ Optional 3x3 rotation matrix around z-axis.
    .   @param eulerAngles Optional three-element vector containing three Euler angles of rotation in
    .   degrees.
    .
    .   The function computes a decomposition of a projection matrix into a calibration and a rotation
    .   matrix and the position of a camera.
    .
    .   It optionally returns three rotation matrices, one for each axis, and three Euler angles that could
    .   be used in OpenGL. Note, there is always more than one sequence of rotations about the three
    .   principal axes that results in the same orientation of an object, e.g. see @cite Slabaugh . Returned
    .   tree rotation matrices and corresponding three Euler angles are only one of the possible solutions.
    .
    .   The function is based on RQDecomp3x3 .
    """
    ...

def demosaicing(src, code, dst=..., dstCn=...) -> dst:
    """
    .   @brief main function for all demosaicing processes
    .
    .   @param src input image: 8-bit unsigned or 16-bit unsigned.
    .   @param dst output image of the same size and depth as src.
    .   @param code Color space conversion code (see the description below).
    .   @param dstCn number of channels in the destination image; if the parameter is 0, the number of the
    .   channels is derived automatically from src and code.
    .
    .   The function can do the following transformations:
    .
    .   -   Demosaicing using bilinear interpolation
    .
    .       #COLOR_BayerBG2BGR , #COLOR_BayerGB2BGR , #COLOR_BayerRG2BGR , #COLOR_BayerGR2BGR
    .
    .       #COLOR_BayerBG2GRAY , #COLOR_BayerGB2GRAY , #COLOR_BayerRG2GRAY , #COLOR_BayerGR2GRAY
    .
    .   -   Demosaicing using Variable Number of Gradients.
    .
    .       #COLOR_BayerBG2BGR_VNG , #COLOR_BayerGB2BGR_VNG , #COLOR_BayerRG2BGR_VNG , #COLOR_BayerGR2BGR_VNG
    .
    .   -   Edge-Aware Demosaicing.
    .
    .       #COLOR_BayerBG2BGR_EA , #COLOR_BayerGB2BGR_EA , #COLOR_BayerRG2BGR_EA , #COLOR_BayerGR2BGR_EA
    .
    .   -   Demosaicing with alpha channel
    .
    .       #COLOR_BayerBG2BGRA , #COLOR_BayerGB2BGRA , #COLOR_BayerRG2BGRA , #COLOR_BayerGR2BGRA
    .
    .   @sa cvtColor
    """
    ...

def denoise_TVL1(observations, result, lambda_=..., niters=...) -> None:
    """
    .   @brief Primal-dual algorithm is an algorithm for solving special types of variational problems (that is,
    .   finding a function to minimize some functional). As the image denoising, in particular, may be seen
    .   as the variational problem, primal-dual algorithm then can be used to perform denoising and this is
    .   exactly what is implemented.
    .
    .   It should be noted, that this implementation was taken from the July 2013 blog entry
    .   @cite MA13 , which also contained (slightly more general) ready-to-use source code on Python.
    .   Subsequently, that code was rewritten on C++ with the usage of openCV by Vadim Pisarevsky at the end
    .   of July 2013 and finally it was slightly adapted by later authors.
    .
    .   Although the thorough discussion and justification of the algorithm involved may be found in
    .   @cite ChambolleEtAl, it might make sense to skim over it here, following @cite MA13 . To begin
    .   with, we consider the 1-byte gray-level images as the functions from the rectangular domain of
    .   pixels (it may be seen as set
    .   \f$\left\{(x,y)\in\mathbb{N}\times\mathbb{N}\mid 1\leq x\leq n,\;1\leq y\leq m\right\}\f$ for some
    .   \f$m,\;n\in\mathbb{N}\f$) into \f$\{0,1,\dots,255\}\f$. We shall denote the noised images as \f$f_i\f$ and with
    .   this view, given some image \f$x\f$ of the same size, we may measure how bad it is by the formula
    .
    .   \f[\left\|\left\|\nabla x\right\|\right\| + \lambda\sum_i\left\|\left\|x-f_i\right\|\right\|\f]
    .
    .   \f$\|\|\cdot\|\|\f$ here denotes \f$L_2\f$-norm and as you see, the first addend states that we want our
    .   image to be smooth (ideally, having zero gradient, thus being constant) and the second states that
    .   we want our result to be close to the observations we've got. If we treat \f$x\f$ as a function, this is
    .   exactly the functional what we seek to minimize and here the Primal-Dual algorithm comes into play.
    .
    .   @param observations This array should contain one or more noised versions of the image that is to
    .   be restored.
    .   @param result Here the denoised image will be stored. There is no need to do pre-allocation of
    .   storage space, as it will be automatically allocated, if necessary.
    .   @param lambda Corresponds to \f$\lambda\f$ in the formulas above. As it is enlarged, the smooth
    .   (blurred) images are treated more favorably than detailed (but maybe more noised) ones. Roughly
    .   speaking, as it becomes smaller, the result will be more blur but more sever outliers will be
    .   removed.
    .   @param niters Number of iterations that the algorithm will run. Of course, as more iterations as
    .   better, but it is hard to quantitatively refine this statement, so just use the default and
    .   increase it if the results are poor.
    """
    ...

def descr_of(*args, **kwargs) -> ExtractMetaCallback:
    """ """
    ...

def destroyAllWindows() -> None:
    """
    .   @brief Destroys all of the HighGUI windows.
    .
    .   The function destroyAllWindows destroys all of the opened HighGUI windows.
    """
    ...

def destroyWindow(winname: Text) -> None:
    """
    .   @brief Destroys the specified window.
    .
    .   The function destroyWindow destroys the window with the given name.
    .
    .   @param winname Name of the window to be destroyed.
    """
    ...

def detailEnhance(src, dst=..., sigma_s=..., sigma_r=...) -> dst:
    """
    .   @brief This filter enhances the details of a particular image.
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param dst Output image with the same size and type as src.
    .   @param sigma_s %Range between 0 to 200.
    .   @param sigma_r %Range between 0 to 1.
    """
    ...

def determinant(mtx) -> retval:
    """
    .   @brief Returns the determinant of a square floating-point matrix.
    .
    .   The function cv::determinant calculates and returns the determinant of the
    .   specified matrix. For small matrices ( mtx.cols=mtx.rows\<=3 ), the
    .   direct method is used. For larger matrices, the function uses LU
    .   factorization with partial pivoting.
    .
    .   For symmetric positively-determined matrices, it is also possible to use
    .   eigen decomposition to calculate the determinant.
    .   @param mtx input matrix that must have CV_32FC1 or CV_64FC1 type and
    .   square size.
    .   @sa trace, invert, solve, eigen, @ref MatrixExpressions
    """
    ...

def dft(src, dst=..., flags=..., nonzeroRows=...) -> dst:
    """
    .   @brief Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array.
    .
    .   The function cv::dft performs one of the following:
    .   -   Forward the Fourier transform of a 1D vector of N elements:
    .       \f[Y = F^{(N)}  \cdot X,\f]
    .       where \f$F^{(N)}_{jk}=\exp(-2\pi i j k/N)\f$ and \f$i=\sqrt{-1}\f$
    .   -   Inverse the Fourier transform of a 1D vector of N elements:
    .       \f[\begin{array}{l} X'=  \left (F^{(N)} \right )^{-1}  \cdot Y =  \left (F^{(N)} \right )^*  \cdot y  \\ X = (1/N)  \cdot X, \end{array}\f]
    .       where \f$F^*=\left(\textrm{Re}(F^{(N)})-\textrm{Im}(F^{(N)})\right)^T\f$
    .   -   Forward the 2D Fourier transform of a M x N matrix:
    .       \f[Y = F^{(M)}  \cdot X  \cdot F^{(N)}\f]
    .   -   Inverse the 2D Fourier transform of a M x N matrix:
    .       \f[\begin{array}{l} X'=  \left (F^{(M)} \right )^*  \cdot Y  \cdot \left (F^{(N)} \right )^* \\ X =  \frac{1}{M \cdot N} \cdot X' \end{array}\f]
    .
    .   In case of real (single-channel) data, the output spectrum of the forward Fourier transform or input
    .   spectrum of the inverse Fourier transform can be represented in a packed format called *CCS*
    .   (complex-conjugate-symmetrical). It was borrowed from IPL (Intel\* Image Processing Library). Here
    .   is how 2D *CCS* spectrum looks:
    .   \f[\begin{bmatrix} Re Y_{0,0} & Re Y_{0,1} & Im Y_{0,1} & Re Y_{0,2} & Im Y_{0,2} &  \cdots & Re Y_{0,N/2-1} & Im Y_{0,N/2-1} & Re Y_{0,N/2}  \\ Re Y_{1,0} & Re Y_{1,1} & Im Y_{1,1} & Re Y_{1,2} & Im Y_{1,2} &  \cdots & Re Y_{1,N/2-1} & Im Y_{1,N/2-1} & Re Y_{1,N/2}  \\ Im Y_{1,0} & Re Y_{2,1} & Im Y_{2,1} & Re Y_{2,2} & Im Y_{2,2} &  \cdots & Re Y_{2,N/2-1} & Im Y_{2,N/2-1} & Im Y_{1,N/2}  \\ \hdotsfor{9} \\ Re Y_{M/2-1,0} &  Re Y_{M-3,1}  & Im Y_{M-3,1} &  \hdotsfor{3} & Re Y_{M-3,N/2-1} & Im Y_{M-3,N/2-1}& Re Y_{M/2-1,N/2}  \\ Im Y_{M/2-1,0} &  Re Y_{M-2,1}  & Im Y_{M-2,1} &  \hdotsfor{3} & Re Y_{M-2,N/2-1} & Im Y_{M-2,N/2-1}& Im Y_{M/2-1,N/2}  \\ Re Y_{M/2,0}  &  Re Y_{M-1,1} &  Im Y_{M-1,1} &  \hdotsfor{3} & Re Y_{M-1,N/2-1} & Im Y_{M-1,N/2-1}& Re Y_{M/2,N/2} \end{bmatrix}\f]
    .
    .   In case of 1D transform of a real vector, the output looks like the first row of the matrix above.
    .
    .   So, the function chooses an operation mode depending on the flags and size of the input array:
    .   -   If #DFT_ROWS is set or the input array has a single row or single column, the function
    .       performs a 1D forward or inverse transform of each row of a matrix when #DFT_ROWS is set.
    .       Otherwise, it performs a 2D transform.
    .   -   If the input array is real and #DFT_INVERSE is not set, the function performs a forward 1D or
    .       2D transform:
    .       -   When #DFT_COMPLEX_OUTPUT is set, the output is a complex matrix of the same size as
    .           input.
    .       -   When #DFT_COMPLEX_OUTPUT is not set, the output is a real matrix of the same size as
    .           input. In case of 2D transform, it uses the packed format as shown above. In case of a
    .           single 1D transform, it looks like the first row of the matrix above. In case of
    .           multiple 1D transforms (when using the #DFT_ROWS flag), each row of the output matrix
    .           looks like the first row of the matrix above.
    .   -   If the input array is complex and either #DFT_INVERSE or #DFT_REAL_OUTPUT are not set, the
    .       output is a complex array of the same size as input. The function performs a forward or
    .       inverse 1D or 2D transform of the whole input array or each row of the input array
    .       independently, depending on the flags DFT_INVERSE and DFT_ROWS.
    .   -   When #DFT_INVERSE is set and the input array is real, or it is complex but #DFT_REAL_OUTPUT
    .       is set, the output is a real array of the same size as input. The function performs a 1D or 2D
    .       inverse transformation of the whole input array or each individual row, depending on the flags
    .       #DFT_INVERSE and #DFT_ROWS.
    .
    .   If #DFT_SCALE is set, the scaling is done after the transformation.
    .
    .   Unlike dct , the function supports arrays of arbitrary size. But only those arrays are processed
    .   efficiently, whose sizes can be factorized in a product of small prime numbers (2, 3, and 5 in the
    .   current implementation). Such an efficient DFT size can be calculated using the getOptimalDFTSize
    .   method.
    .
    .   The sample below illustrates how to calculate a DFT-based convolution of two 2D real arrays:
    .   @code
    .       void convolveDFT(InputArray A, InputArray B, OutputArray C)
    .       {
    .           // reallocate the output array if needed
    .           C.create(abs(A.rows - B.rows)+1, abs(A.cols - B.cols)+1, A.type());
    .           Size dftSize;
    .           // calculate the size of DFT transform
    .           dftSize.width = getOptimalDFTSize(A.cols + B.cols - 1);
    .           dftSize.height = getOptimalDFTSize(A.rows + B.rows - 1);
    .
    .           // allocate temporary buffers and initialize them with 0's
    .           Mat tempA(dftSize, A.type(), Scalar::all(0));
    .           Mat tempB(dftSize, B.type(), Scalar::all(0));
    .
    .           // copy A and B to the top-left corners of tempA and tempB, respectively
    .           Mat roiA(tempA, Rect(0,0,A.cols,A.rows));
    .           A.copyTo(roiA);
    .           Mat roiB(tempB, Rect(0,0,B.cols,B.rows));
    .           B.copyTo(roiB);
    .
    .           // now transform the padded A & B in-place;
    .           // use "nonzeroRows" hint for faster processing
    .           dft(tempA, tempA, 0, A.rows);
    .           dft(tempB, tempB, 0, B.rows);
    .
    .           // multiply the spectrums;
    .           // the function handles packed spectrum representations well
    .           mulSpectrums(tempA, tempB, tempA);
    .
    .           // transform the product back from the frequency domain.
    .           // Even though all the result rows will be non-zero,
    .           // you need only the first C.rows of them, and thus you
    .           // pass nonzeroRows == C.rows
    .           dft(tempA, tempA, DFT_INVERSE + DFT_SCALE, C.rows);
    .
    .           // now copy the result back to C.
    .           tempA(Rect(0, 0, C.cols, C.rows)).copyTo(C);
    .
    .           // all the temporary buffers will be deallocated automatically
    .       }
    .   @endcode
    .   To optimize this sample, consider the following approaches:
    .   -   Since nonzeroRows != 0 is passed to the forward transform calls and since A and B are copied to
    .       the top-left corners of tempA and tempB, respectively, it is not necessary to clear the whole
    .       tempA and tempB. It is only necessary to clear the tempA.cols - A.cols ( tempB.cols - B.cols)
    .       rightmost columns of the matrices.
    .   -   This DFT-based convolution does not have to be applied to the whole big arrays, especially if B
    .       is significantly smaller than A or vice versa. Instead, you can calculate convolution by parts.
    .       To do this, you need to split the output array C into multiple tiles. For each tile, estimate
    .       which parts of A and B are required to calculate convolution in this tile. If the tiles in C are
    .       too small, the speed will decrease a lot because of repeated work. In the ultimate case, when
    .       each tile in C is a single pixel, the algorithm becomes equivalent to the naive convolution
    .       algorithm. If the tiles are too big, the temporary arrays tempA and tempB become too big and
    .       there is also a slowdown because of bad cache locality. So, there is an optimal tile size
    .       somewhere in the middle.
    .   -   If different tiles in C can be calculated in parallel and, thus, the convolution is done by
    .       parts, the loop can be threaded.
    .
    .   All of the above improvements have been implemented in #matchTemplate and #filter2D . Therefore, by
    .   using them, you can get the performance even better than with the above theoretically optimal
    .   implementation. Though, those two functions actually calculate cross-correlation, not convolution,
    .   so you need to "flip" the second convolution operand B vertically and horizontally using flip .
    .   @note
    .   -   An example using the discrete fourier transform can be found at
    .       opencv_source_code/samples/cpp/dft.cpp
    .   -   (Python) An example using the dft functionality to perform Wiener deconvolution can be found
    .       at opencv_source/samples/python/deconvolution.py
    .   -   (Python) An example rearranging the quadrants of a Fourier image can be found at
    .       opencv_source/samples/python/dft.py
    .   @param src input array that could be real or complex.
    .   @param dst output array whose size and type depends on the flags .
    .   @param flags transformation flags, representing a combination of the #DftFlags
    .   @param nonzeroRows when the parameter is not zero, the function assumes that only the first
    .   nonzeroRows rows of the input array (#DFT_INVERSE is not set) or only the first nonzeroRows of the
    .   output array (#DFT_INVERSE is set) contain non-zeros, thus, the function can handle the rest of the
    .   rows more efficiently and save some time; this technique is very useful for calculating array
    .   cross-correlation or convolution using DFT.
    .   @sa dct , getOptimalDFTSize , mulSpectrums, filter2D , matchTemplate , flip , cartToPolar ,
    .   magnitude , phase
    """
    ...

def dilate(
    src: ndarray,
    kernel: ndarray,
    dst: ndarray = ...,
    anchor: Tuple[int, int] = ...,
    iterations: int = ...,
    borderType: int = ...,
    borderValue: Any = ...,
) -> ndarray:
    """
    .   @brief Dilates an image by using a specific structuring element.
    .
    .   The function dilates the source image using the specified structuring element that determines the
    .   shape of a pixel neighborhood over which the maximum is taken:
    .   \f[\texttt{dst} (x,y) =  \max _{(x',y'):  \, \texttt{element} (x',y') \ne0 } \texttt{src} (x+x',y+y')\f]
    .
    .   The function supports the in-place mode. Dilation can be applied several ( iterations ) times. In
    .   case of multi-channel images, each channel is processed independently.
    .
    .   @param src input image; the number of channels can be arbitrary, but the depth should be one of
    .   CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.
    .   @param dst output image of the same size and type as src.
    .   @param kernel structuring element used for dilation; if elemenat=Mat(), a 3 x 3 rectangular
    .   structuring element is used. Kernel can be created using #getStructuringElement
    .   @param anchor position of the anchor within the element; default value (-1, -1) means that the
    .   anchor is at the element center.
    .   @param iterations number of times dilation is applied.
    .   @param borderType pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not suported.
    .   @param borderValue border value in case of a constant border
    .   @sa  erode, morphologyEx, getStructuringElement
    """
    ...

def displayOverlay(winname, text, delayms=...) -> None:
    """
    .   @brief Displays a text on a window image as an overlay for a specified duration.
    .
    .   The function displayOverlay displays useful information/tips on top of the window for a certain
    .   amount of time *delayms*. The function does not modify the image, displayed in the window, that is,
    .   after the specified delay the original content of the window is restored.
    .
    .   @param winname Name of the window.
    .   @param text Overlay text to write on a window image.
    .   @param delayms The period (in milliseconds), during which the overlay text is displayed. If this
    .   function is called before the previous overlay text timed out, the timer is restarted and the text
    .   is updated. If this value is zero, the text never disappears.
    """
    ...

def displayStatusBar(winname, text, delayms=...) -> None:
    """
    .   @brief Displays a text on the window statusbar during the specified period of time.
    .
    .   The function displayStatusBar displays useful information/tips on top of the window for a certain
    .   amount of time *delayms* . This information is displayed on the window statusbar (the window must be
    .   created with the CV_GUI_EXPANDED flags).
    .
    .   @param winname Name of the window.
    .   @param text Text to write on the window statusbar.
    .   @param delayms Duration (in milliseconds) to display the text. If this function is called before
    .   the previous text timed out, the timer is restarted and the text is updated. If this value is
    .   zero, the text never disappears.
    """
    ...

def distanceTransform(
    src: ndarray,
    distanceType: int,
    maskSize: int,
    dst: ndarray = ...,
    dstType: int = ...,
) -> ndarray:
    """
    .   @overload
    .   @param src 8-bit, single-channel (binary) source image.
    .   @param dst Output image with calculated distances. It is a 8-bit or 32-bit floating-point,
    .   single-channel image of the same size as src .
    .   @param distanceType Type of distance, see #DistanceTypes
    .   @param maskSize Size of the distance transform mask, see #DistanceTransformMasks. In case of the
    .   #DIST_L1 or #DIST_C distance type, the parameter is forced to 3 because a \f$3\times 3\f$ mask gives
    .   the same result as \f$5\times 5\f$ or any larger aperture.
    .   @param dstType Type of output image. It can be CV_8U or CV_32F. Type CV_8U can be used only for
    .   the first variant of the function and distanceType == #DIST_L1.
    """
    ...

def distanceTransformWithLabels(
    src, distanceType, maskSize, dst=..., labels=..., labelType=...
) -> Tuple[dst, labels]:
    """
    .   @brief Calculates the distance to the closest zero pixel for each pixel of the source image.
    .
    .   The function cv::distanceTransform calculates the approximate or precise distance from every binary
    .   image pixel to the nearest zero pixel. For zero image pixels, the distance will obviously be zero.
    .
    .   When maskSize == #DIST_MASK_PRECISE and distanceType == #DIST_L2 , the function runs the
    .   algorithm described in @cite Felzenszwalb04 . This algorithm is parallelized with the TBB library.
    .
    .   In other cases, the algorithm @cite Borgefors86 is used. This means that for a pixel the function
    .   finds the shortest path to the nearest zero pixel consisting of basic shifts: horizontal, vertical,
    .   diagonal, or knight's move (the latest is available for a \f$5\times 5\f$ mask). The overall
    .   distance is calculated as a sum of these basic distances. Since the distance function should be
    .   symmetric, all of the horizontal and vertical shifts must have the same cost (denoted as a ), all
    .   the diagonal shifts must have the same cost (denoted as `b`), and all knight's moves must have the
    .   same cost (denoted as `c`). For the #DIST_C and #DIST_L1 types, the distance is calculated
    .   precisely, whereas for #DIST_L2 (Euclidean distance) the distance can be calculated only with a
    .   relative error (a \f$5\times 5\f$ mask gives more accurate results). For `a`,`b`, and `c`, OpenCV
    .   uses the values suggested in the original paper:
    .   - DIST_L1: `a = 1, b = 2`
    .   - DIST_L2:
    .       - `3 x 3`: `a=0.955, b=1.3693`
    .       - `5 x 5`: `a=1, b=1.4, c=2.1969`
    .   - DIST_C: `a = 1, b = 1`
    .
    .   Typically, for a fast, coarse distance estimation #DIST_L2, a \f$3\times 3\f$ mask is used. For a
    .   more accurate distance estimation #DIST_L2, a \f$5\times 5\f$ mask or the precise algorithm is used.
    .   Note that both the precise and the approximate algorithms are linear on the number of pixels.
    .
    .   This variant of the function does not only compute the minimum distance for each pixel \f$(x, y)\f$
    .   but also identifies the nearest connected component consisting of zero pixels
    .   (labelType==#DIST_LABEL_CCOMP) or the nearest zero pixel (labelType==#DIST_LABEL_PIXEL). Index of the
    .   component/pixel is stored in `labels(x, y)`. When labelType==#DIST_LABEL_CCOMP, the function
    .   automatically finds connected components of zero pixels in the input image and marks them with
    .   distinct labels. When labelType==#DIST_LABEL_PIXEL, the function scans through the input image and
    .   marks all the zero pixels with distinct labels.
    .
    .   In this mode, the complexity is still linear. That is, the function provides a very fast way to
    .   compute the Voronoi diagram for a binary image. Currently, the second variant can use only the
    .   approximate distance transform algorithm, i.e. maskSize=#DIST_MASK_PRECISE is not supported
    .   yet.
    .
    .   @param src 8-bit, single-channel (binary) source image.
    .   @param dst Output image with calculated distances. It is a 8-bit or 32-bit floating-point,
    .   single-channel image of the same size as src.
    .   @param labels Output 2D array of labels (the discrete Voronoi diagram). It has the type
    .   CV_32SC1 and the same size as src.
    .   @param distanceType Type of distance, see #DistanceTypes
    .   @param maskSize Size of the distance transform mask, see #DistanceTransformMasks.
    .   #DIST_MASK_PRECISE is not supported by this variant. In case of the #DIST_L1 or #DIST_C distance type,
    .   the parameter is forced to 3 because a \f$3\times 3\f$ mask gives the same result as \f$5\times
    .   5\f$ or any larger aperture.
    .   @param labelType Type of the label array to build, see #DistanceTransformLabelTypes.
    """
    ...

def divide(src1, src2, dst=..., scale=..., dtype=...) -> dst:
    """
    .   @brief Performs per-element division of two arrays or a scalar by an array.
    .
    .   The function cv::divide divides one array by another:
    .   \f[\texttt{dst(I) = saturate(src1(I)*scale/src2(I))}\f]
    .   or a scalar by an array when there is no src1 :
    .   \f[\texttt{dst(I) = saturate(scale/src2(I))}\f]
    .
    .   Different channels of multi-channel arrays are processed independently.
    .
    .   For integer types when src2(I) is zero, dst(I) will also be zero.
    .
    .   @note In case of floating point data there is no special defined behavior for zero src2(I) values.
    .   Regular floating-point division is used.
    .   Expect correct IEEE-754 behaviour for floating-point data (with NaN, Inf result values).
    .
    .   @note Saturation is not applied when the output array has the depth CV_32S. You may even get
    .   result of an incorrect sign in the case of overflow.
    .   @param src1 first input array.
    .   @param src2 second input array of the same size and type as src1.
    .   @param scale scalar factor.
    .   @param dst output array of the same size and type as src2.
    .   @param dtype optional depth of the output array; if -1, dst will have depth src2.depth(), but in
    .   case of an array-by-array division, you can only pass -1 when src1.depth()==src2.depth().
    .   @sa  multiply, add, subtract



    divide(scale, src2, dst=..., dtype=...) -> dst
    .   @overload
    """
    ...

def dnn_registerLayer(*args, **kwargs):
    """
    registerLayer(type, class) -> None
    """
    ...

def dnn_unregisterLayer(*args, **kwargs):
    """
    unregisterLayer(type) -> None
    """
    ...

def drawChessboardCorners(image, patternSize, corners, patternWasFound) -> image:
    """
    .   @brief Renders the detected chessboard corners.
    .
    .   @param image Destination image. It must be an 8-bit color image.
    .   @param patternSize Number of inner corners per a chessboard row and column
    .   (patternSize = cv::Size(points_per_row,points_per_column)).
    .   @param corners Array of detected corners, the output of findChessboardCorners.
    .   @param patternWasFound Parameter indicating whether the complete board was found or not. The
    .   return value of findChessboardCorners should be passed here.
    .
    .   The function draws individual chessboard corners detected either as red circles if the board was not
    .   found, or as colored corners connected with lines if the board was found.
    """
    ...

def drawContours(
    image: ndarray,
    contours: ArrayLike,
    contourIdx: int,
    color: Tuple[int, ...] = ...,
    thickness: int = ...,
    lineType: int = ...,
    hierarchy: Optional[ndarray] = ...,
    maxLevel: int = ...,
    offset: int = ...,
) -> ndarray:
    """
    .   @brief Draws contours outlines or filled contours.
    .
    .   The function draws contour outlines in the image if \f$\texttt{thickness} \ge 0\f$ or fills the area
    .   bounded by the contours if \f$\texttt{thickness}<0\f$ . The example below shows how to retrieve
    .   connected components from the binary image and label them: :
    .   @include snippets/imgproc_drawContours.cpp
    .
    .   @param image Destination image.
    .   @param contours All the input contours. Each contour is stored as a point vector.
    .   @param contourIdx Parameter indicating a contour to draw. If it is negative, all the contours are drawn.
    .   @param color Color of the contours.
    .   @param thickness Thickness of lines the contours are drawn with. If it is negative (for example,
    .   thickness=#FILLED ), the contour interiors are drawn.
    .   @param lineType Line connectivity. See #LineTypes
    .   @param hierarchy Optional information about hierarchy. It is only needed if you want to draw only
    .   some of the contours (see maxLevel ).
    .   @param maxLevel Maximal level for drawn contours. If it is 0, only the specified contour is drawn.
    .   If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function
    .   draws the contours, all the nested contours, all the nested-to-nested contours, and so on. This
    .   parameter is only taken into account when there is hierarchy available.
    .   @param offset Optional contour shift parameter. Shift all the drawn contours by the specified
    .   \f$\texttt{offset}=(dx,dy)\f$ .
    .   @note When thickness=#FILLED, the function is designed to handle connected components with holes correctly
    .   even when no hierarchy date is provided. This is done by analyzing all the outlines together
    .   using even-odd rule. This may give incorrect results if you have a joint collection of separately retrieved
    .   contours. In order to solve this problem, you need to call #drawContours separately for each sub-group
    .   of contours, or iterate over the collection using contourIdx parameter.
    """
    ...

def drawFrameAxes(
    image, cameraMatrix, distCoeffs, rvec, tvec, length, thickness=...
) -> image:
    """
    .   @brief Draw axes of the world/object coordinate system from pose estimation. @sa solvePnP
    .
    .   @param image Input/output image. It must have 1 or 3 channels. The number of channels is not altered.
    .   @param cameraMatrix Input 3x3 floating-point matrix of camera intrinsic parameters.
    .   \f$\cameramatrix{A}\f$
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$\distcoeffs\f$. If the vector is empty, the zero distortion coefficients are assumed.
    .   @param rvec Rotation vector (see @ref Rodrigues ) that, together with tvec, brings points from
    .   the model coordinate system to the camera coordinate system.
    .   @param tvec Translation vector.
    .   @param length Length of the painted axes in the same unit than tvec (usually in meters).
    .   @param thickness Line thickness of the painted axes.
    .
    .   This function draws the axes of the world/object coordinate system w.r.t. to the camera frame.
    .   OX is drawn in red, OY in green and OZ in blue.
    """
    ...

def drawKeypoints(image, keypoints, outImage, color=..., flags=...) -> outImage:
    """
    .   @brief Draws keypoints.
    .
    .   @param image Source image.
    .   @param keypoints Keypoints from the source image.
    .   @param outImage Output image. Its content depends on the flags value defining what is drawn in the
    .   output image. See possible flags bit values below.
    .   @param color Color of keypoints.
    .   @param flags Flags setting drawing features. Possible flags bit values are defined by
    .   DrawMatchesFlags. See details above in drawMatches .
    .
    .   @note
    .   For Python API, flags are modified as cv.DRAW_MATCHES_FLAGS_DEFAULT,
    .   cv.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS, cv.DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG,
    .   cv.DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS
    """
    ...

def drawMarker(
    img, position, color, markerType=..., markerSize=..., thickness=..., line_type=...
) -> img:
    """
    .   @brief Draws a marker on a predefined position in an image.
    .
    .   The function cv::drawMarker draws a marker on a given position in the image. For the moment several
    .   marker types are supported, see #MarkerTypes for more information.
    .
    .   @param img Image.
    .   @param position The point where the crosshair is positioned.
    .   @param color Line color.
    .   @param markerType The specific type of marker you want to use, see #MarkerTypes
    .   @param thickness Line thickness.
    .   @param line_type Type of the line, See #LineTypes
    .   @param markerSize The length of the marker axis [default = 20 pixels]
    """
    ...

def drawMatches(
    img1,
    keypoints1,
    img2,
    keypoints2,
    matches1to2,
    outImg,
    matchColor=...,
    singlePointColor=...,
    matchesMask=...,
    flags=...,
) -> outImg:
    """
    .   @brief Draws the found matches of keypoints from two images.
    .
    .   @param img1 First source image.
    .   @param keypoints1 Keypoints from the first source image.
    .   @param img2 Second source image.
    .   @param keypoints2 Keypoints from the second source image.
    .   @param matches1to2 Matches from the first image to the second one, which means that keypoints1[i]
    .   has a corresponding point in keypoints2[matches[i]] .
    .   @param outImg Output image. Its content depends on the flags value defining what is drawn in the
    .   output image. See possible flags bit values below.
    .   @param matchColor Color of matches (lines and connected keypoints). If matchColor==Scalar::all(-1)
    .   , the color is generated randomly.
    .   @param singlePointColor Color of single keypoints (circles), which means that keypoints do not
    .   have the matches. If singlePointColor==Scalar::all(-1) , the color is generated randomly.
    .   @param matchesMask Mask determining which matches are drawn. If the mask is empty, all matches are
    .   drawn.
    .   @param flags Flags setting drawing features. Possible flags bit values are defined by
    .   DrawMatchesFlags.
    .
    .   This function draws matches of keypoints from two images in the output image. Match is a line
    .   connecting two keypoints (circles). See cv::DrawMatchesFlags.
    """
    ...

def drawMatchesKnn(
    img1,
    keypoints1,
    img2,
    keypoints2,
    matches1to2,
    outImg,
    matchColor=...,
    singlePointColor=...,
    matchesMask=...,
    flags=...,
) -> outImg:
    """
    .   @overload
    """
    ...

def edgePreservingFilter(src, dst=..., flags=..., sigma_s=..., sigma_r=...) -> dst:
    """
    .   @brief Filtering is the fundamental operation in image and video processing. Edge-preserving smoothing
    .   filters are used in many different applications @cite EM11 .
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param dst Output 8-bit 3-channel image.
    .   @param flags Edge preserving filters: cv::RECURS_FILTER or cv::NORMCONV_FILTER
    .   @param sigma_s %Range between 0 to 200.
    .   @param sigma_r %Range between 0 to 1.
    """
    ...

def eigen(src, eigenvalues=..., eigenvectors=...) -> Tuple[s, eigenvectors]:
    """
    .   @brief Calculates eigenvalues and eigenvectors of a symmetric matrix.
    .
    .   The function cv::eigen calculates just eigenvalues, or eigenvalues and eigenvectors of the symmetric
    .   matrix src:
    .   @code
    .       src*eigenvectors.row(i).t() = eigenvalues.at<srcType>(i)*eigenvectors.row(i).t()
    .   @endcode
    .
    .   @note Use cv::eigenNonSymmetric for calculation of real eigenvalues and eigenvectors of non-symmetric matrix.
    .
    .   @param src input matrix that must have CV_32FC1 or CV_64FC1 type, square size and be symmetrical
    .   (src ^T^ == src).
    .   @param eigenvalues output vector of eigenvalues of the same type as src; the eigenvalues are stored
    .   in the descending order.
    .   @param eigenvectors output matrix of eigenvectors; it has the same size and type as src; the
    .   eigenvectors are stored as subsequent matrix rows, in the same order as the corresponding
    .   eigenvalues.
    .   @sa eigenNonSymmetric, completeSymm , PCA
    """
    ...

def eigenNonSymmetric(
    src, eigenvalues=..., eigenvectors=...
) -> Tuple[eigenvalues, eigenvectors]:
    """
    .   @brief Calculates eigenvalues and eigenvectors of a non-symmetric matrix (real eigenvalues only).
    .
    .   @note Assumes real eigenvalues.
    .
    .   The function calculates eigenvalues and eigenvectors (optional) of the square matrix src:
    .   @code
    .       src*eigenvectors.row(i).t() = eigenvalues.at<srcType>(i)*eigenvectors.row(i).t()
    .   @endcode
    .
    .   @param src input matrix (CV_32FC1 or CV_64FC1 type).
    .   @param eigenvalues output vector of eigenvalues (type is the same type as src).
    .   @param eigenvectors output matrix of eigenvectors (type is the same type as src). The eigenvectors are stored as subsequent matrix rows, in the same order as the corresponding eigenvalues.
    .   @sa eigen
    """
    ...

def ellipse(
    img,
    center,
    axes,
    angle,
    startAngle,
    endAngle,
    color,
    thickness=...,
    lineType=...,
    shift=...,
) -> img:
    """
    .   @brief Draws a simple or thick elliptic arc or fills an ellipse sector.
    .
    .   The function cv::ellipse with more parameters draws an ellipse outline, a filled ellipse, an elliptic
    .   arc, or a filled ellipse sector. The drawing code uses general parametric form.
    .   A piecewise-linear curve is used to approximate the elliptic arc
    .   boundary. If you need more control of the ellipse rendering, you can retrieve the curve using
    .   #ellipse2Poly and then render it with #polylines or fill it with #fillPoly. If you use the first
    .   variant of the function and want to draw the whole ellipse, not an arc, pass `startAngle=0` and
    .   `endAngle=360`. If `startAngle` is greater than `endAngle`, they are swapped. The figure below explains
    .   the meaning of the parameters to draw the blue arc.
    .
    .   ![Parameters of Elliptic Arc](pics/ellipse.svg)
    .
    .   @param img Image.
    .   @param center Center of the ellipse.
    .   @param axes Half of the size of the ellipse main axes.
    .   @param angle Ellipse rotation angle in degrees.
    .   @param startAngle Starting angle of the elliptic arc in degrees.
    .   @param endAngle Ending angle of the elliptic arc in degrees.
    .   @param color Ellipse color.
    .   @param thickness Thickness of the ellipse arc outline, if positive. Otherwise, this indicates that
    .   a filled ellipse sector is to be drawn.
    .   @param lineType Type of the ellipse boundary. See #LineTypes
    .   @param shift Number of fractional bits in the coordinates of the center and values of axes.



    ellipse(img, box, color, thickness=..., lineType=...) -> img
    .   @overload
    .   @param img Image.
    .   @param box Alternative ellipse representation via RotatedRect. This means that the function draws
    .   an ellipse inscribed in the rotated rectangle.
    .   @param color Ellipse color.
    .   @param thickness Thickness of the ellipse arc outline, if positive. Otherwise, this indicates that
    .   a filled ellipse sector is to be drawn.
    .   @param lineType Type of the ellipse boundary. See #LineTypes
    """
    ...

def ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta) -> pts:
    """
    .   @brief Approximates an elliptic arc with a polyline.
    .
    .   The function ellipse2Poly computes the vertices of a polyline that approximates the specified
    .   elliptic arc. It is used by #ellipse. If `arcStart` is greater than `arcEnd`, they are swapped.
    .
    .   @param center Center of the arc.
    .   @param axes Half of the size of the ellipse main axes. See #ellipse for details.
    .   @param angle Rotation angle of the ellipse in degrees. See #ellipse for details.
    .   @param arcStart Starting angle of the elliptic arc in degrees.
    .   @param arcEnd Ending angle of the elliptic arc in degrees.
    .   @param delta Angle between the subsequent polyline vertices. It defines the approximation
    .   accuracy.
    .   @param pts Output vector of polyline vertices.
    """
    ...

def empty_array_desc() -> retval:
    """
    .
    """
    ...

def empty_gopaque_desc() -> retval:
    """
    .
    """
    ...

def empty_scalar_desc() -> retval:
    """
    .
    """
    ...

def equalizeHist(src, dst=...) -> dst:
    """
    .   @brief Equalizes the histogram of a grayscale image.
    .
    .   The function equalizes the histogram of the input image using the following algorithm:
    .
    .   - Calculate the histogram \f$H\f$ for src .
    .   - Normalize the histogram so that the sum of histogram bins is 255.
    .   - Compute the integral of the histogram:
    .   \f[H'_i =  \sum _{0  \le j < i} H(j)\f]
    .   - Transform the image using \f$H'\f$ as a look-up table: \f$\texttt{dst}(x,y) = H'(\texttt{src}(x,y))\f$
    .
    .   The algorithm normalizes the brightness and increases the contrast of the image.
    .
    .   @param src Source 8-bit single channel image.
    .   @param dst Destination image of the same size and type as src .
    """
    ...

def erode(
    src: ndarray,
    kernel: ndarray,
    dst: ndarray = ...,
    anchor: Tuple[int, int] = ...,
    iterations: int = ...,
    borderType: int = ...,
    borderValue: Any = ...,
) -> ndarray:
    """
    .   @brief Erodes an image by using a specific structuring element.
    .
    .   The function erodes the source image using the specified structuring element that determines the
    .   shape of a pixel neighborhood over which the minimum is taken:
    .
    .   \f[\texttt{dst} (x,y) =  \min _{(x',y'):  \, \texttt{element} (x',y') \ne0 } \texttt{src} (x+x',y+y')\f]
    .
    .   The function supports the in-place mode. Erosion can be applied several ( iterations ) times. In
    .   case of multi-channel images, each channel is processed independently.
    .
    .   @param src input image; the number of channels can be arbitrary, but the depth should be one of
    .   CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.
    .   @param dst output image of the same size and type as src.
    .   @param kernel structuring element used for erosion; if `element=Mat()`, a `3 x 3` rectangular
    .   structuring element is used. Kernel can be created using #getStructuringElement.
    .   @param anchor position of the anchor within the element; default value (-1, -1) means that the
    .   anchor is at the element center.
    .   @param iterations number of times erosion is applied.
    .   @param borderType pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not supported.
    .   @param borderValue border value in case of a constant border
    .   @sa  dilate, morphologyEx, getStructuringElement
    """
    ...

def estimateAffine2D(
    from_,
    to,
    inliers=...,
    method=...,
    ransacReprojThreshold=...,
    maxIters=...,
    confidence=...,
    refineIters=...,
) -> Tuple[retval, inliers]:
    """
    .   @brief Computes an optimal affine transformation between two 2D point sets.
    .
    .   It computes
    .   \f[
    .   \begin{bmatrix}
    .   x\\
    .   y\\
    .   \end{bmatrix}
    .   =
    .   \begin{bmatrix}
    .   a_{11} & a_{12}\\
    .   a_{21} & a_{22}\\
    .   \end{bmatrix}
    .   \begin{bmatrix}
    .   X\\
    .   Y\\
    .   \end{bmatrix}
    .   +
    .   \begin{bmatrix}
    .   b_1\\
    .   b_2\\
    .   \end{bmatrix}
    .   \f]
    .
    .   @param from First input 2D point set containing \f$(X,Y)\f$.
    .   @param to Second input 2D point set containing \f$(x,y)\f$.
    .   @param inliers Output vector indicating which points are inliers (1-inlier, 0-outlier).
    .   @param method Robust method used to compute transformation. The following methods are possible:
    .   -   @ref RANSAC - RANSAC-based robust method
    .   -   @ref LMEDS - Least-Median robust method
    .   RANSAC is the default method.
    .   @param ransacReprojThreshold Maximum reprojection error in the RANSAC algorithm to consider
    .   a point as an inlier. Applies only to RANSAC.
    .   @param maxIters The maximum number of robust method iterations.
    .   @param confidence Confidence level, between 0 and 1, for the estimated transformation. Anything
    .   between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation
    .   significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.
    .   @param refineIters Maximum number of iterations of refining algorithm (Levenberg-Marquardt).
    .   Passing 0 will disable refining, so the output matrix will be output of robust method.
    .
    .   @return Output 2D affine transformation matrix \f$2 \times 3\f$ or empty matrix if transformation
    .   could not be estimated. The returned matrix has the following form:
    .   \f[
    .   \begin{bmatrix}
    .   a_{11} & a_{12} & b_1\\
    .   a_{21} & a_{22} & b_2\\
    .   \end{bmatrix}
    .   \f]
    .
    .   The function estimates an optimal 2D affine transformation between two 2D point sets using the
    .   selected robust algorithm.
    .
    .   The computed transformation is then refined further (using only inliers) with the
    .   Levenberg-Marquardt method to reduce the re-projection error even more.
    .
    .   @note
    .   The RANSAC method can handle practically any ratio of outliers but needs a threshold to
    .   distinguish inliers from outliers. The method LMeDS does not need any threshold but it works
    .   correctly only when there are more than 50% of inliers.
    .
    .   @sa estimateAffinePartial2D, getAffineTransform



    estimateAffine2D(pts1, pts2, params, inliers=...) -> retval, inliers
    .
    """
    ...

def estimateAffine3D(
    src, dst, out=..., inliers=..., ransacThreshold=..., confidence=...
) -> Tuple[t, inliers]:
    """
    .   @brief Computes an optimal affine transformation between two 3D point sets.
    .
    .   It computes
    .   \f[
    .   \begin{bmatrix}
    .   x\\
    .   y\\
    .   z\\
    .   \end{bmatrix}
    .   =
    .   \begin{bmatrix}
    .   a_{11} & a_{12} & a_{13}\\
    .   a_{21} & a_{22} & a_{23}\\
    .   a_{31} & a_{32} & a_{33}\\
    .   \end{bmatrix}
    .   \begin{bmatrix}
    .   X\\
    .   Y\\
    .   Z\\
    .   \end{bmatrix}
    .   +
    .   \begin{bmatrix}
    .   b_1\\
    .   b_2\\
    .   b_3\\
    .   \end{bmatrix}
    .   \f]
    .
    .   @param src First input 3D point set containing \f$(X,Y,Z)\f$.
    .   @param dst Second input 3D point set containing \f$(x,y,z)\f$.
    .   @param out Output 3D affine transformation matrix \f$3 \times 4\f$ of the form
    .   \f[
    .   \begin{bmatrix}
    .   a_{11} & a_{12} & a_{13} & b_1\\
    .   a_{21} & a_{22} & a_{23} & b_2\\
    .   a_{31} & a_{32} & a_{33} & b_3\\
    .   \end{bmatrix}
    .   \f]
    .   @param inliers Output vector indicating which points are inliers (1-inlier, 0-outlier).
    .   @param ransacThreshold Maximum reprojection error in the RANSAC algorithm to consider a point as
    .   an inlier.
    .   @param confidence Confidence level, between 0 and 1, for the estimated transformation. Anything
    .   between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation
    .   significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.
    .
    .   The function estimates an optimal 3D affine transformation between two 3D point sets using the
    .   RANSAC algorithm.
    """
    ...

def estimateAffinePartial2D(
    from_,
    to,
    inliers=...,
    method=...,
    ransacReprojThreshold=...,
    maxIters=...,
    confidence=...,
    refineIters=...,
) -> Tuple[retval, inliers]:
    """
    .   @brief Computes an optimal limited affine transformation with 4 degrees of freedom between
    .   two 2D point sets.
    .
    .   @param from First input 2D point set.
    .   @param to Second input 2D point set.
    .   @param inliers Output vector indicating which points are inliers.
    .   @param method Robust method used to compute transformation. The following methods are possible:
    .   -   @ref RANSAC - RANSAC-based robust method
    .   -   @ref LMEDS - Least-Median robust method
    .   RANSAC is the default method.
    .   @param ransacReprojThreshold Maximum reprojection error in the RANSAC algorithm to consider
    .   a point as an inlier. Applies only to RANSAC.
    .   @param maxIters The maximum number of robust method iterations.
    .   @param confidence Confidence level, between 0 and 1, for the estimated transformation. Anything
    .   between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation
    .   significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.
    .   @param refineIters Maximum number of iterations of refining algorithm (Levenberg-Marquardt).
    .   Passing 0 will disable refining, so the output matrix will be output of robust method.
    .
    .   @return Output 2D affine transformation (4 degrees of freedom) matrix \f$2 \times 3\f$ or
    .   empty matrix if transformation could not be estimated.
    .
    .   The function estimates an optimal 2D affine transformation with 4 degrees of freedom limited to
    .   combinations of translation, rotation, and uniform scaling. Uses the selected algorithm for robust
    .   estimation.
    .
    .   The computed transformation is then refined further (using only inliers) with the
    .   Levenberg-Marquardt method to reduce the re-projection error even more.
    .
    .   Estimated transformation matrix is:
    .   \f[ \begin{bmatrix} \cos(\theta) \cdot s & -\sin(\theta) \cdot s & t_x \\
    .                   \sin(\theta) \cdot s & \cos(\theta) \cdot s & t_y
    .   \end{bmatrix} \f]
    .   Where \f$ \theta \f$ is the rotation angle, \f$ s \f$ the scaling factor and \f$ t_x, t_y \f$ are
    .   translations in \f$ x, y \f$ axes respectively.
    .
    .   @note
    .   The RANSAC method can handle practically any ratio of outliers but need a threshold to
    .   distinguish inliers from outliers. The method LMeDS does not need any threshold but it works
    .   correctly only when there are more than 50% of inliers.
    .
    .   @sa estimateAffine2D, getAffineTransform
    """
    ...

def estimateChessboardSharpness(
    image, patternSize, corners, rise_distance=..., vertical=..., sharpness=...
) -> Tuple[retval, sharpness]:
    """
    .   @brief Estimates the sharpness of a detected chessboard.
    .
    .   Image sharpness, as well as brightness, are a critical parameter for accuracte
    .   camera calibration. For accessing these parameters for filtering out
    .   problematic calibraiton images, this method calculates edge profiles by traveling from
    .   black to white chessboard cell centers. Based on this, the number of pixels is
    .   calculated required to transit from black to white. This width of the
    .   transition area is a good indication of how sharp the chessboard is imaged
    .   and should be below ~3.0 pixels.
    .
    .   @param image Gray image used to find chessboard corners
    .   @param patternSize Size of a found chessboard pattern
    .   @param corners Corners found by findChessboardCorners(SB)
    .   @param rise_distance Rise distance 0.8 means 10% ... 90% of the final signal strength
    .   @param vertical By default edge responses for horizontal lines are calculated
    .   @param sharpness Optional output array with a sharpness value for calculated edge responses (see description)
    .
    .   The optional sharpness array is of type CV_32FC1 and has for each calculated
    .   profile one row with the following five entries:
    .   * 0 = x coordinate of the underlying edge in the image
    .   * 1 = y coordinate of the underlying edge in the image
    .   * 2 = width of the transition area (sharpness)
    .   * 3 = signal strength in the black cell (min brightness)
    .   * 4 = signal strength in the white cell (max brightness)
    .
    .   @return Scalar(average sharpness, average min brightness, average max brightness,0)
    """
    ...

def estimateTranslation3D(
    src, dst, out=..., inliers=..., ransacThreshold=..., confidence=...
) -> Tuple[t, inliers]:
    """
    .   @brief Computes an optimal translation between two 3D point sets.
    .    *
    .    * It computes
    .    * \f[
    .    * \begin{bmatrix}
    .    * x\\
    .    * y\\
    .    * z\\
    .    * \end{bmatrix}
    .    * =
    .    * \begin{bmatrix}
    .    * X\\
    .    * Y\\
    .    * Z\\
    .    * \end{bmatrix}
    .    * +
    .    * \begin{bmatrix}
    .    * b_1\\
    .    * b_2\\
    .    * b_3\\
    .    * \end{bmatrix}
    .    * \f]
    .    *
    .    * @param src First input 3D point set containing \f$(X,Y,Z)\f$.
    .    * @param dst Second input 3D point set containing \f$(x,y,z)\f$.
    .    * @param out Output 3D translation vector \f$3 \times 1\f$ of the form
    .    * \f[
    .    * \begin{bmatrix}
    .    * b_1 \\
    .    * b_2 \\
    .    * b_3 \\
    .    * \end{bmatrix}
    .    * \f]
    .    * @param inliers Output vector indicating which points are inliers (1-inlier, 0-outlier).
    .    * @param ransacThreshold Maximum reprojection error in the RANSAC algorithm to consider a point as
    .    * an inlier.
    .    * @param confidence Confidence level, between 0 and 1, for the estimated transformation. Anything
    .    * between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation
    .    * significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.
    .    *
    .    * The function estimates an optimal 3D translation between two 3D point sets using the
    .    * RANSAC algorithm.
    .   *
    """
    ...

def exp(src, dst=...) -> dst:
    """
    .   @brief Calculates the exponent of every array element.
    .
    .   The function cv::exp calculates the exponent of every element of the input
    .   array:
    .   \f[\texttt{dst} [I] = e^{ src(I) }\f]
    .
    .   The maximum relative error is about 7e-6 for single-precision input and
    .   less than 1e-10 for double-precision input. Currently, the function
    .   converts denormalized values to zeros on output. Special values (NaN,
    .   Inf) are not handled.
    .   @param src input array.
    .   @param dst output array of the same size and type as src.
    .   @sa log , cartToPolar , polarToCart , phase , pow , sqrt , magnitude
    """
    ...

def extractChannel(src, coi, dst=...) -> dst:
    """
    .   @brief Extracts a single channel from src (coi is 0-based index)
    .   @param src input array
    .   @param dst output array
    .   @param coi index of channel to extract
    .   @sa mixChannels, split
    """
    ...

def fastAtan2(y, x) -> retval:
    """
    .   @brief Calculates the angle of a 2D vector in degrees.
    .
    .    The function fastAtan2 calculates the full-range angle of an input 2D vector. The angle is measured
    .    in degrees and varies from 0 to 360 degrees. The accuracy is about 0.3 degrees.
    .    @param x x-coordinate of the vector.
    .    @param y y-coordinate of the vector.
    """
    ...

def fastNlMeansDenoising(
    src, dst=..., h=..., templateWindowSize=..., searchWindowSize=...
) -> dst:
    """
    .   @brief Perform image denoising using Non-local Means Denoising algorithm
    .   <http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/> with several computational
    .   optimizations. Noise expected to be a gaussian white noise
    .
    .   @param src Input 8-bit 1-channel, 2-channel, 3-channel or 4-channel image.
    .   @param dst Output image with the same size and type as src .
    .   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.
    .   Should be odd. Recommended value 7 pixels
    .   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for
    .   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater
    .   denoising time. Recommended value 21 pixels
    .   @param h Parameter regulating filter strength. Big h value perfectly removes noise but also
    .   removes image details, smaller h value preserves details but also preserves some noise
    .
    .   This function expected to be applied to grayscale images. For colored images look at
    .   fastNlMeansDenoisingColored. Advanced usage of this functions can be manual denoising of colored
    .   image in different colorspaces. Such approach is used in fastNlMeansDenoisingColored by converting
    .   image to CIELAB colorspace and then separately denoise L and AB components with different h
    .   parameter.



    fastNlMeansDenoising(src, h, dst=..., templateWindowSize=..., searchWindowSize=..., normType=...) -> dst
    .   @brief Perform image denoising using Non-local Means Denoising algorithm
    .   <http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/> with several computational
    .   optimizations. Noise expected to be a gaussian white noise
    .
    .   @param src Input 8-bit or 16-bit (only with NORM_L1) 1-channel,
    .   2-channel, 3-channel or 4-channel image.
    .   @param dst Output image with the same size and type as src .
    .   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.
    .   Should be odd. Recommended value 7 pixels
    .   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for
    .   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater
    .   denoising time. Recommended value 21 pixels
    .   @param h Array of parameters regulating filter strength, either one
    .   parameter applied to all channels or one per channel in dst. Big h value
    .   perfectly removes noise but also removes image details, smaller h
    .   value preserves details but also preserves some noise
    .   @param normType Type of norm used for weight calculation. Can be either NORM_L2 or NORM_L1
    .
    .   This function expected to be applied to grayscale images. For colored images look at
    .   fastNlMeansDenoisingColored. Advanced usage of this functions can be manual denoising of colored
    .   image in different colorspaces. Such approach is used in fastNlMeansDenoisingColored by converting
    .   image to CIELAB colorspace and then separately denoise L and AB components with different h
    .   parameter.
    """
    ...

def fastNlMeansDenoisingColored(
    src, dst=..., h=..., hColor=..., templateWindowSize=..., searchWindowSize=...
) -> dst:
    """
    .   @brief Modification of fastNlMeansDenoising function for colored images
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param dst Output image with the same size and type as src .
    .   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.
    .   Should be odd. Recommended value 7 pixels
    .   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for
    .   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater
    .   denoising time. Recommended value 21 pixels
    .   @param h Parameter regulating filter strength for luminance component. Bigger h value perfectly
    .   removes noise but also removes image details, smaller h value preserves details but also preserves
    .   some noise
    .   @param hColor The same as h but for color components. For most images value equals 10
    .   will be enough to remove colored noise and do not distort colors
    .
    .   The function converts image to CIELAB colorspace and then separately denoise L and AB components
    .   with given h parameters using fastNlMeansDenoising function.
    """
    ...

def fastNlMeansDenoisingColoredMulti(
    srcImgs,
    imgToDenoiseIndex,
    temporalWindowSize,
    dst=...,
    h=...,
    hColor=...,
    templateWindowSize=...,
    searchWindowSize=...,
) -> dst:
    """
    .   @brief Modification of fastNlMeansDenoisingMulti function for colored images sequences
    .
    .   @param srcImgs Input 8-bit 3-channel images sequence. All images should have the same type and
    .   size.
    .   @param imgToDenoiseIndex Target image to denoise index in srcImgs sequence
    .   @param temporalWindowSize Number of surrounding images to use for target image denoising. Should
    .   be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to
    .   imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to denoise
    .   srcImgs[imgToDenoiseIndex] image.
    .   @param dst Output image with the same size and type as srcImgs images.
    .   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.
    .   Should be odd. Recommended value 7 pixels
    .   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for
    .   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater
    .   denoising time. Recommended value 21 pixels
    .   @param h Parameter regulating filter strength for luminance component. Bigger h value perfectly
    .   removes noise but also removes image details, smaller h value preserves details but also preserves
    .   some noise.
    .   @param hColor The same as h but for color components.
    .
    .   The function converts images to CIELAB colorspace and then separately denoise L and AB components
    .   with given h parameters using fastNlMeansDenoisingMulti function.
    """
    ...

def fastNlMeansDenoisingMulti(
    srcImgs,
    imgToDenoiseIndex,
    temporalWindowSize,
    dst=...,
    h=...,
    templateWindowSize=...,
    searchWindowSize=...,
) -> dst:
    """
    .   @brief Modification of fastNlMeansDenoising function for images sequence where consecutive images have been
    .   captured in small period of time. For example video. This version of the function is for grayscale
    .   images or for manual manipulation with colorspaces. For more details see
    .   <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.131.6394>
    .
    .   @param srcImgs Input 8-bit 1-channel, 2-channel, 3-channel or
    .   4-channel images sequence. All images should have the same type and
    .   size.
    .   @param imgToDenoiseIndex Target image to denoise index in srcImgs sequence
    .   @param temporalWindowSize Number of surrounding images to use for target image denoising. Should
    .   be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to
    .   imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to denoise
    .   srcImgs[imgToDenoiseIndex] image.
    .   @param dst Output image with the same size and type as srcImgs images.
    .   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.
    .   Should be odd. Recommended value 7 pixels
    .   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for
    .   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater
    .   denoising time. Recommended value 21 pixels
    .   @param h Parameter regulating filter strength. Bigger h value
    .   perfectly removes noise but also removes image details, smaller h
    .   value preserves details but also preserves some noise



    fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, h, dst=..., templateWindowSize=..., searchWindowSize=..., normType=...) -> dst
    .   @brief Modification of fastNlMeansDenoising function for images sequence where consecutive images have been
    .   captured in small period of time. For example video. This version of the function is for grayscale
    .   images or for manual manipulation with colorspaces. For more details see
    .   <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.131.6394>
    .
    .   @param srcImgs Input 8-bit or 16-bit (only with NORM_L1) 1-channel,
    .   2-channel, 3-channel or 4-channel images sequence. All images should
    .   have the same type and size.
    .   @param imgToDenoiseIndex Target image to denoise index in srcImgs sequence
    .   @param temporalWindowSize Number of surrounding images to use for target image denoising. Should
    .   be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to
    .   imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to denoise
    .   srcImgs[imgToDenoiseIndex] image.
    .   @param dst Output image with the same size and type as srcImgs images.
    .   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.
    .   Should be odd. Recommended value 7 pixels
    .   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for
    .   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater
    .   denoising time. Recommended value 21 pixels
    .   @param h Array of parameters regulating filter strength, either one
    .   parameter applied to all channels or one per channel in dst. Big h value
    .   perfectly removes noise but also removes image details, smaller h
    .   value preserves details but also preserves some noise
    .   @param normType Type of norm used for weight calculation. Can be either NORM_L2 or NORM_L1
    """
    ...

def fillConvexPoly(img, points, color, lineType=..., shift=...) -> img:
    """
    .   @brief Fills a convex polygon.
    .
    .   The function cv::fillConvexPoly draws a filled convex polygon. This function is much faster than the
    .   function #fillPoly . It can fill not only convex polygons but any monotonic polygon without
    .   self-intersections, that is, a polygon whose contour intersects every horizontal line (scan line)
    .   twice at the most (though, its top-most and/or the bottom edge could be horizontal).
    .
    .   @param img Image.
    .   @param points Polygon vertices.
    .   @param color Polygon color.
    .   @param lineType Type of the polygon boundaries. See #LineTypes
    .   @param shift Number of fractional bits in the vertex coordinates.
    """
    ...

def fillPoly(img, pts, color, lineType=..., shift=..., offset=...) -> img:
    """
    .   @brief Fills the area bounded by one or more polygons.
    .
    .   The function cv::fillPoly fills an area bounded by several polygonal contours. The function can fill
    .   complex areas, for example, areas with holes, contours with self-intersections (some of their
    .   parts), and so forth.
    .
    .   @param img Image.
    .   @param pts Array of polygons where each polygon is represented as an array of points.
    .   @param color Polygon color.
    .   @param lineType Type of the polygon boundaries. See #LineTypes
    .   @param shift Number of fractional bits in the vertex coordinates.
    .   @param offset Optional offset of all points of the contours.
    """
    ...

def filter2D(
    src: ndarray,
    ddepth: int,
    kernel: ndarray,
    dst: ndarray = ...,
    anchor: Tuple[int, int] = ...,
    delta: Any = ...,
    borderType: int = ...,
) -> ndarray:
    """
    .   @brief Convolves an image with the kernel.
    .
    .   The function applies an arbitrary linear filter to an image. In-place operation is supported. When
    .   the aperture is partially outside the image, the function interpolates outlier pixel values
    .   according to the specified border mode.
    .
    .   The function does actually compute correlation, not the convolution:
    .
    .   \f[\texttt{dst} (x,y) =  \sum _{ \substack{0\leq x' < \texttt{kernel.cols}\\{0\leq y' < \texttt{kernel.rows}}}}  \texttt{kernel} (x',y')* \texttt{src} (x+x'- \texttt{anchor.x} ,y+y'- \texttt{anchor.y} )\f]
    .
    .   That is, the kernel is not mirrored around the anchor point. If you need a real convolution, flip
    .   the kernel using #flip and set the new anchor to `(kernel.cols - anchor.x - 1, kernel.rows -
    .   anchor.y - 1)`.
    .
    .   The function uses the DFT-based algorithm in case of sufficiently large kernels (~`11 x 11` or
    .   larger) and the direct algorithm for small kernels.
    .
    .   @param src input image.
    .   @param dst output image of the same size and the same number of channels as src.
    .   @param ddepth desired depth of the destination image, see @ref filter_depths "combinations"
    .   @param kernel convolution kernel (or rather a correlation kernel), a single-channel floating point
    .   matrix; if you want to apply different kernels to different channels, split the image into
    .   separate color planes using split and process them individually.
    .   @param anchor anchor of the kernel that indicates the relative position of a filtered point within
    .   the kernel; the anchor should lie within the kernel; default value (-1,-1) means that the anchor
    .   is at the kernel center.
    .   @param delta optional value added to the filtered pixels before storing them in dst.
    .   @param borderType pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not supported.
    .   @sa  sepFilter2D, dft, matchTemplate
    """
    ...

def filterHomographyDecompByVisibleRefpoints(
    rotations, normals, beforePoints, afterPoints, possibleSolutions=..., pointsMask=...
) -> possibleSolutions:
    """
    .   @brief Filters homography decompositions based on additional information.
    .
    .   @param rotations Vector of rotation matrices.
    .   @param normals Vector of plane normal matrices.
    .   @param beforePoints Vector of (rectified) visible reference points before the homography is applied
    .   @param afterPoints Vector of (rectified) visible reference points after the homography is applied
    .   @param possibleSolutions Vector of int indices representing the viable solution set after filtering
    .   @param pointsMask optional Mat/Vector of 8u type representing the mask for the inliers as given by the findHomography function
    .
    .   This function is intended to filter the output of the decomposeHomographyMat based on additional
    .   information as described in @cite Malis . The summary of the method: the decomposeHomographyMat function
    .   returns 2 unique solutions and their "opposites" for a total of 4 solutions. If we have access to the
    .   sets of points visible in the camera frame before and after the homography transformation is applied,
    .   we can determine which are the true potential solutions and which are the opposites by verifying which
    .   homographies are consistent with all visible reference points being in front of the camera. The inputs
    .   are left unchanged; the filtered solution set is returned as indices into the existing one.
    """
    ...

def filterSpeckles(img, newVal, maxSpeckleSize, maxDiff, buf=...) -> Tuple[img, buf]:
    """
    .   @brief Filters off small noise blobs (speckles) in the disparity map
    .
    .   @param img The input 16-bit signed disparity image
    .   @param newVal The disparity value used to paint-off the speckles
    .   @param maxSpeckleSize The maximum speckle size to consider it a speckle. Larger blobs are not
    .   affected by the algorithm
    .   @param maxDiff Maximum difference between neighbor disparity pixels to put them into the same
    .   blob. Note that since StereoBM, StereoSGBM and may be other algorithms return a fixed-point
    .   disparity map, where disparity values are multiplied by 16, this scale factor should be taken into
    .   account when specifying this parameter value.
    .   @param buf The optional temporary buffer to avoid memory allocation within the function.
    """
    ...

def find4QuadCornerSubpix(img, corners, region_size) -> Tuple[retval, corners]:
    """
    .
    """
    ...

def findChessboardCorners(
    image, patternSize, corners=..., flags=...
) -> Tuple[retval, corners]:
    """
    .   @brief Finds the positions of internal corners of the chessboard.
    .
    .   @param image Source chessboard view. It must be an 8-bit grayscale or color image.
    .   @param patternSize Number of inner corners per a chessboard row and column
    .   ( patternSize = cv::Size(points_per_row,points_per_colum) = cv::Size(columns,rows) ).
    .   @param corners Output array of detected corners.
    .   @param flags Various operation flags that can be zero or a combination of the following values:
    .   -   @ref CALIB_CB_ADAPTIVE_THRESH Use adaptive thresholding to convert the image to black
    .   and white, rather than a fixed threshold level (computed from the average image brightness).
    .   -   @ref CALIB_CB_NORMALIZE_IMAGE Normalize the image gamma with equalizeHist before
    .   applying fixed or adaptive thresholding.
    .   -   @ref CALIB_CB_FILTER_QUADS Use additional criteria (like contour area, perimeter,
    .   square-like shape) to filter out false quads extracted at the contour retrieval stage.
    .   -   @ref CALIB_CB_FAST_CHECK Run a fast check on the image that looks for chessboard corners,
    .   and shortcut the call if none is found. This can drastically speed up the call in the
    .   degenerate condition when no chessboard is observed.
    .
    .   The function attempts to determine whether the input image is a view of the chessboard pattern and
    .   locate the internal chessboard corners. The function returns a non-zero value if all of the corners
    .   are found and they are placed in a certain order (row by row, left to right in every row).
    .   Otherwise, if the function fails to find all the corners or reorder them, it returns 0. For example,
    .   a regular chessboard has 8 x 8 squares and 7 x 7 internal corners, that is, points where the black
    .   squares touch each other. The detected coordinates are approximate, and to determine their positions
    .   more accurately, the function calls cornerSubPix. You also may use the function cornerSubPix with
    .   different parameters if returned coordinates are not accurate enough.
    .
    .   Sample usage of detecting and drawing chessboard corners: :
    .   @code
    .       Size patternsize(8,6); //interior number of corners
    .       Mat gray = ....; //source image
    .       vector<Point2f> corners; //this will be filled by the detected corners
    .
    .       //CALIB_CB_FAST_CHECK saves a lot of time on images
    .       //that do not contain any chessboard corners
    .       bool patternfound = findChessboardCorners(gray, patternsize, corners,
    .               CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE
    .               + CALIB_CB_FAST_CHECK);
    .
    .       if(patternfound)
    .         cornerSubPix(gray, corners, Size(11, 11), Size(-1, -1),
    .           TermCriteria(CV_TERMCRIT_EPS + CV_TERMCRIT_ITER, 30, 0.1));
    .
    .       drawChessboardCorners(img, patternsize, Mat(corners), patternfound);
    .   @endcode
    .   @note The function requires white space (like a square-thick border, the wider the better) around
    .   the board to make the detection more robust in various environments. Otherwise, if there is no
    .   border and the background is dark, the outer black squares cannot be segmented properly and so the
    .   square grouping and ordering algorithm fails.
    """
    ...

def findChessboardCornersSB(
    image, patternSize, corners=..., flags=...
) -> Tuple[retval, corners]:
    """
    .   @overload
    """
    ...

def findChessboardCornersSBWithMeta(
    image, patternSize, flags, corners=..., meta=...
) -> Tuple[s, meta]:
    """
    .   @brief Finds the positions of internal corners of the chessboard using a sector based approach.
    .
    .   @param image Source chessboard view. It must be an 8-bit grayscale or color image.
    .   @param patternSize Number of inner corners per a chessboard row and column
    .   ( patternSize = cv::Size(points_per_row,points_per_colum) = cv::Size(columns,rows) ).
    .   @param corners Output array of detected corners.
    .   @param flags Various operation flags that can be zero or a combination of the following values:
    .   -   @ref CALIB_CB_NORMALIZE_IMAGE Normalize the image gamma with equalizeHist before detection.
    .   -   @ref CALIB_CB_EXHAUSTIVE Run an exhaustive search to improve detection rate.
    .   -   @ref CALIB_CB_ACCURACY Up sample input image to improve sub-pixel accuracy due to aliasing effects.
    .   -   @ref CALIB_CB_LARGER The detected pattern is allowed to be larger than patternSize (see description).
    .   -   @ref CALIB_CB_MARKER The detected pattern must have a marker (see description).
    .   This should be used if an accurate camera calibration is required.
    .   @param meta Optional output arrray of detected corners (CV_8UC1 and size = cv::Size(columns,rows)).
    .   Each entry stands for one corner of the pattern and can have one of the following values:
    .   -   0 = no meta data attached
    .   -   1 = left-top corner of a black cell
    .   -   2 = left-top corner of a white cell
    .   -   3 = left-top corner of a black cell with a white marker dot
    .   -   4 = left-top corner of a white cell with a black marker dot (pattern origin in case of markers otherwise first corner)
    .
    .   The function is analog to findchessboardCorners but uses a localized radon
    .   transformation approximated by box filters being more robust to all sort of
    .   noise, faster on larger images and is able to directly return the sub-pixel
    .   position of the internal chessboard corners. The Method is based on the paper
    .   @cite duda2018 "Accurate Detection and Localization of Checkerboard Corners for
    .   Calibration" demonstrating that the returned sub-pixel positions are more
    .   accurate than the one returned by cornerSubPix allowing a precise camera
    .   calibration for demanding applications.
    .
    .   In the case, the flags @ref CALIB_CB_LARGER or @ref CALIB_CB_MARKER are given,
    .   the result can be recovered from the optional meta array. Both flags are
    .   helpful to use calibration patterns exceeding the field of view of the camera.
    .   These oversized patterns allow more accurate calibrations as corners can be
    .   utilized, which are as close as possible to the image borders.  For a
    .   consistent coordinate system across all images, the optional marker (see image
    .   below) can be used to move the origin of the board to the location where the
    .   black circle is located.
    .
    .   @note The function requires a white boarder with roughly the same width as one
    .   of the checkerboard fields around the whole board to improve the detection in
    .   various environments. In addition, because of the localized radon
    .   transformation it is beneficial to use round corners for the field corners
    .   which are located on the outside of the board. The following figure illustrates
    .   a sample checkerboard optimized for the detection. However, any other checkerboard
    .   can be used as well.
    .   ![Checkerboard](pics/checkerboard_radon.png)
    """
    ...

def findCirclesGrid(
    image, patternSize, flags, blobDetector, parameters, centers=...
) -> Tuple[retval, centers]:
    """
    .   @brief Finds centers in the grid of circles.
    .
    .   @param image grid view of input circles; it must be an 8-bit grayscale or color image.
    .   @param patternSize number of circles per row and column
    .   ( patternSize = Size(points_per_row, points_per_colum) ).
    .   @param centers output array of detected centers.
    .   @param flags various operation flags that can be one of the following values:
    .   -   @ref CALIB_CB_SYMMETRIC_GRID uses symmetric pattern of circles.
    .   -   @ref CALIB_CB_ASYMMETRIC_GRID uses asymmetric pattern of circles.
    .   -   @ref CALIB_CB_CLUSTERING uses a special algorithm for grid detection. It is more robust to
    .   perspective distortions but much more sensitive to background clutter.
    .   @param blobDetector feature detector that finds blobs like dark circles on light background.
    .                       If `blobDetector` is NULL then `image` represents Point2f array of candidates.
    .   @param parameters struct for finding circles in a grid pattern.
    .
    .   The function attempts to determine whether the input image contains a grid of circles. If it is, the
    .   function locates centers of the circles. The function returns a non-zero value if all of the centers
    .   have been found and they have been placed in a certain order (row by row, left to right in every
    .   row). Otherwise, if the function fails to find all the corners or reorder them, it returns 0.
    .
    .   Sample usage of detecting and drawing the centers of circles: :
    .   @code
    .       Size patternsize(7,7); //number of centers
    .       Mat gray = ...; //source image
    .       vector<Point2f> centers; //this will be filled by the detected centers
    .
    .       bool patternfound = findCirclesGrid(gray, patternsize, centers);
    .
    .       drawChessboardCorners(img, patternsize, Mat(centers), patternfound);
    .   @endcode
    .   @note The function requires white space (like a square-thick border, the wider the better) around
    .   the board to make the detection more robust in various environments.



    findCirclesGrid(image, patternSize, centers=..., flags=..., blobDetector=...) -> retval, centers
    .   @overload
    """
    ...

def findContours(
    image: ndarray,
    mode: int,
    method: int,
    contours: ndarray = ...,
    hierarchy: ndarray = ...,
    offset: int = ...,
) -> Tuple[ndarray, List[ndarray]]:
    """
    .   @brief Finds contours in a binary image.
    .
    .   The function retrieves contours from the binary image using the algorithm @cite Suzuki85 . The contours
    .   are a useful tool for shape analysis and object detection and recognition. See squares.cpp in the
    .   OpenCV sample directory.
    .   @note Since opencv 3.2 source image is not modified by this function.
    .
    .   @param image Source, an 8-bit single-channel image. Non-zero pixels are treated as 1's. Zero
    .   pixels remain 0's, so the image is treated as binary . You can use #compare, #inRange, #threshold ,
    .   #adaptiveThreshold, #Canny, and others to create a binary image out of a grayscale or color one.
    .   If mode equals to #RETR_CCOMP or #RETR_FLOODFILL, the input can also be a 32-bit integer image of labels (CV_32SC1).
    .   @param contours Detected contours. Each contour is stored as a vector of points (e.g.
    .   std::vector<std::vector<cv::Point> >).
    .   @param hierarchy Optional output vector (e.g. std::vector<cv::Vec4i>), containing information about the image topology. It has
    .   as many elements as the number of contours. For each i-th contour contours[i], the elements
    .   hierarchy[i][0] , hierarchy[i][1] , hierarchy[i][2] , and hierarchy[i][3] are set to 0-based indices
    .   in contours of the next and previous contours at the same hierarchical level, the first child
    .   contour and the parent contour, respectively. If for the contour i there are no next, previous,
    .   parent, or nested contours, the corresponding elements of hierarchy[i] will be negative.
    .   @param mode Contour retrieval mode, see #RetrievalModes
    .   @param method Contour approximation method, see #ContourApproximationModes
    .   @param offset Optional offset by which every contour point is shifted. This is useful if the
    .   contours are extracted from the image ROI and then they should be analyzed in the whole image
    .   context.
    """
    ...

def findEssentialMat(
    points1, points2, cameraMatrix, method=..., prob=..., threshold=..., mask=...
) -> Tuple[retval, mask]:
    """
    .   @brief Calculates an essential matrix from the corresponding points in two images.
    .
    .   @param points1 Array of N (N \>= 5) 2D points from the first image. The point coordinates should
    .   be floating-point (single or double precision).
    .   @param points2 Array of the second image points of the same size and format as points1 .
    .   @param cameraMatrix Camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   Note that this function assumes that points1 and points2 are feature points from cameras with the
    .   same camera intrinsic matrix. If this assumption does not hold for your use case, use
    .   `undistortPoints()` with `P = cv::NoArray()` for both cameras to transform image points
    .   to normalized image coordinates, which are valid for the identity camera intrinsic matrix. When
    .   passing these coordinates, pass the identity matrix for this parameter.
    .   @param method Method for computing an essential matrix.
    .   -   @ref RANSAC for the RANSAC algorithm.
    .   -   @ref LMEDS for the LMedS algorithm.
    .   @param prob Parameter used for the RANSAC or LMedS methods only. It specifies a desirable level of
    .   confidence (probability) that the estimated matrix is correct.
    .   @param threshold Parameter used for RANSAC. It is the maximum distance from a point to an epipolar
    .   line in pixels, beyond which the point is considered an outlier and is not used for computing the
    .   final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the
    .   point localization, image resolution, and the image noise.
    .   @param mask Output array of N elements, every element of which is set to 0 for outliers and to 1
    .   for the other points. The array is computed only in the RANSAC and LMedS methods.
    .
    .   This function estimates essential matrix based on the five-point algorithm solver in @cite Nister03 .
    .   @cite SteweniusCFS is also a related. The epipolar geometry is described by the following equation:
    .
    .   \f[[p_2; 1]^T K^{-T} E K^{-1} [p_1; 1] = 0\f]
    .
    .   where \f$E\f$ is an essential matrix, \f$p_1\f$ and \f$p_2\f$ are corresponding points in the first and the
    .   second images, respectively. The result of this function may be passed further to
    .   decomposeEssentialMat or recoverPose to recover the relative pose between cameras.



    findEssentialMat(points1, points2, focal=..., pp=..., method=..., prob=..., threshold=..., mask=...) -> retval, mask
    .   @overload
    .   @param points1 Array of N (N \>= 5) 2D points from the first image. The point coordinates should
    .   be floating-point (single or double precision).
    .   @param points2 Array of the second image points of the same size and format as points1 .
    .   @param focal focal length of the camera. Note that this function assumes that points1 and points2
    .   are feature points from cameras with same focal length and principal point.
    .   @param pp principal point of the camera.
    .   @param method Method for computing a fundamental matrix.
    .   -   @ref RANSAC for the RANSAC algorithm.
    .   -   @ref LMEDS for the LMedS algorithm.
    .   @param threshold Parameter used for RANSAC. It is the maximum distance from a point to an epipolar
    .   line in pixels, beyond which the point is considered an outlier and is not used for computing the
    .   final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the
    .   point localization, image resolution, and the image noise.
    .   @param prob Parameter used for the RANSAC or LMedS methods only. It specifies a desirable level of
    .   confidence (probability) that the estimated matrix is correct.
    .   @param mask Output array of N elements, every element of which is set to 0 for outliers and to 1
    .   for the other points. The array is computed only in the RANSAC and LMedS methods.
    .
    .   This function differs from the one above that it computes camera intrinsic matrix from focal length and
    .   principal point:
    .
    .   \f[A =
    .   \begin{bmatrix}
    .   f & 0 & x_{pp}  \\
    .   0 & f & y_{pp}  \\
    .   0 & 0 & 1
    .   \end{bmatrix}\f]



    findEssentialMat(points1, points2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, method=..., prob=..., threshold=..., mask=...) -> retval, mask
    .   @brief Calculates an essential matrix from the corresponding points in two images from potentially two different cameras.
    .
    .   @param points1 Array of N (N \>= 5) 2D points from the first image. The point coordinates should
    .   be floating-point (single or double precision).
    .   @param points2 Array of the second image points of the same size and format as points1 .
    .   @param cameraMatrix1 Camera matrix \f$K = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\f$ .
    .   Note that this function assumes that points1 and points2 are feature points from cameras with the
    .   same camera matrix. If this assumption does not hold for your use case, use
    .   `undistortPoints()` with `P = cv::NoArray()` for both cameras to transform image points
    .   to normalized image coordinates, which are valid for the identity camera matrix. When
    .   passing these coordinates, pass the identity matrix for this parameter.
    .   @param cameraMatrix2 Camera matrix \f$K = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\f$ .
    .   Note that this function assumes that points1 and points2 are feature points from cameras with the
    .   same camera matrix. If this assumption does not hold for your use case, use
    .   `undistortPoints()` with `P = cv::NoArray()` for both cameras to transform image points
    .   to normalized image coordinates, which are valid for the identity camera matrix. When
    .   passing these coordinates, pass the identity matrix for this parameter.
    .   @param distCoeffs1 Input vector of distortion coefficients
    .   \f$(k_1, k_2, p_1, p_2, k_3=..., k_4=..., k_5, k_6, s_1=..., s_2, s_3, s_4, \tau_x=..., \tau_y)\f$
    .   of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.
    .   @param distCoeffs2 Input vector of distortion coefficients
    .   \f$(k_1, k_2, p_1, p_2, k_3=..., k_4=..., k_5, k_6, s_1=..., s_2, s_3, s_4, \tau_x=..., \tau_y)\f$
    .   of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.
    .   @param method Method for computing an essential matrix.
    .   -   @ref RANSAC for the RANSAC algorithm.
    .   -   @ref LMEDS for the LMedS algorithm.
    .   @param prob Parameter used for the RANSAC or LMedS methods only. It specifies a desirable level of
    .   confidence (probability) that the estimated matrix is correct.
    .   @param threshold Parameter used for RANSAC. It is the maximum distance from a point to an epipolar
    .   line in pixels, beyond which the point is considered an outlier and is not used for computing the
    .   final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the
    .   point localization, image resolution, and the image noise.
    .   @param mask Output array of N elements, every element of which is set to 0 for outliers and to 1
    .   for the other points. The array is computed only in the RANSAC and LMedS methods.
    .
    .   This function estimates essential matrix based on the five-point algorithm solver in @cite Nister03 .
    .   @cite SteweniusCFS is also a related. The epipolar geometry is described by the following equation:
    .
    .   \f[[p_2; 1]^T K^{-T} E K^{-1} [p_1; 1] = 0\f]
    .
    .   where \f$E\f$ is an essential matrix, \f$p_1\f$ and \f$p_2\f$ are corresponding points in the first and the
    .   second images, respectively. The result of this function may be passed further to
    .   decomposeEssentialMat or recoverPose to recover the relative pose between cameras.



    findEssentialMat(points1, points2, cameraMatrix1, cameraMatrix2, dist_coeff1, dist_coeff2, params, mask=...) -> retval, mask
    .
    """
    ...

def findFundamentalMat(
    points1, points2, method, ransacReprojThreshold, confidence, maxIters, mask=...
) -> Tuple[retval, mask]:
    """
    .   @brief Calculates a fundamental matrix from the corresponding points in two images.
    .
    .   @param points1 Array of N points from the first image. The point coordinates should be
    .   floating-point (single or double precision).
    .   @param points2 Array of the second image points of the same size and format as points1 .
    .   @param method Method for computing a fundamental matrix.
    .   -   @ref FM_7POINT for a 7-point algorithm. \f$N = 7\f$
    .   -   @ref FM_8POINT for an 8-point algorithm. \f$N \ge 8\f$
    .   -   @ref FM_RANSAC for the RANSAC algorithm. \f$N \ge 8\f$
    .   -   @ref FM_LMEDS for the LMedS algorithm. \f$N \ge 8\f$
    .   @param ransacReprojThreshold Parameter used only for RANSAC. It is the maximum distance from a point to an epipolar
    .   line in pixels, beyond which the point is considered an outlier and is not used for computing the
    .   final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the
    .   point localization, image resolution, and the image noise.
    .   @param confidence Parameter used for the RANSAC and LMedS methods only. It specifies a desirable level
    .   of confidence (probability) that the estimated matrix is correct.
    .   @param[out] mask optional output mask
    .   @param maxIters The maximum number of robust method iterations.
    .
    .   The epipolar geometry is described by the following equation:
    .
    .   \f[[p_2; 1]^T F [p_1; 1] = 0\f]
    .
    .   where \f$F\f$ is a fundamental matrix, \f$p_1\f$ and \f$p_2\f$ are corresponding points in the first and the
    .   second images, respectively.
    .
    .   The function calculates the fundamental matrix using one of four methods listed above and returns
    .   the found fundamental matrix. Normally just one matrix is found. But in case of the 7-point
    .   algorithm, the function may return up to 3 solutions ( \f$9 \times 3\f$ matrix that stores all 3
    .   matrices sequentially).
    .
    .   The calculated fundamental matrix may be passed further to computeCorrespondEpilines that finds the
    .   epipolar lines corresponding to the specified points. It can also be passed to
    .   stereoRectifyUncalibrated to compute the rectification transformation. :
    .   @code
    .       // Example. Estimation of fundamental matrix using the RANSAC algorithm
    .       int point_count = 100;
    .       vector<Point2f> points1(point_count);
    .       vector<Point2f> points2(point_count);
    .
    .       // initialize the points here ...
    .       for( int i = 0; i < point_count; i++ )
    .       {
    .           points1[i] = ...;
    .           points2[i] = ...;
    .       }
    .
    .       Mat fundamental_matrix =
    .        findFundamentalMat(points1, points2, FM_RANSAC, 3, 0.99);
    .   @endcode



    findFundamentalMat(points1, points2, method=..., ransacReprojThreshold=..., confidence=..., mask=...) -> retval, mask
    .   @overload



    findFundamentalMat(points1, points2, params, mask=...) -> retval, mask
    .   @overload
    """
    ...

def findHomography(
    srcPoints,
    dstPoints,
    method=...,
    ransacReprojThreshold=...,
    mask=...,
    maxIters=...,
    confidence=...,
) -> Tuple[retval, mask]:
    """
    .   @brief Finds a perspective transformation between two planes.
    .
    .   @param srcPoints Coordinates of the points in the original plane, a matrix of the type CV_32FC2
    .   or vector\<Point2f\> .
    .   @param dstPoints Coordinates of the points in the target plane, a matrix of the type CV_32FC2 or
    .   a vector\<Point2f\> .
    .   @param method Method used to compute a homography matrix. The following methods are possible:
    .   -   **0** - a regular method using all the points, i.e., the least squares method
    .   -   @ref RANSAC - RANSAC-based robust method
    .   -   @ref LMEDS - Least-Median robust method
    .   -   @ref RHO - PROSAC-based robust method
    .   @param ransacReprojThreshold Maximum allowed reprojection error to treat a point pair as an inlier
    .   (used in the RANSAC and RHO methods only). That is, if
    .   \f[\| \texttt{dstPoints} _i -  \texttt{convertPointsHomogeneous} ( \texttt{H} * \texttt{srcPoints} _i) \|_2  >  \texttt{ransacReprojThreshold}\f]
    .   then the point \f$i\f$ is considered as an outlier. If srcPoints and dstPoints are measured in pixels,
    .   it usually makes sense to set this parameter somewhere in the range of 1 to 10.
    .   @param mask Optional output mask set by a robust method ( RANSAC or LMeDS ). Note that the input
    .   mask values are ignored.
    .   @param maxIters The maximum number of RANSAC iterations.
    .   @param confidence Confidence level, between 0 and 1.
    .
    .   The function finds and returns the perspective transformation \f$H\f$ between the source and the
    .   destination planes:
    .
    .   \f[s_i  \vecthree{x'_i}{y'_i}{1} \sim H  \vecthree{x_i}{y_i}{1}\f]
    .
    .   so that the back-projection error
    .
    .   \f[\sum _i \left ( x'_i- \frac{h_{11} x_i + h_{12} y_i + h_{13}}{h_{31} x_i + h_{32} y_i + h_{33}} \right )^2+ \left ( y'_i- \frac{h_{21} x_i + h_{22} y_i + h_{23}}{h_{31} x_i + h_{32} y_i + h_{33}} \right )^2\f]
    .
    .   is minimized. If the parameter method is set to the default value 0, the function uses all the point
    .   pairs to compute an initial homography estimate with a simple least-squares scheme.
    .
    .   However, if not all of the point pairs ( \f$srcPoints_i\f$, \f$dstPoints_i\f$ ) fit the rigid perspective
    .   transformation (that is, there are some outliers), this initial estimate will be poor. In this case,
    .   you can use one of the three robust methods. The methods RANSAC, LMeDS and RHO try many different
    .   random subsets of the corresponding point pairs (of four pairs each, collinear pairs are discarded), estimate the homography matrix
    .   using this subset and a simple least-squares algorithm, and then compute the quality/goodness of the
    .   computed homography (which is the number of inliers for RANSAC or the least median re-projection error for
    .   LMeDS). The best subset is then used to produce the initial estimate of the homography matrix and
    .   the mask of inliers/outliers.
    .
    .   Regardless of the method, robust or not, the computed homography matrix is refined further (using
    .   inliers only in case of a robust method) with the Levenberg-Marquardt method to reduce the
    .   re-projection error even more.
    .
    .   The methods RANSAC and RHO can handle practically any ratio of outliers but need a threshold to
    .   distinguish inliers from outliers. The method LMeDS does not need any threshold but it works
    .   correctly only when there are more than 50% of inliers. Finally, if there are no outliers and the
    .   noise is rather small, use the default method (method=0).
    .
    .   The function is used to find initial intrinsic and extrinsic matrices. Homography matrix is
    .   determined up to a scale. Thus, it is normalized so that \f$h_{33}=1\f$. Note that whenever an \f$H\f$ matrix
    .   cannot be estimated, an empty one will be returned.
    .
    .   @sa
    .   getAffineTransform, estimateAffine2D, estimateAffinePartial2D, getPerspectiveTransform, warpPerspective,
    .   perspectiveTransform



    findHomography(srcPoints, dstPoints, params, mask=...) -> retval, mask
    .   @overload
    """
    ...

def findNonZero(src: ndarray, idx: ndarray = ...) -> ndarray:
    """
    .   @brief Returns the list of locations of non-zero pixels
    .
    .   Given a binary matrix (likely returned from an operation such
    .   as threshold(), compare(), >, ==, etc, return all of
    .   the non-zero indices as a cv::Mat or std::vector<cv::Point> (x,y)
    .   For example:
    .   @code{.cpp}
    .       cv::Mat binaryImage; // input, binary image
    .       cv::Mat locations;   // output, locations of non-zero pixels
    .       cv::findNonZero(binaryImage, locations);
    .
    .       // access pixel coordinates
    .       Point pnt = locations.at<Point>(i);
    .   @endcode
    .   or
    .   @code{.cpp}
    .       cv::Mat binaryImage; // input, binary image
    .       vector<Point> locations;   // output, locations of non-zero pixels
    .       cv::findNonZero(binaryImage, locations);
    .
    .       // access pixel coordinates
    .       Point pnt = locations[i];
    .   @endcode
    .   @param src single-channel array
    .   @param idx the output array, type of cv::Mat or std::vector<Point>, corresponding to non-zero indices in the input
    """
    ...

def findTransformECC(
    templateImage,
    inputImage,
    warpMatrix,
    motionType,
    criteria,
    inputMask,
    gaussFiltSize,
) -> Tuple[retval, warpMatrix]:
    """
    .   @brief Finds the geometric transform (warp) between two images in terms of the ECC criterion @cite EP08 .
    .
    .   @param templateImage single-channel template image; CV_8U or CV_32F array.
    .   @param inputImage single-channel input image which should be warped with the final warpMatrix in
    .   order to provide an image similar to templateImage, same type as templateImage.
    .   @param warpMatrix floating-point \f$2\times 3\f$ or \f$3\times 3\f$ mapping matrix (warp).
    .   @param motionType parameter, specifying the type of motion:
    .    -   **MOTION_TRANSLATION** sets a translational motion model; warpMatrix is \f$2\times 3\f$ with
    .        the first \f$2\times 2\f$ part being the unity matrix and the rest two parameters being
    .        estimated.
    .    -   **MOTION_EUCLIDEAN** sets a Euclidean (rigid) transformation as motion model; three
    .        parameters are estimated; warpMatrix is \f$2\times 3\f$.
    .    -   **MOTION_AFFINE** sets an affine motion model (DEFAULT); six parameters are estimated;
    .        warpMatrix is \f$2\times 3\f$.
    .    -   **MOTION_HOMOGRAPHY** sets a homography as a motion model; eight parameters are
    .        estimated;\`warpMatrix\` is \f$3\times 3\f$.
    .   @param criteria parameter, specifying the termination criteria of the ECC algorithm;
    .   criteria.epsilon defines the threshold of the increment in the correlation coefficient between two
    .   iterations (a negative criteria.epsilon makes criteria.maxcount the only termination criterion).
    .   Default values are shown in the declaration above.
    .   @param inputMask An optional mask to indicate valid values of inputImage.
    .   @param gaussFiltSize An optional value indicating size of gaussian blur filter; (DEFAULT: 5)
    .
    .   The function estimates the optimum transformation (warpMatrix) with respect to ECC criterion
    .   (@cite EP08), that is
    .
    .   \f[\texttt{warpMatrix} = \arg\max_{W} \texttt{ECC}(\texttt{templateImage}(x,y),\texttt{inputImage}(x',y'))\f]
    .
    .   where
    .
    .   \f[\begin{bmatrix} x' \\ y' \end{bmatrix} = W \cdot \begin{bmatrix} x \\ y \\ 1 \end{bmatrix}\f]
    .
    .   (the equation holds with homogeneous coordinates for homography). It returns the final enhanced
    .   correlation coefficient, that is the correlation coefficient between the template image and the
    .   final warped input image. When a \f$3\times 3\f$ matrix is given with motionType =0, 1 or 2, the third
    .   row is ignored.
    .
    .   Unlike findHomography and estimateRigidTransform, the function findTransformECC implements an
    .   area-based alignment that builds on intensity similarities. In essence, the function updates the
    .   initial transformation that roughly aligns the images. If this information is missing, the identity
    .   warp (unity matrix) is used as an initialization. Note that if images undergo strong
    .   displacements/rotations, an initial transformation that roughly aligns the images is necessary
    .   (e.g., a simple euclidean/similarity transform that allows for the images showing the same image
    .   content approximately). Use inverse warping in the second image to take an image close to the first
    .   one, i.e. use the flag WARP_INVERSE_MAP with warpAffine or warpPerspective. See also the OpenCV
    .   sample image_alignment.cpp that demonstrates the use of the function. Note that the function throws
    .   an exception if algorithm does not converges.
    .
    .   @sa
    .   computeECC, estimateAffine2D, estimateAffinePartial2D, findHomography



    findTransformECC(templateImage, inputImage, warpMatrix, motionType=..., criteria=..., inputMask=...) -> retval, warpMatrix
    .   @overload
    """
    ...

def fitEllipse(points) -> retval:
    """
    .   @brief Fits an ellipse around a set of 2D points.
    .
    .   The function calculates the ellipse that fits (in a least-squares sense) a set of 2D points best of
    .   all. It returns the rotated rectangle in which the ellipse is inscribed. The first algorithm described by @cite Fitzgibbon95
    .   is used. Developer should keep in mind that it is possible that the returned
    .   ellipse/rotatedRect data contains negative indices, due to the data points being close to the
    .   border of the containing Mat element.
    .
    .   @param points Input 2D point set, stored in std::vector\<\> or Mat
    """
    ...

def fitEllipseAMS(points) -> retval:
    """
    .   @brief Fits an ellipse around a set of 2D points.
    .
    .    The function calculates the ellipse that fits a set of 2D points.
    .    It returns the rotated rectangle in which the ellipse is inscribed.
    .    The Approximate Mean Square (AMS) proposed by @cite Taubin1991 is used.
    .
    .    For an ellipse, this basis set is \f$ \chi= \left(x^2, x y, y^2, x, y, 1\right) \f$,
    .    which is a set of six free coefficients \f$ A^T=\left\{A_{\text{xx}},A_{\text{xy}},A_{\text{yy}},A_x,A_y,A_0\right\} \f$.
    .    However, to specify an ellipse, all that is needed is five numbers; the major and minor axes lengths \f$ (a,b) \f$,
    .    the position \f$ (x_0,y_0) \f$, and the orientation \f$ \theta \f$. This is because the basis set includes lines,
    .    quadratics, parabolic and hyperbolic functions as well as elliptical functions as possible fits.
    .    If the fit is found to be a parabolic or hyperbolic function then the standard #fitEllipse method is used.
    .    The AMS method restricts the fit to parabolic, hyperbolic and elliptical curves
    .    by imposing the condition that \f$ A^T ( D_x^T D_x  +   D_y^T D_y) A = 1 \f$ where
    .    the matrices \f$ Dx \f$ and \f$ Dy \f$ are the partial derivatives of the design matrix \f$ D \f$ with
    .    respect to x and y. The matrices are formed row by row applying the following to
    .    each of the points in the set:
    .    \f{align*}{
    .    D(i,:)&=\left\{x_i^2, x_i y_i, y_i^2, x_i, y_i, 1\right\} &
    .    D_x(i,:)&=\left\{2 x_i,y_i,0,1,0,0\right\} &
    .    D_y(i,:)&=\left\{0,x_i,2 y_i,0,1,0\right\}
    .    \f}
    .    The AMS method minimizes the cost function
    .    \f{equation*}{
    .    \epsilon ^2=\frac{ A^T D^T D A }{ A^T (D_x^T D_x +  D_y^T D_y) A^T }
    .    \f}
    .
    .    The minimum cost is found by solving the generalized eigenvalue problem.
    .
    .    \f{equation*}{
    .    D^T D A = \lambda  \left( D_x^T D_x +  D_y^T D_y\right) A
    .    \f}
    .
    .    @param points Input 2D point set, stored in std::vector\<\> or Mat
    """
    ...

def fitEllipseDirect(points) -> retval:
    """
    .   @brief Fits an ellipse around a set of 2D points.
    .
    .    The function calculates the ellipse that fits a set of 2D points.
    .    It returns the rotated rectangle in which the ellipse is inscribed.
    .    The Direct least square (Direct) method by @cite Fitzgibbon1999 is used.
    .
    .    For an ellipse, this basis set is \f$ \chi= \left(x^2, x y, y^2, x, y, 1\right) \f$,
    .    which is a set of six free coefficients \f$ A^T=\left\{A_{\text{xx}},A_{\text{xy}},A_{\text{yy}},A_x,A_y,A_0\right\} \f$.
    .    However, to specify an ellipse, all that is needed is five numbers; the major and minor axes lengths \f$ (a,b) \f$,
    .    the position \f$ (x_0,y_0) \f$, and the orientation \f$ \theta \f$. This is because the basis set includes lines,
    .    quadratics, parabolic and hyperbolic functions as well as elliptical functions as possible fits.
    .    The Direct method confines the fit to ellipses by ensuring that \f$ 4 A_{xx} A_{yy}- A_{xy}^2 > 0 \f$.
    .    The condition imposed is that \f$ 4 A_{xx} A_{yy}- A_{xy}^2=1 \f$ which satisfies the inequality
    .    and as the coefficients can be arbitrarily scaled is not overly restrictive.
    .
    .    \f{equation*}{
    .    \epsilon ^2= A^T D^T D A \quad \text{with} \quad A^T C A =1 \quad \text{and} \quad C=\left(\begin{matrix}
    .    0 & 0  & 2  & 0  & 0  &  0  \\
    .    0 & -1  & 0  & 0  & 0  &  0 \\
    .    2 & 0  & 0  & 0  & 0  &  0 \\
    .    0 & 0  & 0  & 0  & 0  &  0 \\
    .    0 & 0  & 0  & 0  & 0  &  0 \\
    .    0 & 0  & 0  & 0  & 0  &  0
    .    \end{matrix} \right)
    .    \f}
    .
    .    The minimum cost is found by solving the generalized eigenvalue problem.
    .
    .    \f{equation*}{
    .    D^T D A = \lambda  \left( C\right) A
    .    \f}
    .
    .    The system produces only one positive eigenvalue \f$ \lambda\f$ which is chosen as the solution
    .    with its eigenvector \f$\mathbf{u}\f$. These are used to find the coefficients
    .
    .    \f{equation*}{
    .    A = \sqrt{\frac{1}{\mathbf{u}^T C \mathbf{u}}}  \mathbf{u}
    .    \f}
    .    The scaling factor guarantees that  \f$A^T C A =1\f$.
    .
    .    @param points Input 2D point set, stored in std::vector\<\> or Mat
    """
    ...

def fitLine(points, distType, param, reps, aeps, line=...) -> line:
    """
    .   @brief Fits a line to a 2D or 3D point set.
    .
    .   The function fitLine fits a line to a 2D or 3D point set by minimizing \f$\sum_i \rho(r_i)\f$ where
    .   \f$r_i\f$ is a distance between the \f$i^{th}\f$ point, the line and \f$\rho(r)\f$ is a distance function, one
    .   of the following:
    .   -  DIST_L2
    .   \f[\rho (r) = r^2/2  \quad \text{(the simplest and the fastest least-squares method)}\f]
    .   - DIST_L1
    .   \f[\rho (r) = r\f]
    .   - DIST_L12
    .   \f[\rho (r) = 2  \cdot ( \sqrt{1 + \frac{r^2}{2}} - 1)\f]
    .   - DIST_FAIR
    .   \f[\rho \left (r \right ) = C^2  \cdot \left (  \frac{r}{C} -  \log{\left(1 + \frac{r}{C}\right)} \right )  \quad \text{where} \quad C=1.3998\f]
    .   - DIST_WELSCH
    .   \f[\rho \left (r \right ) =  \frac{C^2}{2} \cdot \left ( 1 -  \exp{\left(-\left(\frac{r}{C}\right)^2\right)} \right )  \quad \text{where} \quad C=2.9846\f]
    .   - DIST_HUBER
    .   \f[\rho (r) =  \fork{r^2/2}{if \(r < C\)}{C \cdot (r-C/2)}{otherwise} \quad \text{where} \quad C=1.345\f]
    .
    .   The algorithm is based on the M-estimator ( <http://en.wikipedia.org/wiki/M-estimator> ) technique
    .   that iteratively fits the line using the weighted least-squares algorithm. After each iteration the
    .   weights \f$w_i\f$ are adjusted to be inversely proportional to \f$\rho(r_i)\f$ .
    .
    .   @param points Input vector of 2D or 3D points, stored in std::vector\<\> or Mat.
    .   @param line Output line parameters. In case of 2D fitting, it should be a vector of 4 elements
    .   (like Vec4f) - (vx, vy, x0, y0), where (vx, vy) is a normalized vector collinear to the line and
    .   (x0, y0) is a point on the line. In case of 3D fitting, it should be a vector of 6 elements (like
    .   Vec6f) - (vx, vy, vz, x0, y0, z0), where (vx, vy, vz) is a normalized vector collinear to the line
    .   and (x0, y0, z0) is a point on the line.
    .   @param distType Distance used by the M-estimator, see #DistanceTypes
    .   @param param Numerical parameter ( C ) for some types of distances. If it is 0, an optimal value
    .   is chosen.
    .   @param reps Sufficient accuracy for the radius (distance between the coordinate origin and the line).
    .   @param aeps Sufficient accuracy for the angle. 0.01 would be a good default value for reps and aeps.
    """
    ...

def flip(src, flipCode, dst=...) -> dst:
    """
    .   @brief Flips a 2D array around vertical, horizontal, or both axes.
    .
    .   The function cv::flip flips the array in one of three different ways (row
    .   and column indices are 0-based):
    .   \f[\texttt{dst} _{ij} =
    .   \left\{
    .   \begin{array}{l l}
    .   \texttt{src} _{\texttt{src.rows}-i-1,j} & if\;  \texttt{flipCode} = 0 \\
    .   \texttt{src} _{i, \texttt{src.cols} -j-1} & if\;  \texttt{flipCode} > 0 \\
    .   \texttt{src} _{ \texttt{src.rows} -i-1, \texttt{src.cols} -j-1} & if\; \texttt{flipCode} < 0 \\
    .   \end{array}
    .   \right.\f]
    .   The example scenarios of using the function are the following:
    .   *   Vertical flipping of the image (flipCode == 0) to switch between
    .       top-left and bottom-left image origin. This is a typical operation
    .       in video processing on Microsoft Windows\* OS.
    .   *   Horizontal flipping of the image with the subsequent horizontal
    .       shift and absolute difference calculation to check for a
    .       vertical-axis symmetry (flipCode \> 0).
    .   *   Simultaneous horizontal and vertical flipping of the image with
    .       the subsequent shift and absolute difference calculation to check
    .       for a central symmetry (flipCode \< 0).
    .   *   Reversing the order of point arrays (flipCode \> 0 or
    .       flipCode == 0).
    .   @param src input array.
    .   @param dst output array of the same size and type as src.
    .   @param flipCode a flag to specify how to flip the array; 0 means
    .   flipping around the x-axis and positive value (for example, 1) means
    .   flipping around y-axis. Negative value (for example, -1) means flipping
    .   around both axes.
    .   @sa transpose , repeat , completeSymm
    """
    ...

def floodFill(
    image: ndarray,
    mask: ndarray,
    seedPoint: Tuple[int, int],
    newVal: Any,
    loDiff: float = ...,
    upDiff: float = ...,
    flags: int = ...,
) -> Tuple[ndarray, ndarray, ndarray, Tuple[int, int, int, int]]:
    """
    .   @brief Fills a connected component with the given color.
    .
    .   The function cv::floodFill fills a connected component starting from the seed point with the specified
    .   color. The connectivity is determined by the color/brightness closeness of the neighbor pixels. The
    .   pixel at \f$(x,y)\f$ is considered to belong to the repainted domain if:
    .
    .   - in case of a grayscale image and floating range
    .   \f[\texttt{src} (x',y')- \texttt{loDiff} \leq \texttt{src} (x,y)  \leq \texttt{src} (x',y')+ \texttt{upDiff}\f]
    .
    .
    .   - in case of a grayscale image and fixed range
    .   \f[\texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)- \texttt{loDiff} \leq \texttt{src} (x,y)  \leq \texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)+ \texttt{upDiff}\f]
    .
    .
    .   - in case of a color image and floating range
    .   \f[\texttt{src} (x',y')_r- \texttt{loDiff} _r \leq \texttt{src} (x,y)_r \leq \texttt{src} (x',y')_r+ \texttt{upDiff} _r,\f]
    .   \f[\texttt{src} (x',y')_g- \texttt{loDiff} _g \leq \texttt{src} (x,y)_g \leq \texttt{src} (x',y')_g+ \texttt{upDiff} _g\f]
    .   and
    .   \f[\texttt{src} (x',y')_b- \texttt{loDiff} _b \leq \texttt{src} (x,y)_b \leq \texttt{src} (x',y')_b+ \texttt{upDiff} _b\f]
    .
    .
    .   - in case of a color image and fixed range
    .   \f[\texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_r- \texttt{loDiff} _r \leq \texttt{src} (x,y)_r \leq \texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_r+ \texttt{upDiff} _r,\f]
    .   \f[\texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_g- \texttt{loDiff} _g \leq \texttt{src} (x,y)_g \leq \texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_g+ \texttt{upDiff} _g\f]
    .   and
    .   \f[\texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_b- \texttt{loDiff} _b \leq \texttt{src} (x,y)_b \leq \texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_b+ \texttt{upDiff} _b\f]
    .
    .
    .   where \f$src(x',y')\f$ is the value of one of pixel neighbors that is already known to belong to the
    .   component. That is, to be added to the connected component, a color/brightness of the pixel should
    .   be close enough to:
    .   - Color/brightness of one of its neighbors that already belong to the connected component in case
    .   of a floating range.
    .   - Color/brightness of the seed point in case of a fixed range.
    .
    .   Use these functions to either mark a connected component with the specified color in-place, or build
    .   a mask and then extract the contour, or copy the region to another image, and so on.
    .
    .   @param image Input/output 1- or 3-channel, 8-bit, or floating-point image. It is modified by the
    .   function unless the #FLOODFILL_MASK_ONLY flag is set in the second variant of the function. See
    .   the details below.
    .   @param mask Operation mask that should be a single-channel 8-bit image, 2 pixels wider and 2 pixels
    .   taller than image. Since this is both an input and output parameter, you must take responsibility
    .   of initializing it. Flood-filling cannot go across non-zero pixels in the input mask. For example,
    .   an edge detector output can be used as a mask to stop filling at edges. On output, pixels in the
    .   mask corresponding to filled pixels in the image are set to 1 or to the a value specified in flags
    .   as described below. Additionally, the function fills the border of the mask with ones to simplify
    .   internal processing. It is therefore possible to use the same mask in multiple calls to the function
    .   to make sure the filled areas do not overlap.
    .   @param seedPoint Starting point.
    .   @param newVal New value of the repainted domain pixels.
    .   @param loDiff Maximal lower brightness/color difference between the currently observed pixel and
    .   one of its neighbors belonging to the component, or a seed pixel being added to the component.
    .   @param upDiff Maximal upper brightness/color difference between the currently observed pixel and
    .   one of its neighbors belonging to the component, or a seed pixel being added to the component.
    .   @param rect Optional output parameter set by the function to the minimum bounding rectangle of the
    .   repainted domain.
    .   @param flags Operation flags. The first 8 bits contain a connectivity value. The default value of
    .   4 means that only the four nearest neighbor pixels (those that share an edge) are considered. A
    .   connectivity value of 8 means that the eight nearest neighbor pixels (those that share a corner)
    .   will be considered. The next 8 bits (8-16) contain a value between 1 and 255 with which to fill
    .   the mask (the default value is 1). For example, 4 | ( 255 \<\< 8 ) will consider 4 nearest
    .   neighbours and fill the mask with a value of 255. The following additional options occupy higher
    .   bits and therefore may be further combined with the connectivity and mask fill values using
    .   bit-wise or (|), see #FloodFillFlags.
    .
    .   @note Since the mask is larger than the filled image, a pixel \f$(x, y)\f$ in image corresponds to the
    .   pixel \f$(x+1, y+1)\f$ in the mask .
    .
    .   @sa findContours
    """
    ...

def gemm(src1, src2, alpha, src3, beta, dst=..., flags=...) -> dst:
    """
    .   @brief Performs generalized matrix multiplication.
    .
    .   The function cv::gemm performs generalized matrix multiplication similar to the
    .   gemm functions in BLAS level 3. For example,
    .   `gemm(src1, src2, alpha, src3, beta, dst, GEMM_1_T + GEMM_3_T)`
    .   corresponds to
    .   \f[\texttt{dst} =  \texttt{alpha} \cdot \texttt{src1} ^T  \cdot \texttt{src2} +  \texttt{beta} \cdot \texttt{src3} ^T\f]
    .
    .   In case of complex (two-channel) data, performed a complex matrix
    .   multiplication.
    .
    .   The function can be replaced with a matrix expression. For example, the
    .   above call can be replaced with:
    .   @code{.cpp}
    .       dst = alpha*src1.t()*src2 + beta*src3.t();
    .   @endcode
    .   @param src1 first multiplied input matrix that could be real(CV_32FC1,
    .   CV_64FC1) or complex(CV_32FC2, CV_64FC2).
    .   @param src2 second multiplied input matrix of the same type as src1.
    .   @param alpha weight of the matrix product.
    .   @param src3 third optional delta matrix added to the matrix product; it
    .   should have the same type as src1 and src2.
    .   @param beta weight of src3.
    .   @param dst output matrix; it has the proper size and the same type as
    .   input matrices.
    .   @param flags operation flags (cv::GemmFlags)
    .   @sa mulTransposed , transform
    """
    ...

def getAffineTransform(src, dst) -> retval:
    """
    .   @overload
    """
    ...

def getBuildInformation() -> retval:
    """
    .   @brief Returns full configuration time cmake output.
    .
    .   Returned value is raw cmake output including version control system revision, compiler version,
    .   compiler flags, enabled modules and third party libraries, etc. Output format depends on target
    .   architecture.
    """
    ...

def getCPUFeaturesLine() -> retval:
    """
    .   @brief Returns list of CPU features enabled during compilation.
    .
    .   Returned value is a string containing space separated list of CPU features with following markers:
    .
    .   - no markers - baseline features
    .   - prefix `*` - features enabled in dispatcher
    .   - suffix `?` - features enabled but not available in HW
    .
    .   Example: `SSE SSE2 SSE3 *SSE4.1 *SSE4.2 *FP16 *AVX *AVX2 *AVX512-SKX?`
    """
    ...

def getCPUTickCount() -> retval:
    """
    .   @brief Returns the number of CPU ticks.
    .
    .   The function returns the current number of CPU ticks on some architectures (such as x86, x64,
    .   PowerPC). On other platforms the function is equivalent to getTickCount. It can also be used for
    .   very accurate time measurements, as well as for RNG initialization. Note that in case of multi-CPU
    .   systems a thread, from which getCPUTickCount is called, can be suspended and resumed at another CPU
    .   with its own counter. So, theoretically (and practically) the subsequent calls to the function do
    .   not necessary return the monotonously increasing values. Also, since a modern CPU varies the CPU
    .   frequency depending on the load, the number of CPU clocks spent in some code cannot be directly
    .   converted to time units. Therefore, getTickCount is generally a preferable solution for measuring
    .   execution time.
    """
    ...

def getDefaultNewCameraMatrix(
    cameraMatrix, imgsize=..., centerPrincipalPoint=...
) -> retval:
    """
    .   @brief Returns the default new camera matrix.
    .
    .   The function returns the camera matrix that is either an exact copy of the input cameraMatrix (when
    .   centerPrinicipalPoint=false ), or the modified one (when centerPrincipalPoint=true).
    .
    .   In the latter case, the new camera matrix will be:
    .
    .   \f[\begin{bmatrix} f_x && 0 && ( \texttt{imgSize.width} -1)*0.5  \\ 0 && f_y && ( \texttt{imgSize.height} -1)*0.5  \\ 0 && 0 && 1 \end{bmatrix} ,\f]
    .
    .   where \f$f_x\f$ and \f$f_y\f$ are \f$(0,0)\f$ and \f$(1,1)\f$ elements of cameraMatrix, respectively.
    .
    .   By default, the undistortion functions in OpenCV (see #initUndistortRectifyMap, #undistort) do not
    .   move the principal point. However, when you work with stereo, it is important to move the principal
    .   points in both views to the same y-coordinate (which is required by most of stereo correspondence
    .   algorithms), and may be to the same x-coordinate too. So, you can form the new camera matrix for
    .   each view where the principal points are located at the center.
    .
    .   @param cameraMatrix Input camera matrix.
    .   @param imgsize Camera view image size in pixels.
    .   @param centerPrincipalPoint Location of the principal point in the new camera matrix. The
    .   parameter indicates whether this location should be at the image center or not.
    """
    ...

def getDerivKernels(
    dx, dy, ksize, kx=..., ky=..., normalize=..., ktype=...
) -> Tuple[kx, ky]:
    """
    .   @brief Returns filter coefficients for computing spatial image derivatives.
    .
    .   The function computes and returns the filter coefficients for spatial image derivatives. When
    .   `ksize=FILTER_SCHARR`, the Scharr \f$3 \times 3\f$ kernels are generated (see #Scharr). Otherwise, Sobel
    .   kernels are generated (see #Sobel). The filters are normally passed to #sepFilter2D or to
    .
    .   @param kx Output matrix of row filter coefficients. It has the type ktype .
    .   @param ky Output matrix of column filter coefficients. It has the type ktype .
    .   @param dx Derivative order in respect of x.
    .   @param dy Derivative order in respect of y.
    .   @param ksize Aperture size. It can be FILTER_SCHARR, 1, 3, 5, or 7.
    .   @param normalize Flag indicating whether to normalize (scale down) the filter coefficients or not.
    .   Theoretically, the coefficients should have the denominator \f$=2^{ksize*2-dx-dy-2}\f$. If you are
    .   going to filter floating-point images, you are likely to use the normalized kernels. But if you
    .   compute derivatives of an 8-bit image, store the results in a 16-bit image, and wish to preserve
    .   all the fractional bits, you may want to set normalize=false .
    .   @param ktype Type of filter coefficients. It can be CV_32f or CV_64F .
    """
    ...

def getFontScaleFromHeight(fontFace, pixelHeight, thickness=...) -> retval:
    """
    .   @brief Calculates the font-specific size to use to achieve a given height in pixels.
    .
    .   @param fontFace Font to use, see cv::HersheyFonts.
    .   @param pixelHeight Pixel height to compute the fontScale for
    .   @param thickness Thickness of lines used to render the text.See putText for details.
    .   @return The fontSize to use for cv::putText
    .
    .   @see cv::putText
    """
    ...

def getGaborKernel(ksize, sigma, theta, lambd, gamma, psi=..., ktype=...) -> retval:
    """
    .   @brief Returns Gabor filter coefficients.
    .
    .   For more details about gabor filter equations and parameters, see: [Gabor
    .   Filter](http://en.wikipedia.org/wiki/Gabor_filter).
    .
    .   @param ksize Size of the filter returned.
    .   @param sigma Standard deviation of the gaussian envelope.
    .   @param theta Orientation of the normal to the parallel stripes of a Gabor function.
    .   @param lambd Wavelength of the sinusoidal factor.
    .   @param gamma Spatial aspect ratio.
    .   @param psi Phase offset.
    .   @param ktype Type of filter coefficients. It can be CV_32F or CV_64F .
    """
    ...

def getGaussianKernel(ksize, sigma, ktype=...) -> retval:
    """
    .   @brief Returns Gaussian filter coefficients.
    .
    .   The function computes and returns the \f$\texttt{ksize} \times 1\f$ matrix of Gaussian filter
    .   coefficients:
    .
    .   \f[G_i= \alpha *e^{-(i-( \texttt{ksize} -1)/2)^2/(2* \texttt{sigma}^2)},\f]
    .
    .   where \f$i=0..\texttt{ksize}-1\f$ and \f$\alpha\f$ is the scale factor chosen so that \f$\sum_i G_i=1\f$.
    .
    .   Two of such generated kernels can be passed to sepFilter2D. Those functions automatically recognize
    .   smoothing kernels (a symmetrical kernel with sum of weights equal to 1) and handle them accordingly.
    .   You may also use the higher-level GaussianBlur.
    .   @param ksize Aperture size. It should be odd ( \f$\texttt{ksize} \mod 2 = 1\f$ ) and positive.
    .   @param sigma Gaussian standard deviation. If it is non-positive, it is computed from ksize as
    .   `sigma = 0.3*((ksize-1)*0.5 - 1) + 0.8`.
    .   @param ktype Type of filter coefficients. It can be CV_32F or CV_64F .
    .   @sa  sepFilter2D, getDerivKernels, getStructuringElement, GaussianBlur
    """
    ...

def getHardwareFeatureName(feature) -> retval:
    """
    .   @brief Returns feature name by ID
    .
    .   Returns empty string if feature is not defined
    """
    ...

def getLogLevel() -> retval:
    """
    .
    """
    ...

def getNumThreads() -> retval:
    """
    .   @brief Returns the number of threads used by OpenCV for parallel regions.
    .
    .   Always returns 1 if OpenCV is built without threading support.
    .
    .   The exact meaning of return value depends on the threading framework used by OpenCV library:
    .   - `TBB` - The number of threads, that OpenCV will try to use for parallel regions. If there is
    .     any tbb::thread_scheduler_init in user code conflicting with OpenCV, then function returns
    .     default number of threads used by TBB library.
    .   - `OpenMP` - An upper bound on the number of threads that could be used to form a new team.
    .   - `Concurrency` - The number of threads, that OpenCV will try to use for parallel regions.
    .   - `GCD` - Unsupported; returns the GCD thread pool limit (512) for compatibility.
    .   - `C=` - The number of threads, that OpenCV will try to use for parallel regions, if before
    .     called setNumThreads with threads \> 0, otherwise returns the number of logical CPUs,
    .     available for the process.
    .   @sa setNumThreads, getThreadNum
    """
    ...

def getNumberOfCPUs() -> retval:
    """
    .   @brief Returns the number of logical CPUs available for the process.
    """
    ...

def getOptimalDFTSize(vecsize) -> retval:
    """
    .   @brief Returns the optimal DFT size for a given vector size.
    .
    .   DFT performance is not a monotonic function of a vector size. Therefore, when you calculate
    .   convolution of two arrays or perform the spectral analysis of an array, it usually makes sense to
    .   pad the input data with zeros to get a bit larger array that can be transformed much faster than the
    .   original one. Arrays whose size is a power-of-two (2, 4, 8, 16, 32, ...) are the fastest to process.
    .   Though, the arrays whose size is a product of 2's, 3's, and 5's (for example, 300 = 5\*5\*3\*2\*2)
    .   are also processed quite efficiently.
    .
    .   The function cv::getOptimalDFTSize returns the minimum number N that is greater than or equal to vecsize
    .   so that the DFT of a vector of size N can be processed efficiently. In the current implementation N
    .   = 2 ^p^ \* 3 ^q^ \* 5 ^r^ for some integer p, q, r.
    .
    .   The function returns a negative number if vecsize is too large (very close to INT_MAX ).
    .
    .   While the function cannot be used directly to estimate the optimal vector size for DCT transform
    .   (since the current DCT implementation supports only even-size vectors), it can be easily processed
    .   as getOptimalDFTSize((vecsize+1)/2)\*2.
    .   @param vecsize vector size.
    .   @sa dft , dct , idft , idct , mulSpectrums
    """
    ...

def getOptimalNewCameraMatrix(
    cameraMatrix, distCoeffs, imageSize, alpha, newImgSize=..., centerPrincipalPoint=...
) -> Tuple[retval, validPixROI]:
    """
    .   @brief Returns the new camera intrinsic matrix based on the free scaling parameter.
    .
    .   @param cameraMatrix Input camera intrinsic matrix.
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$\distcoeffs\f$. If the vector is NULL/empty, the zero distortion coefficients are
    .   assumed.
    .   @param imageSize Original image size.
    .   @param alpha Free scaling parameter between 0 (when all the pixels in the undistorted image are
    .   valid) and 1 (when all the source image pixels are retained in the undistorted image). See
    .   stereoRectify for details.
    .   @param newImgSize Image size after rectification. By default, it is set to imageSize .
    .   @param validPixROI Optional output rectangle that outlines all-good-pixels region in the
    .   undistorted image. See roi1, roi2 description in stereoRectify .
    .   @param centerPrincipalPoint Optional flag that indicates whether in the new camera intrinsic matrix the
    .   principal point should be at the image center or not. By default, the principal point is chosen to
    .   best fit a subset of the source image (determined by alpha) to the corrected image.
    .   @return new_camera_matrix Output new camera intrinsic matrix.
    .
    .   The function computes and returns the optimal new camera intrinsic matrix based on the free scaling parameter.
    .   By varying this parameter, you may retrieve only sensible pixels alpha=0 , keep all the original
    .   image pixels if there is valuable information in the corners alpha=1 , or get something in between.
    .   When alpha\>0 , the undistorted result is likely to have some black pixels corresponding to
    .   "virtual" pixels outside of the captured distorted image. The original camera intrinsic matrix, distortion
    .   coefficients, the computed new camera intrinsic matrix, and newImageSize should be passed to
    .   initUndistortRectifyMap to produce the maps for remap .
    """
    ...

def getPerspectiveTransform(src, dst, solveMethod=...) -> retval:
    """
    .   @brief Calculates a perspective transform from four pairs of the corresponding points.
    .
    .   The function calculates the \f$3 \times 3\f$ matrix of a perspective transform so that:
    .
    .   \f[\begin{bmatrix} t_i x'_i \\ t_i y'_i \\ t_i \end{bmatrix} = \texttt{map_matrix} \cdot \begin{bmatrix} x_i \\ y_i \\ 1 \end{bmatrix}\f]
    .
    .   where
    .
    .   \f[dst(i)=(x'_i,y'_i), src(i)=(x_i, y_i), i=0,1,2,3\f]
    .
    .   @param src Coordinates of quadrangle vertices in the source image.
    .   @param dst Coordinates of the corresponding quadrangle vertices in the destination image.
    .   @param solveMethod method passed to cv::solve (#DecompTypes)
    .
    .   @sa  findHomography, warpPerspective, perspectiveTransform
    """
    ...

def getRectSubPix(image, patchSize, center, patch=..., patchType=...) -> patch:
    """
    .   @brief Retrieves a pixel rectangle from an image with sub-pixel accuracy.
    .
    .   The function getRectSubPix extracts pixels from src:
    .
    .   \f[patch(x, y) = src(x +  \texttt{center.x} - ( \texttt{dst.cols} -1)*0.5, y +  \texttt{center.y} - ( \texttt{dst.rows} -1)*0.5)\f]
    .
    .   where the values of the pixels at non-integer coordinates are retrieved using bilinear
    .   interpolation. Every channel of multi-channel images is processed independently. Also
    .   the image should be a single channel or three channel image. While the center of the
    .   rectangle must be inside the image, parts of the rectangle may be outside.
    .
    .   @param image Source image.
    .   @param patchSize Size of the extracted patch.
    .   @param center Floating point coordinates of the center of the extracted rectangle within the
    .   source image. The center must be inside the image.
    .   @param patch Extracted patch that has the size patchSize and the same number of channels as src .
    .   @param patchType Depth of the extracted pixels. By default, they have the same depth as src .
    .
    .   @sa  warpAffine, warpPerspective
    """
    ...

def getRotationMatrix2D(center, angle, scale) -> retval:
    """
    .   @brief Calculates an affine matrix of 2D rotation.
    .
    .   The function calculates the following matrix:
    .
    .   \f[\begin{bmatrix} \alpha &  \beta & (1- \alpha )  \cdot \texttt{center.x} -  \beta \cdot \texttt{center.y} \\ - \beta &  \alpha &  \beta \cdot \texttt{center.x} + (1- \alpha )  \cdot \texttt{center.y} \end{bmatrix}\f]
    .
    .   where
    .
    .   \f[\begin{array}{l} \alpha =  \texttt{scale} \cdot \cos \texttt{angle} , \\ \beta =  \texttt{scale} \cdot \sin \texttt{angle} \end{array}\f]
    .
    .   The transformation maps the rotation center to itself. If this is not the target, adjust the shift.
    .
    .   @param center Center of the rotation in the source image.
    .   @param angle Rotation angle in degrees. Positive values mean counter-clockwise rotation (the
    .   coordinate origin is assumed to be the top-left corner).
    .   @param scale Isotropic scale factor.
    .
    .   @sa  getAffineTransform, warpAffine, transform
    """
    ...

def getStructuringElement(
    shape: int, ksize: Tuple[int, int], anchor: Tuple[int, int] = ...
) -> ndarray:
    """
    .   @brief Returns a structuring element of the specified size and shape for morphological operations.
    .
    .   The function constructs and returns the structuring element that can be further passed to #erode,
    .   #dilate or #morphologyEx. But you can also construct an arbitrary binary mask yourself and use it as
    .   the structuring element.
    .
    .   @param shape Element shape that could be one of #MorphShapes
    .   @param ksize Size of the structuring element.
    .   @param anchor Anchor position within the element. The default value \f$(-1, -1)\f$ means that the
    .   anchor is at the center. Note that only the shape of a cross-shaped element depends on the anchor
    .   position. In other cases the anchor just regulates how much the result of the morphological
    .   operation is shifted.
    """
    ...

def getTextSize(text, fontFace, fontScale, thickness) -> Tuple[retval, baseLine]:
    """
    .   @brief Calculates the width and height of a text string.
    .
    .   The function cv::getTextSize calculates and returns the size of a box that contains the specified text.
    .   That is, the following code renders some text, the tight box surrounding it, and the baseline: :
    .   @code
    .       String text = "Funny text inside the box";
    .       int fontFace = FONT_HERSHEY_SCRIPT_SIMPLEX;
    .       double fontScale = 2;
    .       int thickness = 3;
    .
    .       Mat img(600, 800, CV_8UC3, Scalar::all(0));
    .
    .       int baseline=0;
    .       Size textSize = getTextSize(text, fontFace,
    .                                   fontScale, thickness, &baseline);
    .       baseline += thickness;
    .
    .       // center the text
    .       Point textOrg((img.cols - textSize.width)/2,
    .                     (img.rows + textSize.height)/2);
    .
    .       // draw the box
    .       rectangle(img, textOrg + Point(0, baseline),
    .                 textOrg + Point(textSize.width, -textSize.height),
    .                 Scalar(0,0,255));
    .       // ... and the baseline first
    .       line(img, textOrg + Point(0, thickness),
    .            textOrg + Point(textSize.width, thickness),
    .            Scalar(0, 0, 255));
    .
    .       // then put the text itself
    .       putText(img, text, textOrg, fontFace, fontScale,
    .               Scalar::all(255), thickness, 8);
    .   @endcode
    .
    .   @param text Input text string.
    .   @param fontFace Font to use, see #HersheyFonts.
    .   @param fontScale Font scale factor that is multiplied by the font-specific base size.
    .   @param thickness Thickness of lines used to render the text. See #putText for details.
    .   @param[out] baseLine y-coordinate of the baseline relative to the bottom-most text
    .   point.
    .   @return The size of a box that contains the specified text.
    .
    .   @see putText
    """
    ...

def getThreadNum() -> retval:
    """
    .   @brief Returns the index of the currently executed thread within the current parallel region. Always
    .   returns 0 if called outside of parallel region.
    .
    .   @deprecated Current implementation doesn't corresponding to this documentation.
    .
    .   The exact meaning of the return value depends on the threading framework used by OpenCV library:
    .   - `TBB` - Unsupported with current 4.1 TBB release. Maybe will be supported in future.
    .   - `OpenMP` - The thread number, within the current team, of the calling thread.
    .   - `Concurrency` - An ID for the virtual processor that the current context is executing on (0
    .     for master thread and unique number for others, but not necessary 1,2,3,...).
    .   - `GCD` - System calling thread's ID. Never returns 0 inside parallel region.
    .   - `C=` - The index of the current parallel task.
    .   @sa setNumThreads, getNumThreads
    """
    ...

def getTickCount() -> retval:
    """
    .   @brief Returns the number of ticks.
    .
    .   The function returns the number of ticks after the certain event (for example, when the machine was
    .   turned on). It can be used to initialize RNG or to measure a function execution time by reading the
    .   tick count before and after the function call.
    .   @sa getTickFrequency, TickMeter
    """
    ...

def getTickFrequency() -> retval:
    """
    .   @brief Returns the number of ticks per second.
    .
    .   The function returns the number of ticks per second. That is, the following code computes the
    .   execution time in seconds:
    .   @code
    .       double t = (double)getTickCount();
    .       // do something ...
    .       t = ((double)getTickCount() - t)/getTickFrequency();
    .   @endcode
    .   @sa getTickCount, TickMeter
    """
    ...

def getTrackbarPos(trackbarname, winname) -> retval:
    """
    .   @brief Returns the trackbar position.
    .
    .   The function returns the current position of the specified trackbar.
    .
    .   @note
    .
    .   [__Qt Backend Only__] winname can be empty if the trackbar is attached to the control
    .   panel.
    .
    .   @param trackbarname Name of the trackbar.
    .   @param winname Name of the window that is the parent of the trackbar.
    """
    ...

def getValidDisparityROI(
    roi1, roi2, minDisparity, numberOfDisparities, blockSize
) -> retval:
    """
    .
    """
    ...

def getVersionMajor() -> retval:
    """
    .   @brief Returns major library version
    """
    ...

def getVersionMinor() -> retval:
    """
    .   @brief Returns minor library version
    """
    ...

def getVersionRevision() -> retval:
    """
    .   @brief Returns revision field of the library version
    """
    ...

def getVersionString() -> retval:
    """
    .   @brief Returns library version string
    .
    .   For example "3.4.1-dev".
    .
    .   @sa getMajorVersion, getMinorVersion, getRevisionVersion
    """
    ...

def getWindowImageRect(winname) -> retval:
    """
    .   @brief Provides rectangle of image in the window.
    .
    .   The function getWindowImageRect returns the client screen coordinates, width and height of the image rendering area.
    .
    .   @param winname Name of the window.
    .
    .   @sa resizeWindow moveWindow
    """
    ...

def getWindowProperty(winname: Text, prop_id: int) -> int:
    """
    .   @brief Provides parameters of a window.
    .
    .   The function getWindowProperty returns properties of a window.
    .
    .   @param winname Name of the window.
    .   @param prop_id Window property to retrieve. The following operation flags are available: (cv::WindowPropertyFlags)
    .
    .   @sa setWindowProperty
    """
    ...

def gin(*args, **kwargs) -> ExtractArgsCallback:
    """ """
    ...

def goodFeaturesToTrack(
    image,
    maxCorners,
    qualityLevel,
    minDistance,
    corners=...,
    mask=...,
    blockSize=...,
    useHarrisDetector=...,
    k=...,
) -> corners:
    """
    .   @brief Determines strong corners on an image.
    .
    .   The function finds the most prominent corners in the image or in the specified image region, as
    .   described in @cite Shi94
    .
    .   -   Function calculates the corner quality measure at every source image pixel using the
    .       #cornerMinEigenVal or #cornerHarris .
    .   -   Function performs a non-maximum suppression (the local maximums in *3 x 3* neighborhood are
    .       retained).
    .   -   The corners with the minimal eigenvalue less than
    .       \f$\texttt{qualityLevel} \cdot \max_{x,y} qualityMeasureMap(x,y)\f$ are rejected.
    .   -   The remaining corners are sorted by the quality measure in the descending order.
    .   -   Function throws away each corner for which there is a stronger corner at a distance less than
    .       maxDistance.
    .
    .   The function can be used to initialize a point-based tracker of an object.
    .
    .   @note If the function is called with different values A and B of the parameter qualityLevel , and
    .   A \> B, the vector of returned corners with qualityLevel=A will be the prefix of the output vector
    .   with qualityLevel=B .
    .
    .   @param image Input 8-bit or floating-point 32-bit, single-channel image.
    .   @param corners Output vector of detected corners.
    .   @param maxCorners Maximum number of corners to return. If there are more corners than are found,
    .   the strongest of them is returned. `maxCorners <= 0` implies that no limit on the maximum is set
    .   and all detected corners are returned.
    .   @param qualityLevel Parameter characterizing the minimal accepted quality of image corners. The
    .   parameter value is multiplied by the best corner quality measure, which is the minimal eigenvalue
    .   (see #cornerMinEigenVal ) or the Harris function response (see #cornerHarris ). The corners with the
    .   quality measure less than the product are rejected. For example, if the best corner has the
    .   quality measure = 1500, and the qualityLevel=0.01 , then all the corners with the quality measure
    .   less than 15 are rejected.
    .   @param minDistance Minimum possible Euclidean distance between the returned corners.
    .   @param mask Optional region of interest. If the image is not empty (it needs to have the type
    .   CV_8UC1 and the same size as image ), it specifies the region in which the corners are detected.
    .   @param blockSize Size of an average block for computing a derivative covariation matrix over each
    .   pixel neighborhood. See cornerEigenValsAndVecs .
    .   @param useHarrisDetector Parameter indicating whether to use a Harris detector (see #cornerHarris)
    .   or #cornerMinEigenVal.
    .   @param k Free parameter of the Harris detector.
    .
    .   @sa  cornerMinEigenVal, cornerHarris, calcOpticalFlowPyrLK, estimateRigidTransform,



    goodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize, corners=..., useHarrisDetector=..., k=...) -> corners
    .
    """
    ...

def goodFeaturesToTrackWithQuality(
    image,
    maxCorners,
    qualityLevel,
    minDistance,
    mask,
    corners=...,
    cornersQuality=...,
    blockSize=...,
    gradientSize=...,
    useHarrisDetector=...,
    k=...,
) -> Tuple[corners, cornersQuality]:
    """
    .   @brief Same as above, but returns also quality measure of the detected corners.
    .
    .   @param image Input 8-bit or floating-point 32-bit, single-channel image.
    .   @param corners Output vector of detected corners.
    .   @param maxCorners Maximum number of corners to return. If there are more corners than are found,
    .   the strongest of them is returned. `maxCorners <= 0` implies that no limit on the maximum is set
    .   and all detected corners are returned.
    .   @param qualityLevel Parameter characterizing the minimal accepted quality of image corners. The
    .   parameter value is multiplied by the best corner quality measure, which is the minimal eigenvalue
    .   (see #cornerMinEigenVal ) or the Harris function response (see #cornerHarris ). The corners with the
    .   quality measure less than the product are rejected. For example, if the best corner has the
    .   quality measure = 1500, and the qualityLevel=0.01 , then all the corners with the quality measure
    .   less than 15 are rejected.
    .   @param minDistance Minimum possible Euclidean distance between the returned corners.
    .   @param mask Region of interest. If the image is not empty (it needs to have the type
    .   CV_8UC1 and the same size as image ), it specifies the region in which the corners are detected.
    .   @param cornersQuality Output vector of quality measure of the detected corners.
    .   @param blockSize Size of an average block for computing a derivative covariation matrix over each
    .   pixel neighborhood. See cornerEigenValsAndVecs .
    .   @param gradientSize Aperture parameter for the Sobel operator used for derivatives computation.
    .   See cornerEigenValsAndVecs .
    .   @param useHarrisDetector Parameter indicating whether to use a Harris detector (see #cornerHarris)
    .   or #cornerMinEigenVal.
    .   @param k Free parameter of the Harris detector.
    """
    ...

def grabCut(
    img, mask, rect, bgdModel, fgdModel, iterCount, mode=...
) -> Tuple[l, fgdModel]:
    """
    .   @brief Runs the GrabCut algorithm.
    .
    .   The function implements the [GrabCut image segmentation algorithm](http://en.wikipedia.org/wiki/GrabCut).
    .
    .   @param img Input 8-bit 3-channel image.
    .   @param mask Input/output 8-bit single-channel mask. The mask is initialized by the function when
    .   mode is set to #GC_INIT_WITH_RECT. Its elements may have one of the #GrabCutClasses.
    .   @param rect ROI containing a segmented object. The pixels outside of the ROI are marked as
    .   "obvious background". The parameter is only used when mode==#GC_INIT_WITH_RECT .
    .   @param bgdModel Temporary array for the background model. Do not modify it while you are
    .   processing the same image.
    .   @param fgdModel Temporary arrays for the foreground model. Do not modify it while you are
    .   processing the same image.
    .   @param iterCount Number of iterations the algorithm should make before returning the result. Note
    .   that the result can be refined with further calls with mode==#GC_INIT_WITH_MASK or
    .   mode==GC_EVAL .
    .   @param mode Operation mode that could be one of the #GrabCutModes
    """
    ...

def groupRectangles(rectList, groupThreshold, eps=...) -> Tuple[rectList, weights]:
    """
    .   @overload
    """
    ...

def haveImageReader(filename) -> retval:
    """
    .   @brief Returns true if the specified image can be decoded by OpenCV
    .
    .   @param filename File name of the image
    """
    ...

def haveImageWriter(filename) -> retval:
    """
    .   @brief Returns true if an image with the specified filename can be encoded by OpenCV
    .
    .    @param filename File name of the image
    """
    ...

def haveOpenVX() -> retval:
    """
    .
    """
    ...

def hconcat(src, dst=...) -> dst:
    """
    .   @overload
    .    @code{.cpp}
    .       std::vector<cv::Mat> matrices = { cv::Mat(4, 1, CV_8UC1, cv::Scalar(1)),
    .                                         cv::Mat(4, 1, CV_8UC1, cv::Scalar(2)),
    .                                         cv::Mat(4, 1, CV_8UC1, cv::Scalar(3)),};
    .
    .       cv::Mat out;
    .       cv::hconcat( matrices, out );
    .       //out:
    .       //[1, 2, 3;
    .       // 1, 2, 3;
    .       // 1, 2, 3;
    .       // 1, 2, 3]
    .    @endcode
    .    @param src input array or vector of matrices. all of the matrices must have the same number of rows and the same depth.
    .    @param dst output array. It has the same number of rows and depth as the src, and the sum of cols of the src.
    .   same depth.
    """
    ...

def idct(src, dst=..., flags=...) -> dst:
    """
    .   @brief Calculates the inverse Discrete Cosine Transform of a 1D or 2D array.
    .
    .   idct(src, dst, flags) is equivalent to dct(src, dst, flags | DCT_INVERSE).
    .   @param src input floating-point single-channel array.
    .   @param dst output array of the same size and type as src.
    .   @param flags operation flags.
    .   @sa  dct, dft, idft, getOptimalDFTSize
    """
    ...

def idft(src, dst=..., flags=..., nonzeroRows=...) -> dst:
    """
    .   @brief Calculates the inverse Discrete Fourier Transform of a 1D or 2D array.
    .
    .   idft(src, dst, flags) is equivalent to dft(src, dst, flags | #DFT_INVERSE) .
    .   @note None of dft and idft scales the result by default. So, you should pass #DFT_SCALE to one of
    .   dft or idft explicitly to make these transforms mutually inverse.
    .   @sa dft, dct, idct, mulSpectrums, getOptimalDFTSize
    .   @param src input floating-point real or complex array.
    .   @param dst output array whose size and type depend on the flags.
    .   @param flags operation flags (see dft and #DftFlags).
    .   @param nonzeroRows number of dst rows to process; the rest of the rows have undefined content (see
    .   the convolution sample in dft description.
    """
    ...

def illuminationChange(src, mask, dst=..., alpha=..., beta=...) -> dst:
    """
    .   @brief Applying an appropriate non-linear transformation to the gradient field inside the selection and
    .   then integrating back with a Poisson solver, modifies locally the apparent illumination of an image.
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param mask Input 8-bit 1 or 3-channel image.
    .   @param dst Output image with the same size and type as src.
    .   @param alpha Value ranges between 0-2.
    .   @param beta Value ranges between 0-2.
    .
    .   This is useful to highlight under-exposed foreground objects or to reduce specular reflections.
    """
    ...

def imdecode(buf, flags) -> retval:
    """
    .   @brief Reads an image from a buffer in memory.
    .
    .   The function imdecode reads an image from the specified buffer in the memory. If the buffer is too short or
    .   contains invalid data, the function returns an empty matrix ( Mat::data==NULL ).
    .
    .   See cv::imread for the list of supported formats and flags description.
    .
    .   @note In the case of color images, the decoded images will have the channels stored in **B G R** order.
    .   @param buf Input array or vector of bytes.
    .   @param flags The same flags as in cv::imread, see cv::ImreadModes.
    """
    ...

def imencode(ext, img, params=...) -> Tuple[retval, buf]:
    """
    .   @brief Encodes an image into a memory buffer.
    .
    .   The function imencode compresses the image and stores it in the memory buffer that is resized to fit the
    .   result. See cv::imwrite for the list of supported formats and flags description.
    .
    .   @param ext File extension that defines the output format.
    .   @param img Image to be written.
    .   @param buf Output buffer resized to fit the compressed image.
    .   @param params Format-specific parameters. See cv::imwrite and cv::ImwriteFlags.
    """
    ...

def imread(filename, flags=...) -> retval:
    """
    .   @brief Loads an image from a file.
    .
    .   @anchor imread
    .
    .   The function imread loads an image from the specified file and returns it. If the image cannot be
    .   read (because of missing file, improper permissions, unsupported or invalid format), the function
    .   returns an empty matrix ( Mat::data==NULL ).
    .
    .   Currently, the following file formats are supported:
    .
    .   -   Windows bitmaps - \*.bmp, \*.dib (always supported)
    .   -   JPEG files - \*.jpeg, \*.jpg, \*.jpe (see the *Note* section)
    .   -   JPEG 2000 files - \*.jp2 (see the *Note* section)
    .   -   Portable Network Graphics - \*.png (see the *Note* section)
    .   -   WebP - \*.webp (see the *Note* section)
    .   -   Portable image format - \*.pbm, \*.pgm, \*.ppm \*.pxm, \*.pnm (always supported)
    .   -   PFM files - \*.pfm (see the *Note* section)
    .   -   Sun rasters - \*.sr, \*.ras (always supported)
    .   -   TIFF files - \*.tiff, \*.tif (see the *Note* section)
    .   -   OpenEXR Image files - \*.exr (see the *Note* section)
    .   -   Radiance HDR - \*.hdr, \*.pic (always supported)
    .   -   Raster and Vector geospatial data supported by GDAL (see the *Note* section)
    .
    .   @note
    .   -   The function determines the type of an image by the content, not by the file extension.
    .   -   In the case of color images, the decoded images will have the channels stored in **B G R** order.
    .   -   When using IMREAD_GRAYSCALE, the codec's internal grayscale conversion will be used, if available.
    .       Results may differ to the output of cvtColor()
    .   -   On Microsoft Windows\* OS and MacOSX\*, the codecs shipped with an OpenCV image (libjpeg,
    .       libpng, libtiff, and libjasper) are used by default. So, OpenCV can always read JPEGs, PNGs,
    .       and TIFFs. On MacOSX, there is also an option to use native MacOSX image readers. But beware
    .       that currently these native image loaders give images with different pixel values because of
    .       the color management embedded into MacOSX.
    .   -   On Linux\*, BSD flavors and other Unix-like open-source operating systems, OpenCV looks for
    .       codecs supplied with an OS image. Install the relevant packages (do not forget the development
    .       files, for example, "libjpeg-dev", in Debian\* and Ubuntu\*) to get the codec support or turn
    .       on the OPENCV_BUILD_3RDPARTY_LIBS flag in CMake.
    .   -   In the case you set *WITH_GDAL* flag to true in CMake and @ref IMREAD_LOAD_GDAL to load the image,
    .       then the [GDAL](http://www.gdal.org) driver will be used in order to decode the image, supporting
    .       the following formats: [Raster](http://www.gdal.org/formats_list.html),
    .       [Vector](http://www.gdal.org/ogr_formats.html).
    .   -   If EXIF information is embedded in the image file, the EXIF orientation will be taken into account
    .       and thus the image will be rotated accordingly except if the flags @ref IMREAD_IGNORE_ORIENTATION
    .       or @ref IMREAD_UNCHANGED are passed.
    .   -   Use the IMREAD_UNCHANGED flag to keep the floating point values from PFM image.
    .   -   By default number of pixels must be less than 2^30. Limit can be set using system
    .       variable OPENCV_IO_MAX_IMAGE_PIXELS
    .
    .   @param filename Name of file to be loaded.
    .   @param flags Flag that can take values of cv::ImreadModes
    """
    ...

def imreadmulti(filename, mats=..., flags=...) -> Tuple[retval, mats]:
    """
    .   @brief Loads a multi-page image from a file.
    .
    .   The function imreadmulti loads a multi-page image from the specified file into a vector of Mat objects.
    .   @param filename Name of file to be loaded.
    .   @param flags Flag that can take values of cv::ImreadModes, default with cv::IMREAD_ANYCOLOR.
    .   @param mats A vector of Mat objects holding each page, if more than one.
    .   @sa cv::imread
    """
    ...

def imshow(winname: Text, mat: ndarray) -> None:
    """
    .   @brief Displays an image in the specified window.
    .
    .   The function imshow displays an image in the specified window. If the window was created with the
    .   cv::WINDOW_AUTOSIZE flag, the image is shown with its original size, however it is still limited by the screen resolution.
    .   Otherwise, the image is scaled to fit the window. The function may scale the image, depending on its depth:
    .
    .   -   If the image is 8-bit unsigned, it is displayed as is.
    .   -   If the image is 16-bit unsigned or 32-bit integer, the pixels are divided by 256. That is, the
    .       value range [0,255\*256] is mapped to [0,255].
    .   -   If the image is 32-bit or 64-bit floating-point, the pixel values are multiplied by 255. That is, the
    .       value range [0,1] is mapped to [0,255].
    .
    .   If window was created with OpenGL support, cv::imshow also support ogl::Buffer , ogl::Texture2D and
    .   cuda::GpuMat as input.
    .
    .   If the window was not created before this function, it is assumed creating a window with cv::WINDOW_AUTOSIZE.
    .
    .   If you need to show an image that is bigger than the screen resolution, you will need to call namedWindow("", WINDOW_NORMAL) before the imshow.
    .
    .   @note This function should be followed by a call to cv::waitKey or cv::pollKey to perform GUI
    .   housekeeping tasks that are necessary to actually show the given image and make the window respond
    .   to mouse and keyboard events. Otherwise, it won't display the image and the window might lock up.
    .   For example, **waitKey(0)** will display the window infinitely until any keypress (it is suitable
    .   for image display). **waitKey(25)** will display a frame and wait approximately 25 ms for a key
    .   press (suitable for displaying a video frame-by-frame). To remove the window, use cv::destroyWindow.
    .
    .   @note
    .
    .   [__Windows Backend Only__] Pressing Ctrl+C will copy the image to the clipboard.
    .
    .   [__Windows Backend Only__] Pressing Ctrl+S will show a dialog to save the image.
    .
    .   @param winname Name of the window.
    .   @param mat Image to be shown.
    """
    ...

def imwrite(filename, img, params=...) -> retval:
    """
    .   @brief Saves an image to a specified file.
    .
    .   The function imwrite saves the image to the specified file. The image format is chosen based on the
    .   filename extension (see cv::imread for the list of extensions). In general, only 8-bit
    .   single-channel or 3-channel (with 'BGR' channel order) images
    .   can be saved using this function, with these exceptions:
    .
    .   - 16-bit unsigned (CV_16U) images can be saved in the case of PNG, JPEG 2000, and TIFF formats
    .   - 32-bit float (CV_32F) images can be saved in PFM, TIFF, OpenEXR, and Radiance HDR formats;
    .     3-channel (CV_32FC3) TIFF images will be saved using the LogLuv high dynamic range encoding
    .     (4 bytes per pixel)
    .   - PNG images with an alpha channel can be saved using this function. To do this, create
    .   8-bit (or 16-bit) 4-channel image BGRA, where the alpha channel goes last. Fully transparent pixels
    .   should have alpha set to 0, fully opaque pixels should have alpha set to 255/65535 (see the code sample below).
    .   - Multiple images (vector of Mat) can be saved in TIFF format (see the code sample below).
    .
    .   If the format, depth or channel order is different, use
    .   Mat::convertTo and cv::cvtColor to convert it before saving. Or, use the universal FileStorage I/O
    .   functions to save the image to XML or YAML format.
    .
    .   The sample below shows how to create a BGRA image, how to set custom compression parameters and save it to a PNG file.
    .   It also demonstrates how to save multiple images in a TIFF file:
    .   @include snippets/imgcodecs_imwrite.cpp
    .   @param filename Name of the file.
    .   @param img (Mat or vector of Mat) Image or Images to be saved.
    .   @param params Format-specific parameters encoded as pairs (paramId_1, paramValue_1, paramId_2, paramValue_2, ... .) see cv::ImwriteFlags
    """
    ...

def imwritemulti(filename, img, params=...) -> retval:
    """
    .
    """
    ...

def inRange(
    src: ndarray, lowerb: ArrayLike, upperb: ArrayLike, dst: Optional[ndarray] = ...
) -> ndarray:
    """
    .   @brief  Checks if array elements lie between the elements of two other arrays.
    .
    .   The function checks the range as follows:
    .   -   For every element of a single-channel input array:
    .       \f[\texttt{dst} (I)= \texttt{lowerb} (I)_0  \leq \texttt{src} (I)_0 \leq  \texttt{upperb} (I)_0\f]
    .   -   For two-channel arrays:
    .       \f[\texttt{dst} (I)= \texttt{lowerb} (I)_0  \leq \texttt{src} (I)_0 \leq  \texttt{upperb} (I)_0  \land \texttt{lowerb} (I)_1  \leq \texttt{src} (I)_1 \leq  \texttt{upperb} (I)_1\f]
    .   -   and so forth.
    .
    .   That is, dst (I) is set to 255 (all 1 -bits) if src (I) is within the
    .   specified 1D, 2D, 3D, ... box and 0 otherwise.
    .
    .   When the lower and/or upper boundary parameters are scalars, the indexes
    .   (I) at lowerb and upperb in the above formulas should be omitted.
    .   @param src first input array.
    .   @param lowerb inclusive lower boundary array or a scalar.
    .   @param upperb inclusive upper boundary array or a scalar.
    .   @param dst output array of the same size as src and CV_8U type.
    """
    ...

def initCameraMatrix2D(objectPoints, imagePoints, imageSize, aspectRatio=...) -> retval:
    """
    .   @brief Finds an initial camera intrinsic matrix from 3D-2D point correspondences.
    .
    .   @param objectPoints Vector of vectors of the calibration pattern points in the calibration pattern
    .   coordinate space. In the old interface all the per-view vectors are concatenated. See
    .   calibrateCamera for details.
    .   @param imagePoints Vector of vectors of the projections of the calibration pattern points. In the
    .   old interface all the per-view vectors are concatenated.
    .   @param imageSize Image size in pixels used to initialize the principal point.
    .   @param aspectRatio If it is zero or negative, both \f$f_x\f$ and \f$f_y\f$ are estimated independently.
    .   Otherwise, \f$f_x = f_y * \texttt{aspectRatio}\f$ .
    .
    .   The function estimates and returns an initial camera intrinsic matrix for the camera calibration process.
    .   Currently, the function only supports planar calibration patterns, which are patterns where each
    .   object point has z-coordinate =0.
    """
    ...

def initUndistortRectifyMap(
    cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1=..., map2=...
) -> Tuple[map1, map2]:
    """
    .   @brief Computes the undistortion and rectification transformation map.
    .
    .   The function computes the joint undistortion and rectification transformation and represents the
    .   result in the form of maps for remap. The undistorted image looks like original, as if it is
    .   captured with a camera using the camera matrix =newCameraMatrix and zero distortion. In case of a
    .   monocular camera, newCameraMatrix is usually equal to cameraMatrix, or it can be computed by
    .   #getOptimalNewCameraMatrix for a better control over scaling. In case of a stereo camera,
    .   newCameraMatrix is normally set to P1 or P2 computed by #stereoRectify .
    .
    .   Also, this new camera is oriented differently in the coordinate space, according to R. That, for
    .   example, helps to align two heads of a stereo camera so that the epipolar lines on both images
    .   become horizontal and have the same y- coordinate (in case of a horizontally aligned stereo camera).
    .
    .   The function actually builds the maps for the inverse mapping algorithm that is used by remap. That
    .   is, for each pixel \f$(u, v)\f$ in the destination (corrected and rectified) image, the function
    .   computes the corresponding coordinates in the source image (that is, in the original image from
    .   camera). The following process is applied:
    .   \f[
    .   \begin{array}{l}
    .   x  \leftarrow (u - {c'}_x)/{f'}_x  \\
    .   y  \leftarrow (v - {c'}_y)/{f'}_y  \\
    .   {[X\,Y\,W]} ^T  \leftarrow R^{-1}*[x \, y \, 1]^T  \\
    .   x'  \leftarrow X/W  \\
    .   y'  \leftarrow Y/W  \\
    .   r^2  \leftarrow x'^2 + y'^2 \\
    .   x''  \leftarrow x' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6}
    .   + 2p_1 x' y' + p_2(r^2 + 2 x'^2)  + s_1 r^2 + s_2 r^4\\
    .   y''  \leftarrow y' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6}
    .   + p_1 (r^2 + 2 y'^2) + 2 p_2 x' y' + s_3 r^2 + s_4 r^4 \\
    .   s\vecthree{x'''}{y'''}{1} =
    .   \vecthreethree{R_{33}(\tau_x, \tau_y)}{0}{-R_{13}((\tau_x, \tau_y)}
    .   {0}{R_{33}(\tau_x, \tau_y)}{-R_{23}(\tau_x, \tau_y)}
    .   {0}{0}{1} R(\tau_x, \tau_y) \vecthree{x''}{y''}{1}\\
    .   map_x(u,v)  \leftarrow x''' f_x + c_x  \\
    .   map_y(u,v)  \leftarrow y''' f_y + c_y
    .   \end{array}
    .   \f]
    .   where \f$(k_1, k_2, p_1, p_2, k_3=..., k_4=..., k_5, k_6, s_1=..., s_2, s_3, s_4, \tau_x=..., \tau_y)\f$
    .   are the distortion coefficients.
    .
    .   In case of a stereo camera, this function is called twice: once for each camera head, after
    .   stereoRectify, which in its turn is called after #stereoCalibrate. But if the stereo camera
    .   was not calibrated, it is still possible to compute the rectification transformations directly from
    .   the fundamental matrix using #stereoRectifyUncalibrated. For each camera, the function computes
    .   homography H as the rectification transformation in a pixel domain, not a rotation matrix R in 3D
    .   space. R can be computed from H as
    .   \f[\texttt{R} = \texttt{cameraMatrix} ^{-1} \cdot \texttt{H} \cdot \texttt{cameraMatrix}\f]
    .   where cameraMatrix can be chosen arbitrarily.
    .
    .   @param cameraMatrix Input camera matrix \f$A=\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$(k_1, k_2, p_1, p_2, k_3=..., k_4=..., k_5, k_6, s_1=..., s_2, s_3, s_4, \tau_x=..., \tau_y)\f$
    .   of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.
    .   @param R Optional rectification transformation in the object space (3x3 matrix). R1 or R2 ,
    .   computed by #stereoRectify can be passed here. If the matrix is empty, the identity transformation
    .   is assumed. In cvInitUndistortMap R assumed to be an identity matrix.
    .   @param newCameraMatrix New camera matrix \f$A'=\vecthreethree{f_x'}{0}{c_x'}{0}{f_y'}{c_y'}{0}{0}{1}\f$.
    .   @param size Undistorted image size.
    .   @param m1type Type of the first output map that can be CV_32FC1, CV_32FC2 or CV_16SC2, see #convertMaps
    .   @param map1 The first output map.
    .   @param map2 The second output map.
    """
    ...

def inpaint(src, inpaintMask, inpaintRadius, flags, dst=...) -> dst:
    """
    .   @brief Restores the selected region in an image using the region neighborhood.
    .
    .   @param src Input 8-bit, 16-bit unsigned or 32-bit float 1-channel or 8-bit 3-channel image.
    .   @param inpaintMask Inpainting mask, 8-bit 1-channel image. Non-zero pixels indicate the area that
    .   needs to be inpainted.
    .   @param dst Output image with the same size and type as src .
    .   @param inpaintRadius Radius of a circular neighborhood of each point inpainted that is considered
    .   by the algorithm.
    .   @param flags Inpainting method that could be cv::INPAINT_NS or cv::INPAINT_TELEA
    .
    .   The function reconstructs the selected image area from the pixel near the area boundary. The
    .   function may be used to remove dust and scratches from a scanned photo, or to remove undesirable
    .   objects from still images or video. See <http://en.wikipedia.org/wiki/Inpainting> for more details.
    .
    .   @note
    .      -   An example using the inpainting technique can be found at
    .           opencv_source_code/samples/cpp/inpaint.cpp
    .      -   (Python) An example using the inpainting technique can be found at
    .           opencv_source_code/samples/python/inpaint.py
    """
    ...

def insertChannel(src, dst, coi) -> dst:
    """
    .   @brief Inserts a single channel to dst (coi is 0-based index)
    .   @param src input array
    .   @param dst output array
    .   @param coi index of channel for insertion
    .   @sa mixChannels, merge
    """
    ...

def integral(src, sum=..., sdepth=...) -> sum:
    """
    .   @overload
    """
    ...

def integral2(src, sum=..., sqsum=..., sdepth=..., sqdepth=...) -> Tuple[sum, sqsum]:
    """
    .   @overload
    """
    ...

def integral3(
    src, sum=..., sqsum=..., tilted=..., sdepth=..., sqdepth=...
) -> Tuple[m, tilted]:
    """
    .   @brief Calculates the integral of an image.
    .
    .   The function calculates one or more integral images for the source image as follows:
    .
    .   \f[\texttt{sum} (X,Y) =  \sum _{x<X,y<Y}  \texttt{image} (x,y)\f]
    .
    .   \f[\texttt{sqsum} (X,Y) =  \sum _{x<X,y<Y}  \texttt{image} (x,y)^2\f]
    .
    .   \f[\texttt{tilted} (X,Y) =  \sum _{y<Y,abs(x-X+1) \leq Y-y-1}  \texttt{image} (x,y)\f]
    .
    .   Using these integral images, you can calculate sum, mean, and standard deviation over a specific
    .   up-right or rotated rectangular region of the image in a constant time, for example:
    .
    .   \f[\sum _{x_1 \leq x < x_2,  \, y_1  \leq y < y_2}  \texttt{image} (x,y) =  \texttt{sum} (x_2,y_2)- \texttt{sum} (x_1,y_2)- \texttt{sum} (x_2,y_1)+ \texttt{sum} (x_1,y_1)\f]
    .
    .   It makes possible to do a fast blurring or fast block correlation with a variable window size, for
    .   example. In case of multi-channel images, sums for each channel are accumulated independently.
    .
    .   As a practical example, the next figure shows the calculation of the integral of a straight
    .   rectangle Rect(3,3,3,2) and of a tilted rectangle Rect(5,1,2,3) . The selected pixels in the
    .   original image are shown, as well as the relative pixels in the integral images sum and tilted .
    .
    .   ![integral calculation example](pics/integral.png)
    .
    .   @param src input image as \f$W \times H\f$, 8-bit or floating-point (32f or 64f).
    .   @param sum integral image as \f$(W+1)\times (H+1)\f$ , 32-bit integer or floating-point (32f or 64f).
    .   @param sqsum integral image for squared pixel values; it is \f$(W+1)\times (H+1)\f$, double-precision
    .   floating-point (64f) array.
    .   @param tilted integral for the image rotated by 45 degrees; it is \f$(W+1)\times (H+1)\f$ array with
    .   the same data type as sum.
    .   @param sdepth desired depth of the integral and the tilted integral images, CV_32S, CV_32F, or
    .   CV_64F.
    .   @param sqdepth desired depth of the integral image of squared pixel values, CV_32F or CV_64F.
    """
    ...

def intersectConvexConvex(_p1, _p2, _p12=..., handleNested=...) -> Tuple[retval, _p12]:
    """
    .   @brief Finds intersection of two convex polygons
    .
    .   @param _p1 First polygon
    .   @param _p2 Second polygon
    .   @param _p12 Output polygon describing the intersecting area
    .   @param handleNested When true, an intersection is found if one of the polygons is fully enclosed in the other.
    .   When false, no intersection is found. If the polygons share a side or the vertex of one polygon lies on an edge
    .   of the other, they are not considered nested and an intersection will be found regardless of the value of handleNested.
    .
    .   @returns Absolute value of area of intersecting polygon
    .
    .   @note intersectConvexConvex doesn't confirm that both polygons are convex and will return invalid results if they aren't.
    """
    ...

def invert(src, dst=..., flags=...) -> Tuple[retval, dst]:
    """
    .   @brief Finds the inverse or pseudo-inverse of a matrix.
    .
    .   The function cv::invert inverts the matrix src and stores the result in dst
    .   . When the matrix src is singular or non-square, the function calculates
    .   the pseudo-inverse matrix (the dst matrix) so that norm(src\*dst - I) is
    .   minimal, where I is an identity matrix.
    .
    .   In case of the #DECOMP_LU method, the function returns non-zero value if
    .   the inverse has been successfully calculated and 0 if src is singular.
    .
    .   In case of the #DECOMP_SVD method, the function returns the inverse
    .   condition number of src (the ratio of the smallest singular value to the
    .   largest singular value) and 0 if src is singular. The SVD method
    .   calculates a pseudo-inverse matrix if src is singular.
    .
    .   Similarly to #DECOMP_LU, the method #DECOMP_CHOLESKY works only with
    .   non-singular square matrices that should also be symmetrical and
    .   positively defined. In this case, the function stores the inverted
    .   matrix in dst and returns non-zero. Otherwise, it returns 0.
    .
    .   @param src input floating-point M x N matrix.
    .   @param dst output matrix of N x M size and the same type as src.
    .   @param flags inversion method (cv::DecompTypes)
    .   @sa solve, SVD
    """
    ...

def invertAffineTransform(M, iM=...) -> iM:
    """
    .   @brief Inverts an affine transformation.
    .
    .   The function computes an inverse affine transformation represented by \f$2 \times 3\f$ matrix M:
    .
    .   \f[\begin{bmatrix} a_{11} & a_{12} & b_1  \\ a_{21} & a_{22} & b_2 \end{bmatrix}\f]
    .
    .   The result is also a \f$2 \times 3\f$ matrix of the same type as M.
    .
    .   @param M Original affine transformation.
    .   @param iM Output reverse affine transformation.
    """
    ...

def isContourConvex(contour) -> retval:
    """
    .   @brief Tests a contour convexity.
    .
    .   The function tests whether the input contour is convex or not. The contour must be simple, that is,
    .   without self-intersections. Otherwise, the function output is undefined.
    .
    .   @param contour Input vector of 2D points, stored in std::vector\<\> or Mat
    """
    ...

def kmeans(
    data, K, bestLabels, criteria, attempts, flags, centers=...
) -> Tuple[s, centers]:
    """
    .   @brief Finds centers of clusters and groups input samples around the clusters.
    .
    .   The function kmeans implements a k-means algorithm that finds the centers of cluster_count clusters
    .   and groups the input samples around the clusters. As an output, \f$\texttt{bestLabels}_i\f$ contains a
    .   0-based cluster index for the sample stored in the \f$i^{th}\f$ row of the samples matrix.
    .
    .   @note
    .   -   (Python) An example on K-means clustering can be found at
    .       opencv_source_code/samples/python/kmeans.py
    .   @param data Data for clustering. An array of N-Dimensional points with float coordinates is needed.
    .   Examples of this array can be:
    .   -   Mat points(count, 2, CV_32F);
    .   -   Mat points(count, 1, CV_32FC2);
    .   -   Mat points(1, count, CV_32FC2);
    .   -   std::vector\<cv::Point2f\> points(sampleCount);
    .   @param K Number of clusters to split the set by.
    .   @param bestLabels Input/output integer array that stores the cluster indices for every sample.
    .   @param criteria The algorithm termination criteria, that is, the maximum number of iterations and/or
    .   the desired accuracy. The accuracy is specified as criteria.epsilon. As soon as each of the cluster
    .   centers moves by less than criteria.epsilon on some iteration, the algorithm stops.
    .   @param attempts Flag to specify the number of times the algorithm is executed using different
    .   initial labellings. The algorithm returns the labels that yield the best compactness (see the last
    .   function parameter).
    .   @param flags Flag that can take values of cv::KmeansFlags
    .   @param centers Output matrix of the cluster centers, one row per each cluster center.
    .   @return The function returns the compactness measure that is computed as
    .   \f[\sum _i  \| \texttt{samples} _i -  \texttt{centers} _{ \texttt{labels} _i} \| ^2\f]
    .   after every attempt. The best (minimum) value is chosen and the corresponding labels and the
    .   compactness value are returned by the function. Basically, you can use only the core of the
    .   function, set the number of attempts to 1, initialize labels each time using a custom algorithm,
    .   pass them with the ( flags = #KMEANS_USE_INITIAL_LABELS ) flag, and then choose the best
    .   (most-compact) clustering.
    """
    ...

def line(
    img: ndarray,
    pt1: Tuple[int, int],
    pt2: Tuple[int, int],
    color: Any,
    thickness: int = ...,
    lineType: int = ...,
    shift: int = ...,
) -> ndarray:
    """
    .   @brief Draws a line segment connecting two points.
    .
    .   The function line draws the line segment between pt1 and pt2 points in the image. The line is
    .   clipped by the image boundaries. For non-antialiased lines with integer coordinates, the 8-connected
    .   or 4-connected Bresenham algorithm is used. Thick lines are drawn with rounding endings. Antialiased
    .   lines are drawn using Gaussian filtering.
    .
    .   @param img Image.
    .   @param pt1 First point of the line segment.
    .   @param pt2 Second point of the line segment.
    .   @param color Line color.
    .   @param thickness Line thickness.
    .   @param lineType Type of the line. See #LineTypes.
    .   @param shift Number of fractional bits in the point coordinates.
    """
    ...

def linearPolar(src, center, maxRadius, flags, dst=...) -> dst:
    """
    .   @brief Remaps an image to polar coordinates space.
    .
    .   @deprecated This function produces same result as cv::warpPolar(src, dst, src.size(), center, maxRadius, flags)
    .
    .   @internal
    .   Transform the source image using the following transformation (See @ref polar_remaps_reference_image "Polar remaps reference image c)"):
    .   \f[\begin{array}{l}
    .     dst( \rho , \phi ) = src(x,y) \\
    .     dst.size() \leftarrow src.size()
    .   \end{array}\f]
    .
    .   where
    .   \f[\begin{array}{l}
    .     I = (dx,dy) = (x - center.x,y - center.y) \\
    .     \rho = Kmag \cdot \texttt{magnitude} (I) ,\\
    .     \phi = angle \cdot \texttt{angle} (I)
    .   \end{array}\f]
    .
    .   and
    .   \f[\begin{array}{l}
    .     Kx = src.cols / maxRadius \\
    .     Ky = src.rows / 2\Pi
    .   \end{array}\f]
    .
    .
    .   @param src Source image
    .   @param dst Destination image. It will have same size and type as src.
    .   @param center The transformation center;
    .   @param maxRadius The radius of the bounding circle to transform. It determines the inverse magnitude scale parameter too.
    .   @param flags A combination of interpolation methods, see #InterpolationFlags
    .
    .   @note
    .   -   The function can not operate in-place.
    .   -   To calculate magnitude and angle in degrees #cartToPolar is used internally thus angles are measured from 0 to 360 with accuracy about 0.3 degrees.
    .
    .   @sa cv::logPolar
    .   @endinternal
    """
    ...

def log(src, dst=...) -> dst:
    """
    .   @brief Calculates the natural logarithm of every array element.
    .
    .   The function cv::log calculates the natural logarithm of every element of the input array:
    .   \f[\texttt{dst} (I) =  \log (\texttt{src}(I)) \f]
    .
    .   Output on zero, negative and special (NaN, Inf) values is undefined.
    .
    .   @param src input array.
    .   @param dst output array of the same size and type as src .
    .   @sa exp, cartToPolar, polarToCart, phase, pow, sqrt, magnitude
    """
    ...

def logPolar(src, center, M, flags, dst=...) -> dst:
    """
    .   @brief Remaps an image to semilog-polar coordinates space.
    .
    .   @deprecated This function produces same result as cv::warpPolar(src, dst, src.size(), center, maxRadius, flags+WARP_POLAR_LOG);
    .
    .   @internal
    .   Transform the source image using the following transformation (See @ref polar_remaps_reference_image "Polar remaps reference image d)"):
    .   \f[\begin{array}{l}
    .     dst( \rho , \phi ) = src(x,y) \\
    .     dst.size() \leftarrow src.size()
    .   \end{array}\f]
    .
    .   where
    .   \f[\begin{array}{l}
    .     I = (dx,dy) = (x - center.x,y - center.y) \\
    .     \rho = M \cdot log_e(\texttt{magnitude} (I)) ,\\
    .     \phi = Kangle \cdot \texttt{angle} (I) \\
    .   \end{array}\f]
    .
    .   and
    .   \f[\begin{array}{l}
    .     M = src.cols / log_e(maxRadius) \\
    .     Kangle = src.rows / 2\Pi \\
    .   \end{array}\f]
    .
    .   The function emulates the human "foveal" vision and can be used for fast scale and
    .   rotation-invariant template matching, for object tracking and so forth.
    .   @param src Source image
    .   @param dst Destination image. It will have same size and type as src.
    .   @param center The transformation center; where the output precision is maximal
    .   @param M Magnitude scale parameter. It determines the radius of the bounding circle to transform too.
    .   @param flags A combination of interpolation methods, see #InterpolationFlags
    .
    .   @note
    .   -   The function can not operate in-place.
    .   -   To calculate magnitude and angle in degrees #cartToPolar is used internally thus angles are measured from 0 to 360 with accuracy about 0.3 degrees.
    .
    .   @sa cv::linearPolar
    .   @endinternal
    """
    ...

def magnitude(x, y, magnitude=...) -> magnitude:
    """
    .   @brief Calculates the magnitude of 2D vectors.
    .
    .   The function cv::magnitude calculates the magnitude of 2D vectors formed
    .   from the corresponding elements of x and y arrays:
    .   \f[\texttt{dst} (I) =  \sqrt{\texttt{x}(I)^2 + \texttt{y}(I)^2}\f]
    .   @param x floating-point array of x-coordinates of the vectors.
    .   @param y floating-point array of y-coordinates of the vectors; it must
    .   have the same size as x.
    .   @param magnitude output array of the same size and type as x.
    .   @sa cartToPolar, polarToCart, phase, sqrt
    """
    ...

def matMulDeriv(A, B, dABdA=..., dABdB=...) -> Tuple[dABdA, dABdB]:
    """
    .   @brief Computes partial derivatives of the matrix product for each multiplied matrix.
    .
    .   @param A First multiplied matrix.
    .   @param B Second multiplied matrix.
    .   @param dABdA First output derivative matrix d(A\*B)/dA of size
    .   \f$\texttt{A.rows*B.cols} \times {A.rows*A.cols}\f$ .
    .   @param dABdB Second output derivative matrix d(A\*B)/dB of size
    .   \f$\texttt{A.rows*B.cols} \times {B.rows*B.cols}\f$ .
    .
    .   The function computes partial derivatives of the elements of the matrix product \f$A*B\f$ with regard to
    .   the elements of each of the two input matrices. The function is used to compute the Jacobian
    .   matrices in stereoCalibrate but can also be used in any other similar optimization function.
    """
    ...

def matchShapes(contour1, contour2, method, parameter) -> retval:
    """
    .   @brief Compares two shapes.
    .
    .   The function compares two shapes. All three implemented methods use the Hu invariants (see #HuMoments)
    .
    .   @param contour1 First contour or grayscale image.
    .   @param contour2 Second contour or grayscale image.
    .   @param method Comparison method, see #ShapeMatchModes
    .   @param parameter Method-specific parameter (not supported now).
    """
    ...

def matchTemplate(
    image: ndarray,
    templ: ndarray,
    method: int,
    result: ndarray = ...,
    mask: ndarray = ...,
) -> ndarray:
    """
    .   @brief Compares a template against overlapped image regions.
    .
    .   The function slides through image , compares the overlapped patches of size \f$w \times h\f$ against
    .   templ using the specified method and stores the comparison results in result . #TemplateMatchModes
    .   describes the formulae for the available comparison methods ( \f$I\f$ denotes image, \f$T\f$
    .   template, \f$R\f$ result, \f$M\f$ the optional mask ). The summation is done over template and/or
    .   the image patch: \f$x' = 0...w-1, y' = 0...h-1\f$
    .
    .   After the function finishes the comparison, the best matches can be found as global minimums (when
    .   #TM_SQDIFF was used) or maximums (when #TM_CCORR or #TM_CCOEFF was used) using the
    .   #minMaxLoc function. In case of a color image, template summation in the numerator and each sum in
    .   the denominator is done over all of the channels and separate mean values are used for each channel.
    .   That is, the function can take a color template and a color image. The result will still be a
    .   single-channel image, which is easier to analyze.
    .
    .   @param image Image where the search is running. It must be 8-bit or 32-bit floating-point.
    .   @param templ Searched template. It must be not greater than the source image and have the same
    .   data type.
    .   @param result Map of comparison results. It must be single-channel 32-bit floating-point. If image
    .   is \f$W \times H\f$ and templ is \f$w \times h\f$ , then result is \f$(W-w+1) \times (H-h+1)\f$ .
    .   @param method Parameter specifying the comparison method, see #TemplateMatchModes
    .   @param mask Optional mask. It must have the same size as templ. It must either have the same number
    .               of channels as template or only one channel, which is then used for all template and
    .               image channels. If the data type is #CV_8U, the mask is interpreted as a binary mask,
    .               meaning only elements where mask is nonzero are used and are kept unchanged independent
    .               of the actual mask value (weight equals 1). For data tpye #CV_32F, the mask values are
    .               used as weights. The exact formulas are documented in #TemplateMatchModes.
    """
    ...

def max(src1, src2, dst=...) -> dst:
    """
    .   @brief Calculates per-element maximum of two arrays or an array and a scalar.
    .
    .   The function cv::max calculates the per-element maximum of two arrays:
    .   \f[\texttt{dst} (I)= \max ( \texttt{src1} (I), \texttt{src2} (I))\f]
    .   or array and a scalar:
    .   \f[\texttt{dst} (I)= \max ( \texttt{src1} (I), \texttt{value} )\f]
    .   @param src1 first input array.
    .   @param src2 second input array of the same size and type as src1 .
    .   @param dst output array of the same size and type as src1.
    .   @sa  min, compare, inRange, minMaxLoc, @ref MatrixExpressions
    """
    ...

def mean(src, mask=...) -> retval:
    """
    .   @brief Calculates an average (mean) of array elements.
    .
    .   The function cv::mean calculates the mean value M of array elements,
    .   independently for each channel, and return it:
    .   \f[\begin{array}{l} N =  \sum _{I: \; \texttt{mask} (I) \ne 0} 1 \\ M_c =  \left ( \sum _{I: \; \texttt{mask} (I) \ne 0}{ \texttt{mtx} (I)_c} \right )/N \end{array}\f]
    .   When all the mask elements are 0's, the function returns Scalar::all(0)
    .   @param src input array that should have from 1 to 4 channels so that the result can be stored in
    .   Scalar_ .
    .   @param mask optional operation mask.
    .   @sa  countNonZero, meanStdDev, norm, minMaxLoc
    """
    ...

def meanShift(probImage, window, criteria) -> Tuple[retval, window]:
    """
    .   @brief Finds an object on a back projection image.
    .
    .   @param probImage Back projection of the object histogram. See calcBackProject for details.
    .   @param window Initial search window.
    .   @param criteria Stop criteria for the iterative search algorithm.
    .   returns
    .   :   Number of iterations CAMSHIFT took to converge.
    .   The function implements the iterative object search algorithm. It takes the input back projection of
    .   an object and the initial position. The mass center in window of the back projection image is
    .   computed and the search window center shifts to the mass center. The procedure is repeated until the
    .   specified number of iterations criteria.maxCount is done or until the window center shifts by less
    .   than criteria.epsilon. The algorithm is used inside CamShift and, unlike CamShift , the search
    .   window size or orientation do not change during the search. You can simply pass the output of
    .   calcBackProject to this function. But better results can be obtained if you pre-filter the back
    .   projection and remove the noise. For example, you can do this by retrieving connected components
    .   with findContours , throwing away contours with small area ( contourArea ), and rendering the
    .   remaining contours with drawContours.
    """
    ...

def meanStdDev(src, mean=..., stddev=..., mask=...) -> Tuple[mean, stddev]:
    """
    .   Calculates a mean and standard deviation of array elements.
    .
    .   The function cv::meanStdDev calculates the mean and the standard deviation M
    .   of array elements independently for each channel and returns it via the
    .   output parameters:
    .   \f[\begin{array}{l} N =  \sum _{I, \texttt{mask} (I)  \ne 0} 1 \\ \texttt{mean} _c =  \frac{\sum_{ I: \; \texttt{mask}(I) \ne 0} \texttt{src} (I)_c}{N} \\ \texttt{stddev} _c =  \sqrt{\frac{\sum_{ I: \; \texttt{mask}(I) \ne 0} \left ( \texttt{src} (I)_c -  \texttt{mean} _c \right )^2}{N}} \end{array}\f]
    .   When all the mask elements are 0's, the function returns
    .   mean=stddev=Scalar::all(0).
    .   @note The calculated standard deviation is only the diagonal of the
    .   complete normalized covariance matrix. If the full matrix is needed, you
    .   can reshape the multi-channel array M x N to the single-channel array
    .   M\*N x mtx.channels() (only possible when the matrix is continuous) and
    .   then pass the matrix to calcCovarMatrix .
    .   @param src input array that should have from 1 to 4 channels so that the results can be stored in
    .   Scalar_ 's.
    .   @param mean output parameter: calculated mean value.
    .   @param stddev output parameter: calculated standard deviation.
    .   @param mask optional operation mask.
    .   @sa  countNonZero, mean, norm, minMaxLoc, calcCovarMatrix
    """
    ...

def medianBlur(src: ndarray, ksize: int, dst: Optional[ndarray] = ...) -> ndarray:
    """
    .   @brief Blurs an image using the median filter.
    .
    .   The function smoothes an image using the median filter with the \f$\texttt{ksize} \times
    .   \texttt{ksize}\f$ aperture. Each channel of a multi-channel image is processed independently.
    .   In-place operation is supported.
    .
    .   @note The median filter uses #BORDER_REPLICATE internally to cope with border pixels, see #BorderTypes
    .
    .   @param src input 1-, 3-, or 4-channel image; when ksize is 3 or 5, the image depth should be
    .   CV_8U, CV_16U, or CV_32F, for larger aperture sizes, it can only be CV_8U.
    .   @param dst destination array of the same size and type as src.
    .   @param ksize aperture linear size; it must be odd and greater than 1, for example: 3, 5, 7 ...
    .   @sa  bilateralFilter, blur, boxFilter, GaussianBlur
    """
    ...

def merge(mv, dst=...) -> dst:
    """
    .   @overload
    .   @param mv input vector of matrices to be merged; all the matrices in mv must have the same
    .   size and the same depth.
    .   @param dst output array of the same size and the same depth as mv[0]; The number of channels will
    .   be the total number of channels in the matrix array.
    """
    ...

def min(src1, src2, dst=...) -> dst:
    """
    .   @brief Calculates per-element minimum of two arrays or an array and a scalar.
    .
    .   The function cv::min calculates the per-element minimum of two arrays:
    .   \f[\texttt{dst} (I)= \min ( \texttt{src1} (I), \texttt{src2} (I))\f]
    .   or array and a scalar:
    .   \f[\texttt{dst} (I)= \min ( \texttt{src1} (I), \texttt{value} )\f]
    .   @param src1 first input array.
    .   @param src2 second input array of the same size and type as src1.
    .   @param dst output array of the same size and type as src1.
    .   @sa max, compare, inRange, minMaxLoc
    """
    ...

def minAreaRect(points) -> retval:
    """
    .   @brief Finds a rotated rectangle of the minimum area enclosing the input 2D point set.
    .
    .   The function calculates and returns the minimum-area bounding rectangle (possibly rotated) for a
    .   specified point set. Developer should keep in mind that the returned RotatedRect can contain negative
    .   indices when data is close to the containing Mat element boundary.
    .
    .   @param points Input vector of 2D points, stored in std::vector\<\> or Mat
    """
    ...

def minEnclosingCircle(points) -> Tuple[center, radius]:
    """
    .   @brief Finds a circle of the minimum area enclosing a 2D point set.
    .
    .   The function finds the minimal enclosing circle of a 2D point set using an iterative algorithm.
    .
    .   @param points Input vector of 2D points, stored in std::vector\<\> or Mat
    .   @param center Output center of the circle.
    .   @param radius Output radius of the circle.
    """
    ...

def minEnclosingTriangle(points, triangle=...) -> Tuple[retval, triangle]:
    """
    .   @brief Finds a triangle of minimum area enclosing a 2D point set and returns its area.
    .
    .   The function finds a triangle of minimum area enclosing the given set of 2D points and returns its
    .   area. The output for a given 2D point set is shown in the image below. 2D points are depicted in
    .   *red* and the enclosing triangle in *yellow*.
    .
    .   ![Sample output of the minimum enclosing triangle function](pics/minenclosingtriangle.png)
    .
    .   The implementation of the algorithm is based on O'Rourke's @cite ORourke86 and Klee and Laskowski's
    .   @cite KleeLaskowski85 papers. O'Rourke provides a \f$\theta(n)\f$ algorithm for finding the minimal
    .   enclosing triangle of a 2D convex polygon with n vertices. Since the #minEnclosingTriangle function
    .   takes a 2D point set as input an additional preprocessing step of computing the convex hull of the
    .   2D point set is required. The complexity of the #convexHull function is \f$O(n log(n))\f$ which is higher
    .   than \f$\theta(n)\f$. Thus the overall complexity of the function is \f$O(n log(n))\f$.
    .
    .   @param points Input vector of 2D points with depth CV_32S or CV_32F, stored in std::vector\<\> or Mat
    .   @param triangle Output vector of three 2D points defining the vertices of the triangle. The depth
    .   of the OutputArray must be CV_32F.
    """
    ...

def minMaxLoc(
    src: ndarray, mask: Optional[ndarray] = ...
) -> Tuple[float, float, Tuple[int, ...], Tuple[int, ...]]:
    """
    .   @brief Finds the global minimum and maximum in an array.
    .
    .   The function cv::minMaxLoc finds the minimum and maximum element values and their positions. The
    .   extremums are searched across the whole array or, if mask is not an empty array, in the specified
    .   array region.
    .
    .   The function do not work with multi-channel arrays. If you need to find minimum or maximum
    .   elements across all the channels, use Mat::reshape first to reinterpret the array as
    .   single-channel. Or you may extract the particular channel using either extractImageCOI , or
    .   mixChannels , or split .
    .   @param src input single-channel array.
    .   @param minVal pointer to the returned minimum value; NULL is used if not required.
    .   @param maxVal pointer to the returned maximum value; NULL is used if not required.
    .   @param minLoc pointer to the returned minimum location (in 2D case); NULL is used if not required.
    .   @param maxLoc pointer to the returned maximum location (in 2D case); NULL is used if not required.
    .   @param mask optional mask used to select a sub-array.
    .   @sa max, min, compare, inRange, extractImageCOI, mixChannels, split, Mat::reshape
    """
    ...

def mixChannels(src, dst, fromTo) -> dst:
    """
    .   @overload
    .   @param src input array or vector of matrices; all of the matrices must have the same size and the
    .   same depth.
    .   @param dst output array or vector of matrices; all the matrices **must be allocated**; their size and
    .   depth must be the same as in src[0].
    .   @param fromTo array of index pairs specifying which channels are copied and where; fromTo[k\*2] is
    .   a 0-based index of the input channel in src, fromTo[k\*2+1] is an index of the output channel in
    .   dst; the continuous channel numbering is used: the first input image channels are indexed from 0 to
    .   src[0].channels()-1, the second input image channels are indexed from src[0].channels() to
    .   src[0].channels() + src[1].channels()-1, and so on, the same scheme is used for the output image
    .   channels; as a special case, when fromTo[k\*2] is negative, the corresponding output channel is
    .   filled with zero .
    """
    ...

def moments(array, binaryImage=...) -> retval:
    """
    .   @brief Calculates all of the moments up to the third order of a polygon or rasterized shape.
    .
    .   The function computes moments, up to the 3rd order, of a vector shape or a rasterized shape. The
    .   results are returned in the structure cv::Moments.
    .
    .   @param array Raster image (single-channel, 8-bit or floating-point 2D array) or an array (
    .   \f$1 \times N\f$ or \f$N \times 1\f$ ) of 2D points (Point or Point2f ).
    .   @param binaryImage If it is true, all non-zero image pixels are treated as 1's. The parameter is
    .   used for images only.
    .   @returns moments.
    .
    .   @note Only applicable to contour moments calculations from Python bindings: Note that the numpy
    .   type for the input array should be either np.int32 or np.float32.
    .
    .   @sa  contourArea, arcLength
    """
    ...

def moveWindow(winname, x, y) -> None:
    """
    .   @brief Moves the window to the specified position
    .
    .   @param winname Name of the window.
    .   @param x The new x-coordinate of the window.
    .   @param y The new y-coordinate of the window.
    """
    ...

def mulSpectrums(a, b, flags, c=..., conjB=...) -> c:
    """
    .   @brief Performs the per-element multiplication of two Fourier spectrums.
    .
    .   The function cv::mulSpectrums performs the per-element multiplication of the two CCS-packed or complex
    .   matrices that are results of a real or complex Fourier transform.
    .
    .   The function, together with dft and idft , may be used to calculate convolution (pass conjB=false )
    .   or correlation (pass conjB=true ) of two arrays rapidly. When the arrays are complex, they are
    .   simply multiplied (per element) with an optional conjugation of the second-array elements. When the
    .   arrays are real, they are assumed to be CCS-packed (see dft for details).
    .   @param a first input array.
    .   @param b second input array of the same size and type as src1 .
    .   @param c output array of the same size and type as src1 .
    .   @param flags operation flags; currently, the only supported flag is cv::DFT_ROWS, which indicates that
    .   each row of src1 and src2 is an independent 1D Fourier spectrum. If you do not want to use this flag, then simply add a `0` as value.
    .   @param conjB optional flag that conjugates the second input array before the multiplication (true)
    .   or not (false).
    """
    ...

def mulTransposed(src, aTa, dst=..., delta=..., scale=..., dtype=...) -> dst:
    """
    .   @brief Calculates the product of a matrix and its transposition.
    .
    .   The function cv::mulTransposed calculates the product of src and its
    .   transposition:
    .   \f[\texttt{dst} = \texttt{scale} ( \texttt{src} - \texttt{delta} )^T ( \texttt{src} - \texttt{delta} )\f]
    .   if aTa=true , and
    .   \f[\texttt{dst} = \texttt{scale} ( \texttt{src} - \texttt{delta} ) ( \texttt{src} - \texttt{delta} )^T\f]
    .   otherwise. The function is used to calculate the covariance matrix. With
    .   zero delta, it can be used as a faster substitute for general matrix
    .   product A\*B when B=A'
    .   @param src input single-channel matrix. Note that unlike gemm, the
    .   function can multiply not only floating-point matrices.
    .   @param dst output square matrix.
    .   @param aTa Flag specifying the multiplication ordering. See the
    .   description below.
    .   @param delta Optional delta matrix subtracted from src before the
    .   multiplication. When the matrix is empty ( delta=noArray() ), it is
    .   assumed to be zero, that is, nothing is subtracted. If it has the same
    .   size as src , it is simply subtracted. Otherwise, it is "repeated" (see
    .   repeat ) to cover the full src and then subtracted. Type of the delta
    .   matrix, when it is not empty, must be the same as the type of created
    .   output matrix. See the dtype parameter description below.
    .   @param scale Optional scale factor for the matrix product.
    .   @param dtype Optional type of the output matrix. When it is negative,
    .   the output matrix will have the same type as src . Otherwise, it will be
    .   type=CV_MAT_DEPTH(dtype) that should be either CV_32F or CV_64F .
    .   @sa calcCovarMatrix, gemm, repeat, reduce
    """
    ...

def multiply(src1, src2, dst=..., scale=..., dtype=...) -> dst:
    """
    .   @brief Calculates the per-element scaled product of two arrays.
    .
    .   The function multiply calculates the per-element product of two arrays:
    .
    .   \f[\texttt{dst} (I)= \texttt{saturate} ( \texttt{scale} \cdot \texttt{src1} (I)  \cdot \texttt{src2} (I))\f]
    .
    .   There is also a @ref MatrixExpressions -friendly variant of the first function. See Mat::mul .
    .
    .   For a not-per-element matrix product, see gemm .
    .
    .   @note Saturation is not applied when the output array has the depth
    .   CV_32S. You may even get result of an incorrect sign in the case of
    .   overflow.
    .   @param src1 first input array.
    .   @param src2 second input array of the same size and the same type as src1.
    .   @param dst output array of the same size and type as src1.
    .   @param scale optional scale factor.
    .   @param dtype optional depth of the output array
    .   @sa add, subtract, divide, scaleAdd, addWeighted, accumulate, accumulateProduct, accumulateSquare,
    .   Mat::convertTo
    """
    ...

def namedWindow(winname: Text, flags: int = ...) -> None:
    """
    .   @brief Creates a window.
    .
    .   The function namedWindow creates a window that can be used as a placeholder for images and
    .   trackbars. Created windows are referred to by their names.
    .
    .   If a window with the same name already exists, the function does nothing.
    .
    .   You can call cv::destroyWindow or cv::destroyAllWindows to close the window and de-allocate any associated
    .   memory usage. For a simple program, you do not really have to call these functions because all the
    .   resources and windows of the application are closed automatically by the operating system upon exit.
    .
    .   @note
    .
    .   Qt backend supports additional flags:
    .    -   **WINDOW_NORMAL or WINDOW_AUTOSIZE:** WINDOW_NORMAL enables you to resize the
    .        window, whereas WINDOW_AUTOSIZE adjusts automatically the window size to fit the
    .        displayed image (see imshow ), and you cannot change the window size manually.
    .    -   **WINDOW_FREERATIO or WINDOW_KEEPRATIO:** WINDOW_FREERATIO adjusts the image
    .        with no respect to its ratio, whereas WINDOW_KEEPRATIO keeps the image ratio.
    .    -   **WINDOW_GUI_NORMAL or WINDOW_GUI_EXPANDED:** WINDOW_GUI_NORMAL is the old way to draw the window
    .        without statusbar and toolbar, whereas WINDOW_GUI_EXPANDED is a new enhanced GUI.
    .   By default, flags == WINDOW_AUTOSIZE | WINDOW_KEEPRATIO | WINDOW_GUI_EXPANDED
    .
    .   @param winname Name of the window in the window caption that may be used as a window identifier.
    .   @param flags Flags of the window. The supported flags are: (cv::WindowFlags)
    """
    ...

def norm(src1, normType=..., mask=...) -> retval:
    """
    .   @brief Calculates the  absolute norm of an array.
    .
    .   This version of #norm calculates the absolute norm of src1. The type of norm to calculate is specified using #NormTypes.
    .
    .   As example for one array consider the function \f$r(x)= \begin{pmatrix} x \\ 1-x \end{pmatrix}, x \in [-1;1]\f$.
    .   The \f$ L_{1}, L_{2} \f$ and \f$ L_{\infty} \f$ norm for the sample value \f$r(-1) = \begin{pmatrix} -1 \\ 2 \end{pmatrix}\f$
    .   is calculated as follows
    .   \f{align*}
    .       \| r(-1) \|_{L_1} &= |-1| + |2| = 3 \\
    .       \| r(-1) \|_{L_2} &= \sqrt{(-1)^{2} + (2)^{2}} = \sqrt{5} \\
    .       \| r(-1) \|_{L_\infty} &= \max(|-1|,|2|) = 2
    .   \f}
    .   and for \f$r(0.5) = \begin{pmatrix} 0.5 \\ 0.5 \end{pmatrix}\f$ the calculation is
    .   \f{align*}
    .       \| r(0.5) \|_{L_1} &= |0.5| + |0.5| = 1 \\
    .       \| r(0.5) \|_{L_2} &= \sqrt{(0.5)^{2} + (0.5)^{2}} = \sqrt{0.5} \\
    .       \| r(0.5) \|_{L_\infty} &= \max(|0.5|,|0.5|) = 0.5.
    .   \f}
    .   The following graphic shows all values for the three norm functions \f$\| r(x) \|_{L_1}, \| r(x) \|_{L_2}\f$ and \f$\| r(x) \|_{L_\infty}\f$.
    .   It is notable that the \f$ L_{1} \f$ norm forms the upper and the \f$ L_{\infty} \f$ norm forms the lower border for the example function \f$ r(x) \f$.
    .   ![Graphs for the different norm functions from the above example](pics/NormTypes_OneArray_1-2-INF.png)
    .
    .   When the mask parameter is specified and it is not empty, the norm is
    .
    .   If normType is not specified, #NORM_L2 is used.
    .   calculated only over the region specified by the mask.
    .
    .   Multi-channel input arrays are treated as single-channel arrays, that is,
    .   the results for all channels are combined.
    .
    .   Hamming norms can only be calculated with CV_8U depth arrays.
    .
    .   @param src1 first input array.
    .   @param normType type of the norm (see #NormTypes).
    .   @param mask optional operation mask; it must have the same size as src1 and CV_8UC1 type.



    norm(src1, src2, normType=..., mask=...) -> retval
    .   @brief Calculates an absolute difference norm or a relative difference norm.
    .
    .   This version of cv::norm calculates the absolute difference norm
    .   or the relative difference norm of arrays src1 and src2.
    .   The type of norm to calculate is specified using #NormTypes.
    .
    .   @param src1 first input array.
    .   @param src2 second input array of the same size and the same type as src1.
    .   @param normType type of the norm (see #NormTypes).
    .   @param mask optional operation mask; it must have the same size as src1 and CV_8UC1 type.
    """
    ...

def normalize(
    src: ndarray,
    dst: Optional[ndarray],
    alpha: float = ...,
    beta: float = ...,
    norm_type: int = ...,
    dtype: bool = ...,
    mask: ndarray = ...,
) -> ndarray:
    """
    .   @brief Normalizes the norm or value range of an array.
    .
    .   The function cv::normalize normalizes scale and shift the input array elements so that
    .   \f[\| \texttt{dst} \| _{L_p}= \texttt{alpha}\f]
    .   (where p=Inf, 1 or 2) when normType=NORM_INF, NORM_L1, or NORM_L2, respectively; or so that
    .   \f[\min _I  \texttt{dst} (I)= \texttt{alpha} , \, \, \max _I  \texttt{dst} (I)= \texttt{beta}\f]
    .
    .   when normType=NORM_MINMAX (for dense arrays only). The optional mask specifies a sub-array to be
    .   normalized. This means that the norm or min-n-max are calculated over the sub-array, and then this
    .   sub-array is modified to be normalized. If you want to only use the mask to calculate the norm or
    .   min-max but modify the whole array, you can use norm and Mat::convertTo.
    .
    .   In case of sparse matrices, only the non-zero values are analyzed and transformed. Because of this,
    .   the range transformation for sparse matrices is not allowed since it can shift the zero level.
    .
    .   Possible usage with some positive example data:
    .   @code{.cpp}
    .       vector<double> positiveData = { 2.0, 8.0, 10.0 };
    .       vector<double> normalizedData_l1, normalizedData_l2, normalizedData_inf, normalizedData_minmax;
    .
    .       // Norm to probability (total count)
    .       // sum(numbers) = 20.0
    .       // 2.0      0.1     (2.0/20.0)
    .       // 8.0      0.4     (8.0/20.0)
    .       // 10.0     0.5     (10.0/20.0)
    .       normalize(positiveData, normalizedData_l1, 1.0, 0.0, NORM_L1);
    .
    .       // Norm to unit vector: ||positiveData|| = 1.0
    .       // 2.0      0.15
    .       // 8.0      0.62
    .       // 10.0     0.77
    .       normalize(positiveData, normalizedData_l2, 1.0, 0.0, NORM_L2);
    .
    .       // Norm to max element
    .       // 2.0      0.2     (2.0/10.0)
    .       // 8.0      0.8     (8.0/10.0)
    .       // 10.0     1.0     (10.0/10.0)
    .       normalize(positiveData, normalizedData_inf, 1.0, 0.0, NORM_INF);
    .
    .       // Norm to range [0.0;1.0]
    .       // 2.0      0.0     (shift to left border)
    .       // 8.0      0.75    (6.0/8.0)
    .       // 10.0     1.0     (shift to right border)
    .       normalize(positiveData, normalizedData_minmax, 1.0, 0.0, NORM_MINMAX);
    .   @endcode
    .
    .   @param src input array.
    .   @param dst output array of the same size as src .
    .   @param alpha norm value to normalize to or the lower range boundary in case of the range
    .   normalization.
    .   @param beta upper range boundary in case of the range normalization; it is not used for the norm
    .   normalization.
    .   @param norm_type normalization type (see cv::NormTypes).
    .   @param dtype when negative, the output array has the same type as src; otherwise, it has the same
    .   number of channels as src and the depth =CV_MAT_DEPTH(dtype).
    .   @param mask optional operation mask.
    .   @sa norm, Mat::convertTo, SparseMat::convertTo
    """
    ...

def patchNaNs(a, val=...) -> a:
    """
    .   @brief converts NaNs to the given number
    .   @param a input/output matrix (CV_32F type).
    .   @param val value to convert the NaNs
    """
    ...

def pencilSketch(
    src, dst1=..., dst2=..., sigma_s=..., sigma_r=..., shade_factor=...
) -> Tuple[dst1, dst2]:
    """
    .   @brief Pencil-like non-photorealistic line drawing
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param dst1 Output 8-bit 1-channel image.
    .   @param dst2 Output image with the same size and type as src.
    .   @param sigma_s %Range between 0 to 200.
    .   @param sigma_r %Range between 0 to 1.
    .   @param shade_factor %Range between 0 to 0.1.
    """
    ...

def perspectiveTransform(src, m, dst=...) -> dst:
    """
    .   @brief Performs the perspective matrix transformation of vectors.
    .
    .   The function cv::perspectiveTransform transforms every element of src by
    .   treating it as a 2D or 3D vector, in the following way:
    .   \f[(x, y, z)  \rightarrow (x'/w, y'/w, z'/w)\f]
    .   where
    .   \f[(x', y', z', w') =  \texttt{mat} \cdot \begin{bmatrix} x & y & z & 1  \end{bmatrix}\f]
    .   and
    .   \f[w =  \fork{w'}{if \(w' \ne 0\)}{\infty}{otherwise}\f]
    .
    .   Here a 3D vector transformation is shown. In case of a 2D vector
    .   transformation, the z component is omitted.
    .
    .   @note The function transforms a sparse set of 2D or 3D vectors. If you
    .   want to transform an image using perspective transformation, use
    .   warpPerspective . If you have an inverse problem, that is, you want to
    .   compute the most probable perspective transformation out of several
    .   pairs of corresponding points, you can use getPerspectiveTransform or
    .   findHomography .
    .   @param src input two-channel or three-channel floating-point array; each
    .   element is a 2D/3D vector to be transformed.
    .   @param dst output array of the same size and type as src.
    .   @param m 3x3 or 4x4 floating-point transformation matrix.
    .   @sa  transform, warpPerspective, getPerspectiveTransform, findHomography
    """
    ...

def phase(x, y, angle=..., angleInDegrees=...) -> angle:
    """
    .   @brief Calculates the rotation angle of 2D vectors.
    .
    .   The function cv::phase calculates the rotation angle of each 2D vector that
    .   is formed from the corresponding elements of x and y :
    .   \f[\texttt{angle} (I) =  \texttt{atan2} ( \texttt{y} (I), \texttt{x} (I))\f]
    .
    .   The angle estimation accuracy is about 0.3 degrees. When x(I)=y(I)=0 ,
    .   the corresponding angle(I) is set to 0.
    .   @param x input floating-point array of x-coordinates of 2D vectors.
    .   @param y input array of y-coordinates of 2D vectors; it must have the
    .   same size and the same type as x.
    .   @param angle output array of vector angles; it has the same size and
    .   same type as x .
    .   @param angleInDegrees when true, the function calculates the angle in
    .   degrees, otherwise, they are measured in radians.
    """
    ...

def phaseCorrelate(src1, src2, window=...) -> Tuple[retval, response]:
    """
    .   @brief The function is used to detect translational shifts that occur between two images.
    .
    .   The operation takes advantage of the Fourier shift theorem for detecting the translational shift in
    .   the frequency domain. It can be used for fast image registration as well as motion estimation. For
    .   more information please see <http://en.wikipedia.org/wiki/Phase_correlation>
    .
    .   Calculates the cross-power spectrum of two supplied source arrays. The arrays are padded if needed
    .   with getOptimalDFTSize.
    .
    .   The function performs the following equations:
    .   - First it applies a Hanning window (see <http://en.wikipedia.org/wiki/Hann_function>) to each
    .   image to remove possible edge effects. This window is cached until the array size changes to speed
    .   up processing time.
    .   - Next it computes the forward DFTs of each source array:
    .   \f[\mathbf{G}_a = \mathcal{F}\{src_1\}, \; \mathbf{G}_b = \mathcal{F}\{src_2\}\f]
    .   where \f$\mathcal{F}\f$ is the forward DFT.
    .   - It then computes the cross-power spectrum of each frequency domain array:
    .   \f[R = \frac{ \mathbf{G}_a \mathbf{G}_b^*}{|\mathbf{G}_a \mathbf{G}_b^*|}\f]
    .   - Next the cross-correlation is converted back into the time domain via the inverse DFT:
    .   \f[r = \mathcal{F}^{-1}\{R\}\f]
    .   - Finally, it computes the peak location and computes a 5x5 weighted centroid around the peak to
    .   achieve sub-pixel accuracy.
    .   \f[(\Delta x, \Delta y) = \texttt{weightedCentroid} \{\arg \max_{(x, y)}\{r\}\}\f]
    .   - If non-zero, the response parameter is computed as the sum of the elements of r within the 5x5
    .   centroid around the peak location. It is normalized to a maximum of 1 (meaning there is a single
    .   peak) and will be smaller when there are multiple peaks.
    .
    .   @param src1 Source floating point array (CV_32FC1 or CV_64FC1)
    .   @param src2 Source floating point array (CV_32FC1 or CV_64FC1)
    .   @param window Floating point array with windowing coefficients to reduce edge effects (optional).
    .   @param response Signal power within the 5x5 centroid around the peak, between 0 and 1 (optional).
    .   @returns detected phase shift (sub-pixel) between the two arrays.
    .
    .   @sa dft, getOptimalDFTSize, idft, mulSpectrums createHanningWindow
    """
    ...

def pointPolygonTest(contour, pt, measureDist) -> retval:
    """
    .   @brief Performs a point-in-contour test.
    .
    .   The function determines whether the point is inside a contour, outside, or lies on an edge (or
    .   coincides with a vertex). It returns positive (inside), negative (outside), or zero (on an edge)
    .   value, correspondingly. When measureDist=false , the return value is +1, -1, and 0, respectively.
    .   Otherwise, the return value is a signed distance between the point and the nearest contour edge.
    .
    .   See below a sample output of the function where each image pixel is tested against the contour:
    .
    .   ![sample output](pics/pointpolygon.png)
    .
    .   @param contour Input contour.
    .   @param pt Point tested against the contour.
    .   @param measureDist If true, the function estimates the signed distance from the point to the
    .   nearest contour edge. Otherwise, the function only checks if the point is inside a contour or not.
    """
    ...

def polarToCart(magnitude, angle, x=..., y=..., angleInDegrees=...) -> Tuple[x, y]:
    """
    .   @brief Calculates x and y coordinates of 2D vectors from their magnitude and angle.
    .
    .   The function cv::polarToCart calculates the Cartesian coordinates of each 2D
    .   vector represented by the corresponding elements of magnitude and angle:
    .   \f[\begin{array}{l} \texttt{x} (I) =  \texttt{magnitude} (I) \cos ( \texttt{angle} (I)) \\ \texttt{y} (I) =  \texttt{magnitude} (I) \sin ( \texttt{angle} (I)) \\ \end{array}\f]
    .
    .   The relative accuracy of the estimated coordinates is about 1e-6.
    .   @param magnitude input floating-point array of magnitudes of 2D vectors;
    .   it can be an empty matrix (=Mat()), in this case, the function assumes
    .   that all the magnitudes are =1; if it is not empty, it must have the
    .   same size and type as angle.
    .   @param angle input floating-point array of angles of 2D vectors.
    .   @param x output array of x-coordinates of 2D vectors; it has the same
    .   size and type as angle.
    .   @param y output array of y-coordinates of 2D vectors; it has the same
    .   size and type as angle.
    .   @param angleInDegrees when true, the input angles are measured in
    .   degrees, otherwise, they are measured in radians.
    .   @sa cartToPolar, magnitude, phase, exp, log, pow, sqrt
    """
    ...

def pollKey() -> Union[Text, Literal[-1]]:
    """
    .   @brief Polls for a pressed key.
    .
    .   The function pollKey polls for a key event without waiting. It returns the code of the pressed key
    .   or -1 if no key was pressed since the last invocation. To wait until a key was pressed, use #waitKey.
    .
    .   @note The functions #waitKey and #pollKey are the only methods in HighGUI that can fetch and handle
    .   GUI events, so one of them needs to be called periodically for normal event processing unless
    .   HighGUI is used within an environment that takes care of event processing.
    .
    .   @note The function only works if there is at least one HighGUI window created and the window is
    .   active. If there are several HighGUI windows, any of them can be active.
    """
    ...

def polylines(img, pts, isClosed, color, thickness=..., lineType=..., shift=...) -> img:
    """
    .   @brief Draws several polygonal curves.
    .
    .   @param img Image.
    .   @param pts Array of polygonal curves.
    .   @param isClosed Flag indicating whether the drawn polylines are closed or not. If they are closed,
    .   the function draws a line from the last vertex of each curve to its first vertex.
    .   @param color Polyline color.
    .   @param thickness Thickness of the polyline edges.
    .   @param lineType Type of the line segments. See #LineTypes
    .   @param shift Number of fractional bits in the vertex coordinates.
    .
    .   The function cv::polylines draws one or more polygonal curves.
    """
    ...

def pow(src, power, dst=...) -> dst:
    """
    .   @brief Raises every array element to a power.
    .
    .   The function cv::pow raises every element of the input array to power :
    .   \f[\texttt{dst} (I) =  \fork{\texttt{src}(I)^{power}}{if \(\texttt{power}\) is integer}{|\texttt{src}(I)|^{power}}{otherwise}\f]
    .
    .   So, for a non-integer power exponent, the absolute values of input array
    .   elements are used. However, it is possible to get true values for
    .   negative values using some extra operations. In the example below,
    .   computing the 5th root of array src shows:
    .   @code{.cpp}
    .       Mat mask = src < 0;
    .       pow(src, 1./5, dst);
    .       subtract(Scalar::all(0), dst, dst, mask);
    .   @endcode
    .   For some values of power, such as integer values, 0.5 and -0.5,
    .   specialized faster algorithms are used.
    .
    .   Special values (NaN, Inf) are not handled.
    .   @param src input array.
    .   @param power exponent of power.
    .   @param dst output array of the same size and type as src.
    .   @sa sqrt, exp, log, cartToPolar, polarToCart
    """
    ...

def preCornerDetect(src, ksize, dst=..., borderType=...) -> dst:
    """
    .   @brief Calculates a feature map for corner detection.
    .
    .   The function calculates the complex spatial derivative-based function of the source image
    .
    .   \f[\texttt{dst} = (D_x  \texttt{src} )^2  \cdot D_{yy}  \texttt{src} + (D_y  \texttt{src} )^2  \cdot D_{xx}  \texttt{src} - 2 D_x  \texttt{src} \cdot D_y  \texttt{src} \cdot D_{xy}  \texttt{src}\f]
    .
    .   where \f$D_x\f$,\f$D_y\f$ are the first image derivatives, \f$D_{xx}\f$,\f$D_{yy}\f$ are the second image
    .   derivatives, and \f$D_{xy}\f$ is the mixed derivative.
    .
    .   The corners can be found as local maximums of the functions, as shown below:
    .   @code
    .       Mat corners, dilated_corners;
    .       preCornerDetect(image, corners, 3);
    .       // dilation with 3x3 rectangular structuring element
    .       dilate(corners, dilated_corners, Mat(), 1);
    .       Mat corner_mask = corners == dilated_corners;
    .   @endcode
    .
    .   @param src Source single-channel 8-bit of floating-point image.
    .   @param dst Output image that has the type CV_32F and the same size as src .
    .   @param ksize %Aperture size of the Sobel .
    .   @param borderType Pixel extrapolation method. See #BorderTypes. #BORDER_WRAP is not supported.
    """
    ...

def projectPoints(
    objectPoints,
    rvec,
    tvec,
    cameraMatrix,
    distCoeffs,
    imagePoints=...,
    jacobian=...,
    aspectRatio=...,
) -> Tuple[imagePoints, jacobian]:
    """
    .   @brief Projects 3D points to an image plane.
    .
    .   @param objectPoints Array of object points expressed wrt. the world coordinate frame. A 3xN/Nx3
    .   1-channel or 1xN/Nx1 3-channel (or vector\<Point3f\> ), where N is the number of points in the view.
    .   @param rvec The rotation vector (@ref Rodrigues) that, together with tvec, performs a change of
    .   basis from world to camera coordinate system, see @ref calibrateCamera for details.
    .   @param tvec The translation vector, see parameter description above.
    .   @param cameraMatrix Camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$\distcoeffs\f$ . If the vector is empty, the zero distortion coefficients are assumed.
    .   @param imagePoints Output array of image points, 1xN/Nx1 2-channel, or
    .   vector\<Point2f\> .
    .   @param jacobian Optional output 2Nx(10+\<numDistCoeffs\>) jacobian matrix of derivatives of image
    .   points with respect to components of the rotation vector, translation vector, focal lengths,
    .   coordinates of the principal point and the distortion coefficients. In the old interface different
    .   components of the jacobian are returned via different output parameters.
    .   @param aspectRatio Optional "fixed aspect ratio" parameter. If the parameter is not 0, the
    .   function assumes that the aspect ratio (\f$f_x / f_y\f$) is fixed and correspondingly adjusts the
    .   jacobian matrix.
    .
    .   The function computes the 2D projections of 3D points to the image plane, given intrinsic and
    .   extrinsic camera parameters. Optionally, the function computes Jacobians -matrices of partial
    .   derivatives of image points coordinates (as functions of all the input parameters) with respect to
    .   the particular parameters, intrinsic and/or extrinsic. The Jacobians are used during the global
    .   optimization in @ref calibrateCamera, @ref solvePnP, and @ref stereoCalibrate. The function itself
    .   can also be used to compute a re-projection error, given the current intrinsic and extrinsic
    .   parameters.
    .
    .   @note By setting rvec = tvec = \f$[0, 0, 0]\f$, or by setting cameraMatrix to a 3x3 identity matrix,
    .   or by passing zero distortion coefficients, one can get various useful partial cases of the
    .   function. This means, one can compute the distorted coordinates for a sparse set of points or apply
    .   a perspective transformation (and also compute the derivatives) in the ideal zero-distortion setup.
    """
    ...

def putText(
    img,
    text,
    org,
    fontFace,
    fontScale,
    color,
    thickness=...,
    lineType=...,
    bottomLeftOrigin=...,
) -> img:
    """
    .   @brief Draws a text string.
    .
    .   The function cv::putText renders the specified text string in the image. Symbols that cannot be rendered
    .   using the specified font are replaced by question marks. See #getTextSize for a text rendering code
    .   example.
    .
    .   @param img Image.
    .   @param text Text string to be drawn.
    .   @param org Bottom-left corner of the text string in the image.
    .   @param fontFace Font type, see #HersheyFonts.
    .   @param fontScale Font scale factor that is multiplied by the font-specific base size.
    .   @param color Text color.
    .   @param thickness Thickness of the lines used to draw a text.
    .   @param lineType Line type. See #LineTypes
    .   @param bottomLeftOrigin When true, the image data origin is at the bottom-left corner. Otherwise,
    .   it is at the top-left corner.
    """
    ...

def pyrDown(src, dst=..., dstsize=..., borderType=...) -> dst:
    """
    .   @brief Blurs an image and downsamples it.
    .
    .   By default, size of the output image is computed as `Size((src.cols+1)/2, (src.rows+1)/2)`, but in
    .   any case, the following conditions should be satisfied:
    .
    .   \f[\begin{array}{l} | \texttt{dstsize.width} *2-src.cols| \leq 2 \\ | \texttt{dstsize.height} *2-src.rows| \leq 2 \end{array}\f]
    .
    .   The function performs the downsampling step of the Gaussian pyramid construction. First, it
    .   convolves the source image with the kernel:
    .
    .   \f[\frac{1}{256} \begin{bmatrix} 1 & 4 & 6 & 4 & 1  \\ 4 & 16 & 24 & 16 & 4  \\ 6 & 24 & 36 & 24 & 6  \\ 4 & 16 & 24 & 16 & 4  \\ 1 & 4 & 6 & 4 & 1 \end{bmatrix}\f]
    .
    .   Then, it downsamples the image by rejecting even rows and columns.
    .
    .   @param src input image.
    .   @param dst output image; it has the specified size and the same type as src.
    .   @param dstsize size of the output image.
    .   @param borderType Pixel extrapolation method, see #BorderTypes (#BORDER_CONSTANT isn't supported)
    """
    ...

def pyrMeanShiftFiltering(src, sp, sr, dst=..., maxLevel=..., termcrit=...) -> dst:
    """
    .   @brief Performs initial step of meanshift segmentation of an image.
    .
    .   The function implements the filtering stage of meanshift segmentation, that is, the output of the
    .   function is the filtered "posterized" image with color gradients and fine-grain texture flattened.
    .   At every pixel (X,Y) of the input image (or down-sized input image, see below) the function executes
    .   meanshift iterations, that is, the pixel (X,Y) neighborhood in the joint space-color hyperspace is
    .   considered:
    .
    .   \f[(x,y): X- \texttt{sp} \le x  \le X+ \texttt{sp} , Y- \texttt{sp} \le y  \le Y+ \texttt{sp} , ||(R,G,B)-(r,g,b)||   \le \texttt{sr}\f]
    .
    .   where (R,G,B) and (r,g,b) are the vectors of color components at (X,Y) and (x,y), respectively
    .   (though, the algorithm does not depend on the color space used, so any 3-component color space can
    .   be used instead). Over the neighborhood the average spatial value (X',Y') and average color vector
    .   (R',G',B') are found and they act as the neighborhood center on the next iteration:
    .
    .   \f[(X,Y)~(X',Y'), (R,G,B)~(R',G',B').\f]
    .
    .   After the iterations over, the color components of the initial pixel (that is, the pixel from where
    .   the iterations started) are set to the final value (average color at the last iteration):
    .
    .   \f[I(X,Y) <- (R*,G*,B*)\f]
    .
    .   When maxLevel \> 0, the gaussian pyramid of maxLevel+1 levels is built, and the above procedure is
    .   run on the smallest layer first. After that, the results are propagated to the larger layer and the
    .   iterations are run again only on those pixels where the layer colors differ by more than sr from the
    .   lower-resolution layer of the pyramid. That makes boundaries of color regions sharper. Note that the
    .   results will be actually different from the ones obtained by running the meanshift procedure on the
    .   whole original image (i.e. when maxLevel==0).
    .
    .   @param src The source 8-bit, 3-channel image.
    .   @param dst The destination image of the same format and the same size as the source.
    .   @param sp The spatial window radius.
    .   @param sr The color window radius.
    .   @param maxLevel Maximum level of the pyramid for the segmentation.
    .   @param termcrit Termination criteria: when to stop meanshift iterations.
    """
    ...

def pyrUp(src, dst=..., dstsize=..., borderType=...) -> dst:
    """
    .   @brief Upsamples an image and then blurs it.
    .
    .   By default, size of the output image is computed as `Size(src.cols\*2, (src.rows\*2)`, but in any
    .   case, the following conditions should be satisfied:
    .
    .   \f[\begin{array}{l} | \texttt{dstsize.width} -src.cols*2| \leq  ( \texttt{dstsize.width}   \mod  2)  \\ | \texttt{dstsize.height} -src.rows*2| \leq  ( \texttt{dstsize.height}   \mod  2) \end{array}\f]
    .
    .   The function performs the upsampling step of the Gaussian pyramid construction, though it can
    .   actually be used to construct the Laplacian pyramid. First, it upsamples the source image by
    .   injecting even zero rows and columns and then convolves the result with the same kernel as in
    .   pyrDown multiplied by 4.
    .
    .   @param src input image.
    .   @param dst output image. It has the specified size and the same type as src .
    .   @param dstsize size of the output image.
    .   @param borderType Pixel extrapolation method, see #BorderTypes (only #BORDER_DEFAULT is supported)
    """
    ...

def randShuffle(dst, iterFactor=...) -> dst:
    """
    .   @brief Shuffles the array elements randomly.
    .
    .   The function cv::randShuffle shuffles the specified 1D array by randomly choosing pairs of elements and
    .   swapping them. The number of such swap operations will be dst.rows\*dst.cols\*iterFactor .
    .   @param dst input/output numerical 1D array.
    .   @param iterFactor scale factor that determines the number of random swap operations (see the details
    .   below).
    .   @param rng optional random number generator used for shuffling; if it is zero, theRNG () is used
    .   instead.
    .   @sa RNG, sort
    """
    ...

def randn(dst, mean, stddev) -> dst:
    """
    .   @brief Fills the array with normally distributed random numbers.
    .
    .   The function cv::randn fills the matrix dst with normally distributed random numbers with the specified
    .   mean vector and the standard deviation matrix. The generated random numbers are clipped to fit the
    .   value range of the output array data type.
    .   @param dst output array of random numbers; the array must be pre-allocated and have 1 to 4 channels.
    .   @param mean mean value (expectation) of the generated random numbers.
    .   @param stddev standard deviation of the generated random numbers; it can be either a vector (in
    .   which case a diagonal standard deviation matrix is assumed) or a square matrix.
    .   @sa RNG, randu
    """
    ...

def randu(dst, low, high) -> dst:
    """
    .   @brief Generates a single uniformly-distributed random number or an array of random numbers.
    .
    .   Non-template variant of the function fills the matrix dst with uniformly-distributed
    .   random numbers from the specified range:
    .   \f[\texttt{low} _c  \leq \texttt{dst} (I)_c <  \texttt{high} _c\f]
    .   @param dst output array of random numbers; the array must be pre-allocated.
    .   @param low inclusive lower boundary of the generated random numbers.
    .   @param high exclusive upper boundary of the generated random numbers.
    .   @sa RNG, randn, theRNG
    """
    ...

def readOpticalFlow(path) -> retval:
    """
    .   @brief Read a .flo file
    .
    .    @param path Path to the file to be loaded
    .
    .    The function readOpticalFlow loads a flow field from a file and returns it as a single matrix.
    .    Resulting Mat has a type CV_32FC2 - floating-point, 2-channel. First channel corresponds to the
    .    flow in the horizontal direction (u), second - vertical (v).
    """
    ...

def recoverPose(
    E, points1, points2, cameraMatrix, R=..., t=..., mask=...
) -> Tuple[t, mask]:
    """
    .   @brief Recovers the relative camera rotation and the translation from an estimated essential
    .   matrix and the corresponding points in two images, using cheirality check. Returns the number of
    .   inliers that pass the check.
    .
    .   @param E The input essential matrix.
    .   @param points1 Array of N 2D points from the first image. The point coordinates should be
    .   floating-point (single or double precision).
    .   @param points2 Array of the second image points of the same size and format as points1 .
    .   @param cameraMatrix Camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   Note that this function assumes that points1 and points2 are feature points from cameras with the
    .   same camera intrinsic matrix.
    .   @param R Output rotation matrix. Together with the translation vector, this matrix makes up a tuple
    .   that performs a change of basis from the first camera's coordinate system to the second camera's
    .   coordinate system. Note that, in general, t can not be used for this tuple, see the parameter
    .   described below.
    .   @param t Output translation vector. This vector is obtained by @ref decomposeEssentialMat and
    .   therefore is only known up to scale, i.e. t is the direction of the translation vector and has unit
    .   length.
    .   @param mask Input/output mask for inliers in points1 and points2. If it is not empty, then it marks
    .   inliers in points1 and points2 for then given essential matrix E. Only these inliers will be used to
    .   recover pose. In the output mask only inliers which pass the cheirality check.
    .
    .   This function decomposes an essential matrix using @ref decomposeEssentialMat and then verifies
    .   possible pose hypotheses by doing cheirality check. The cheirality check means that the
    .   triangulated 3D points should have positive depth. Some details can be found in @cite Nister03.
    .
    .   This function can be used to process the output E and mask from @ref findEssentialMat. In this
    .   scenario, points1 and points2 are the same input for findEssentialMat.:
    .   @code
    .       // Example. Estimation of fundamental matrix using the RANSAC algorithm
    .       int point_count = 100;
    .       vector<Point2f> points1(point_count);
    .       vector<Point2f> points2(point_count);
    .
    .       // initialize the points here ...
    .       for( int i = 0; i < point_count; i++ )
    .       {
    .           points1[i] = ...;
    .           points2[i] = ...;
    .       }
    .
    .       // cametra matrix with both focal lengths = 1, and principal point = (0, 0)
    .       Mat cameraMatrix = Mat::eye(3, 3, CV_64F);
    .
    .       Mat E, R, t, mask;
    .
    .       E = findEssentialMat(points1, points2, cameraMatrix, RANSAC, 0.999, 1.0, mask);
    .       recoverPose(E, points1, points2, cameraMatrix, R, t, mask);
    .   @endcode



    recoverPose(E, points1, points2, R=..., t=..., focal=..., pp=..., mask=...) -> retval, R, t, mask
    .   @overload
    .   @param E The input essential matrix.
    .   @param points1 Array of N 2D points from the first image. The point coordinates should be
    .   floating-point (single or double precision).
    .   @param points2 Array of the second image points of the same size and format as points1 .
    .   @param R Output rotation matrix. Together with the translation vector, this matrix makes up a tuple
    .   that performs a change of basis from the first camera's coordinate system to the second camera's
    .   coordinate system. Note that, in general, t can not be used for this tuple, see the parameter
    .   description below.
    .   @param t Output translation vector. This vector is obtained by @ref decomposeEssentialMat and
    .   therefore is only known up to scale, i.e. t is the direction of the translation vector and has unit
    .   length.
    .   @param focal Focal length of the camera. Note that this function assumes that points1 and points2
    .   are feature points from cameras with same focal length and principal point.
    .   @param pp principal point of the camera.
    .   @param mask Input/output mask for inliers in points1 and points2. If it is not empty, then it marks
    .   inliers in points1 and points2 for then given essential matrix E. Only these inliers will be used to
    .   recover pose. In the output mask only inliers which pass the cheirality check.
    .
    .   This function differs from the one above that it computes camera intrinsic matrix from focal length and
    .   principal point:
    .
    .   \f[A =
    .   \begin{bmatrix}
    .   f & 0 & x_{pp}  \\
    .   0 & f & y_{pp}  \\
    .   0 & 0 & 1
    .   \end{bmatrix}\f]



    recoverPose(E, points1, points2, cameraMatrix, distanceThresh, R=..., t=..., mask=..., triangulatedPoints=...) -> retval, R, t, mask, triangulatedPoints
    .   @overload
    .   @param E The input essential matrix.
    .   @param points1 Array of N 2D points from the first image. The point coordinates should be
    .   floating-point (single or double precision).
    .   @param points2 Array of the second image points of the same size and format as points1.
    .   @param cameraMatrix Camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   Note that this function assumes that points1 and points2 are feature points from cameras with the
    .   same camera intrinsic matrix.
    .   @param R Output rotation matrix. Together with the translation vector, this matrix makes up a tuple
    .   that performs a change of basis from the first camera's coordinate system to the second camera's
    .   coordinate system. Note that, in general, t can not be used for this tuple, see the parameter
    .   description below.
    .   @param t Output translation vector. This vector is obtained by @ref decomposeEssentialMat and
    .   therefore is only known up to scale, i.e. t is the direction of the translation vector and has unit
    .   length.
    .   @param distanceThresh threshold distance which is used to filter out far away points (i.e. infinite
    .   points).
    .   @param mask Input/output mask for inliers in points1 and points2. If it is not empty, then it marks
    .   inliers in points1 and points2 for then given essential matrix E. Only these inliers will be used to
    .   recover pose. In the output mask only inliers which pass the cheirality check.
    .   @param triangulatedPoints 3D points which were reconstructed by triangulation.
    .
    .   This function differs from the one above that it outputs the triangulated 3D point that are used for
    .   the cheirality check.
    """
    ...

def rectangle(
    img: ndarray,
    pt1: Tuple[int, int],
    pt2: Tuple[int, int],
    color: Tuple[int, ...],
    thickness: int = ...,
    lineType: int = ...,
    shift: int = ...,
) -> ndarray:
    """
    .   @brief Draws a simple, thick, or filled up-right rectangle.
    .
    .   The function cv::rectangle draws a rectangle outline or a filled rectangle whose two opposite corners
    .   are pt1 and pt2.
    .
    .   @param img Image.
    .   @param pt1 Vertex of the rectangle.
    .   @param pt2 Vertex of the rectangle opposite to pt1 .
    .   @param color Rectangle color or brightness (grayscale image).
    .   @param thickness Thickness of lines that make up the rectangle. Negative values, like #FILLED,
    .   mean that the function has to draw a filled rectangle.
    .   @param lineType Type of the line. See #LineTypes
    .   @param shift Number of fractional bits in the point coordinates.



    rectangle(img, rec, color, thickness=..., lineType=..., shift=...) -> img
    .   @overload
    .
    .   use `rec` parameter as alternative specification of the drawn rectangle: `r.tl() and
    .   r.br()-Point(1,1)` are opposite corners
    """
    ...

def rectify3Collinear(
    cameraMatrix1,
    distCoeffs1,
    cameraMatrix2,
    distCoeffs2,
    cameraMatrix3,
    distCoeffs3,
    imgpt1,
    imgpt3,
    imageSize,
    R12,
    T12,
    R13,
    T13,
    alpha,
    newImgSize,
    flags,
    R1=...,
    R2=...,
    R3=...,
    P1=...,
    P2=...,
    P3=...,
    Q=...,
) -> Tuple[roi1, roi2]:
    """
    .
    """
    ...

def redirectError(onError) -> None:
    """ """
    ...

def reduce(
    src: ndarray, dim: int, rtype: int, dst: ndarray = ..., dtype: int = ...
) -> ndarray:
    """
    .   @brief Reduces a matrix to a vector.
    .
    .   The function #reduce reduces the matrix to a vector by treating the matrix rows/columns as a set of
    .   1D vectors and performing the specified operation on the vectors until a single row/column is
    .   obtained. For example, the function can be used to compute horizontal and vertical projections of a
    .   raster image. In case of #REDUCE_MAX and #REDUCE_MIN , the output image should have the same type as the source one.
    .   In case of #REDUCE_SUM and #REDUCE_AVG , the output may have a larger element bit-depth to preserve accuracy.
    .   And multi-channel arrays are also supported in these two reduction modes.
    .
    .   The following code demonstrates its usage for a single channel matrix.
    .   @snippet snippets/core_reduce.cpp example
    .
    .   And the following code demonstrates its usage for a two-channel matrix.
    .   @snippet snippets/core_reduce.cpp example2
    .
    .   @param src input 2D matrix.
    .   @param dst output vector. Its size and type is defined by dim and dtype parameters.
    .   @param dim dimension index along which the matrix is reduced. 0 means that the matrix is reduced to
    .   a single row. 1 means that the matrix is reduced to a single column.
    .   @param rtype reduction operation that could be one of #ReduceTypes
    .   @param dtype when negative, the output vector will have the same type as the input matrix,
    .   otherwise, its type will be CV_MAKE_TYPE(CV_MAT_DEPTH(dtype), src.channels()).
    .   @sa repeat
    """
    ...

def remap(
    src, map1, map2, interpolation, dst=..., borderMode=..., borderValue=...
) -> dst:
    """
    .   @brief Applies a generic geometrical transformation to an image.
    .
    .   The function remap transforms the source image using the specified map:
    .
    .   \f[\texttt{dst} (x,y) =  \texttt{src} (map_x(x,y),map_y(x,y))\f]
    .
    .   where values of pixels with non-integer coordinates are computed using one of available
    .   interpolation methods. \f$map_x\f$ and \f$map_y\f$ can be encoded as separate floating-point maps
    .   in \f$map_1\f$ and \f$map_2\f$ respectively, or interleaved floating-point maps of \f$(x,y)\f$ in
    .   \f$map_1\f$, or fixed-point maps created by using convertMaps. The reason you might want to
    .   convert from floating to fixed-point representations of a map is that they can yield much faster
    .   (\~2x) remapping operations. In the converted case, \f$map_1\f$ contains pairs (cvFloor(x),
    .   cvFloor(y)) and \f$map_2\f$ contains indices in a table of interpolation coefficients.
    .
    .   This function cannot operate in-place.
    .
    .   @param src Source image.
    .   @param dst Destination image. It has the same size as map1 and the same type as src .
    .   @param map1 The first map of either (x,y) points or just x values having the type CV_16SC2 ,
    .   CV_32FC1, or CV_32FC2. See convertMaps for details on converting a floating point
    .   representation to fixed-point for speed.
    .   @param map2 The second map of y values having the type CV_16UC1, CV_32FC1, or none (empty map
    .   if map1 is (x,y) points), respectively.
    .   @param interpolation Interpolation method (see #InterpolationFlags). The methods #INTER_AREA
    .   and #INTER_LINEAR_EXACT are not supported by this function.
    .   @param borderMode Pixel extrapolation method (see #BorderTypes). When
    .   borderMode=#BORDER_TRANSPARENT, it means that the pixels in the destination image that
    .   corresponds to the "outliers" in the source image are not modified by the function.
    .   @param borderValue Value used in case of a constant border. By default, it is 0.
    .   @note
    .   Due to current implementation limitations the size of an input and output images should be less than 32767x32767.
    """
    ...

def repeat(src, ny, nx, dst=...) -> dst:
    """
    .   @brief Fills the output array with repeated copies of the input array.
    .
    .   The function cv::repeat duplicates the input array one or more times along each of the two axes:
    .   \f[\texttt{dst} _{ij}= \texttt{src} _{i\mod src.rows, \; j\mod src.cols }\f]
    .   The second variant of the function is more convenient to use with @ref MatrixExpressions.
    .   @param src input array to replicate.
    .   @param ny Flag to specify how many times the `src` is repeated along the
    .   vertical axis.
    .   @param nx Flag to specify how many times the `src` is repeated along the
    .   horizontal axis.
    .   @param dst output array of the same type as `src`.
    .   @sa cv::reduce
    """
    ...

def reprojectImageTo3D(
    disparity, Q, _3dImage=..., handleMissingValues=..., ddepth=...
) -> _3dImage:
    """
    .   @brief Reprojects a disparity image to 3D space.
    .
    .   @param disparity Input single-channel 8-bit unsigned, 16-bit signed, 32-bit signed or 32-bit
    .   floating-point disparity image. The values of 8-bit / 16-bit signed formats are assumed to have no
    .   fractional bits. If the disparity is 16-bit signed format, as computed by @ref StereoBM or
    .   @ref StereoSGBM and maybe other algorithms, it should be divided by 16 (and scaled to float) before
    .   being used here.
    .   @param _3dImage Output 3-channel floating-point image of the same size as disparity. Each element of
    .   _3dImage(x,y) contains 3D coordinates of the point (x,y) computed from the disparity map. If one
    .   uses Q obtained by @ref stereoRectify, then the returned points are represented in the first
    .   camera's rectified coordinate system.
    .   @param Q \f$4 \times 4\f$ perspective transformation matrix that can be obtained with
    .   @ref stereoRectify.
    .   @param handleMissingValues Indicates, whether the function should handle missing values (i.e.
    .   points where the disparity was not computed). If handleMissingValues=true, then pixels with the
    .   minimal disparity that corresponds to the outliers (see StereoMatcher::compute ) are transformed
    .   to 3D points with a very large Z value (currently set to 10000).
    .   @param ddepth The optional output array depth. If it is -1, the output image will have CV_32F
    .   depth. ddepth can also be set to CV_16S, CV_32S or CV_32F.
    .
    .   The function transforms a single-channel disparity map to a 3-channel image representing a 3D
    .   surface. That is, for each pixel (x,y) and the corresponding disparity d=disparity(x,y) , it
    .   computes:
    .
    .   \f[\begin{bmatrix}
    .   X \\
    .   Y \\
    .   Z \\
    .   W
    .   \end{bmatrix} = Q \begin{bmatrix}
    .   x \\
    .   y \\
    .   \texttt{disparity} (x,y) \\
    .   z
    .   \end{bmatrix}.\f]
    .
    .   @sa
    .      To reproject a sparse set of points {(x,y,d),...} to 3D space, use perspectiveTransform.
    """
    ...

def resize(
    src: ndarray,
    dsize: Tuple[int, int],
    dst: ndarray = ...,
    fx: float = ...,
    fy: float = ...,
    interpolation: int = ...,
) -> ndarray:
    """
    .   @brief Resizes an image.
    .
    .   The function resize resizes the image src down to or up to the specified size. Note that the
    .   initial dst type or size are not taken into account. Instead, the size and type are derived from
    .   the `src`,`dsize`,`fx`, and `fy`. If you want to resize src so that it fits the pre-created dst,
    .   you may call the function as follows:
    .   @code
    .       // explicitly specify dsize=dst.size(); fx and fy will be computed from that.
    .       resize(src, dst, dst.size(), 0, 0, interpolation);
    .   @endcode
    .   If you want to decimate the image by factor of 2 in each direction, you can call the function this
    .   way:
    .   @code
    .       // specify fx and fy and let the function compute the destination image size.
    .       resize(src, dst, Size(), 0.5, 0.5, interpolation);
    .   @endcode
    .   To shrink an image, it will generally look best with #INTER_AREA interpolation, whereas to
    .   enlarge an image, it will generally look best with c#INTER_CUBIC (slow) or #INTER_LINEAR
    .   (faster but still looks OK).
    .
    .   @param src input image.
    .   @param dst output image; it has the size dsize (when it is non-zero) or the size computed from
    .   src.size(), fx, and fy; the type of dst is the same as of src.
    .   @param dsize output image size; if it equals zero, it is computed as:
    .    \f[\texttt{dsize = Size(round(fx*src.cols), round(fy*src.rows))}\f]
    .    Either dsize or both fx and fy must be non-zero.
    .   @param fx scale factor along the horizontal axis; when it equals 0, it is computed as
    .   \f[\texttt{(double)dsize.width/src.cols}\f]
    .   @param fy scale factor along the vertical axis; when it equals 0, it is computed as
    .   \f[\texttt{(double)dsize.height/src.rows}\f]
    .   @param interpolation interpolation method, see #InterpolationFlags
    .
    .   @sa  warpAffine, warpPerspective, remap
    """
    ...

def resizeWindow(winname, width, height) -> None:
    """
    .   @brief Resizes the window to the specified size
    .
    .   @note
    .
    .   -   The specified window size is for the image area. Toolbars are not counted.
    .   -   Only windows created without cv::WINDOW_AUTOSIZE flag can be resized.
    .
    .   @param winname Window name.
    .   @param width The new window width.
    .   @param height The new window height.



    resizeWindow(winname, size) -> None
    .   @overload
    .   @param winname Window name.
    .   @param size The new window size.
    """
    ...

def rotate(src, rotateCode, dst=...) -> dst:
    """
    .   @brief Rotates a 2D array in multiples of 90 degrees.
    .   The function cv::rotate rotates the array in one of three different ways:
    .   *   Rotate by 90 degrees clockwise (rotateCode = ROTATE_90_CLOCKWISE).
    .   *   Rotate by 180 degrees clockwise (rotateCode = ROTATE_180).
    .   *   Rotate by 270 degrees clockwise (rotateCode = ROTATE_90_COUNTERCLOCKWISE).
    .   @param src input array.
    .   @param dst output array of the same type as src.  The size is the same with ROTATE_180,
    .   and the rows and cols are switched for ROTATE_90_CLOCKWISE and ROTATE_90_COUNTERCLOCKWISE.
    .   @param rotateCode an enum to specify how to rotate the array; see the enum #RotateFlags
    .   @sa transpose , repeat , completeSymm, flip, RotateFlags
    """
    ...

def rotatedRectangleIntersection(
    rect1, rect2, intersectingRegion=...
) -> Tuple[retval, intersectingRegion]:
    """
    .   @brief Finds out if there is any intersection between two rotated rectangles.
    .
    .   If there is then the vertices of the intersecting region are returned as well.
    .
    .   Below are some examples of intersection configurations. The hatched pattern indicates the
    .   intersecting region and the red vertices are returned by the function.
    .
    .   ![intersection examples](pics/intersection.png)
    .
    .   @param rect1 First rectangle
    .   @param rect2 Second rectangle
    .   @param intersectingRegion The output array of the vertices of the intersecting region. It returns
    .   at most 8 vertices. Stored as std::vector\<cv::Point2f\> or cv::Mat as Mx1 of type CV_32FC2.
    .   @returns One of #RectanglesIntersectTypes
    """
    ...

def sampsonDistance(pt1, pt2, F) -> retval:
    """
    .   @brief Calculates the Sampson Distance between two points.
    .
    .   The function cv::sampsonDistance calculates and returns the first order approximation of the geometric error as:
    .   \f[
    .   sd( \texttt{pt1} , \texttt{pt2} )=
    .   \frac{(\texttt{pt2}^t \cdot \texttt{F} \cdot \texttt{pt1})^2}
    .   {((\texttt{F} \cdot \texttt{pt1})(0))^2 +
    .   ((\texttt{F} \cdot \texttt{pt1})(1))^2 +
    .   ((\texttt{F}^t \cdot \texttt{pt2})(0))^2 +
    .   ((\texttt{F}^t \cdot \texttt{pt2})(1))^2}
    .   \f]
    .   The fundamental matrix may be calculated using the cv::findFundamentalMat function. See @cite HartleyZ00 11.4.3 for details.
    .   @param pt1 first homogeneous 2d point
    .   @param pt2 second homogeneous 2d point
    .   @param F fundamental matrix
    .   @return The computed Sampson distance.
    """
    ...

def scaleAdd(src1, alpha, src2, dst=...) -> dst:
    """
    .   @brief Calculates the sum of a scaled array and another array.
    .
    .   The function scaleAdd is one of the classical primitive linear algebra operations, known as DAXPY
    .   or SAXPY in [BLAS](http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms). It calculates
    .   the sum of a scaled array and another array:
    .   \f[\texttt{dst} (I)= \texttt{scale} \cdot \texttt{src1} (I) +  \texttt{src2} (I)\f]
    .   The function can also be emulated with a matrix expression, for example:
    .   @code{.cpp}
    .       Mat A(3, 3, CV_64F);
    .       ...
    .       A.row(0) = A.row(1)*2 + A.row(2);
    .   @endcode
    .   @param src1 first input array.
    .   @param alpha scale factor for the first array.
    .   @param src2 second input array of the same size and type as src1.
    .   @param dst output array of the same size and type as src1.
    .   @sa add, addWeighted, subtract, Mat::dot, Mat::convertTo
    """
    ...

def seamlessClone(src, dst, mask, p, flags, blend=...) -> blend:
    """
    .   @brief Image editing tasks concern either global changes (color/intensity corrections, filters,
    .   deformations) or local changes concerned to a selection. Here we are interested in achieving local
    .   changes, ones that are restricted to a region manually selected (ROI), in a seamless and effortless
    .   manner. The extent of the changes ranges from slight distortions to complete replacement by novel
    .   content @cite PM03 .
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param dst Input 8-bit 3-channel image.
    .   @param mask Input 8-bit 1 or 3-channel image.
    .   @param p Point in dst image where object is placed.
    .   @param blend Output image with the same size and type as dst.
    .   @param flags Cloning method that could be cv::NORMAL_CLONE, cv::MIXED_CLONE or cv::MONOCHROME_TRANSFER
    """
    ...

def selectROI(windowName, img, showCrosshair=..., fromCenter=...) -> retval:
    """
    .   @brief Allows users to select a ROI on the given image.
    .
    .   The function creates a window and allows users to select a ROI using the mouse.
    .   Controls: use `space` or `enter` to finish selection, use key `c` to cancel selection (function will return the zero cv::Rect).
    .
    .   @param windowName name of the window where selection process will be shown.
    .   @param img image to select a ROI.
    .   @param showCrosshair if true crosshair of selection rectangle will be shown.
    .   @param fromCenter if true center of selection will match initial mouse position. In opposite case a corner of
    .   selection rectangle will correspont to the initial mouse position.
    .   @return selected ROI or empty rect if selection canceled.
    .
    .   @note The function sets it's own mouse callback for specified window using cv::setMouseCallback(windowName, ...).
    .   After finish of work an empty callback will be set for the used window.



    selectROI(img, showCrosshair=..., fromCenter=...) -> retval
    .   @overload
    """
    ...

def selectROIs(windowName, img, showCrosshair=..., fromCenter=...) -> boundingBoxes:
    """
    .   @brief Allows users to select multiple ROIs on the given image.
    .
    .   The function creates a window and allows users to select multiple ROIs using the mouse.
    .   Controls: use `space` or `enter` to finish current selection and start a new one,
    .   use `esc` to terminate multiple ROI selection process.
    .
    .   @param windowName name of the window where selection process will be shown.
    .   @param img image to select a ROI.
    .   @param boundingBoxes selected ROIs.
    .   @param showCrosshair if true crosshair of selection rectangle will be shown.
    .   @param fromCenter if true center of selection will match initial mouse position. In opposite case a corner of
    .   selection rectangle will correspont to the initial mouse position.
    .
    .   @note The function sets it's own mouse callback for specified window using cv::setMouseCallback(windowName, ...).
    .   After finish of work an empty callback will be set for the used window.
    """
    ...

def sepFilter2D(
    src, ddepth, kernelX, kernelY, dst=..., anchor=..., delta=..., borderType=...
) -> dst:
    """
    .   @brief Applies a separable linear filter to an image.
    .
    .   The function applies a separable linear filter to the image. That is, first, every row of src is
    .   filtered with the 1D kernel kernelX. Then, every column of the result is filtered with the 1D
    .   kernel kernelY. The final result shifted by delta is stored in dst .
    .
    .   @param src Source image.
    .   @param dst Destination image of the same size and the same number of channels as src .
    .   @param ddepth Destination image depth, see @ref filter_depths "combinations"
    .   @param kernelX Coefficients for filtering each row.
    .   @param kernelY Coefficients for filtering each column.
    .   @param anchor Anchor position within the kernel. The default value \f$(-1,-1)\f$ means that the anchor
    .   is at the kernel center.
    .   @param delta Value added to the filtered results before storing them.
    .   @param borderType Pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not supported.
    .   @sa  filter2D, Sobel, GaussianBlur, boxFilter, blur
    """
    ...

def setIdentity(mtx, s=...) -> mtx:
    """
    .   @brief Initializes a scaled identity matrix.
    .
    .   The function cv::setIdentity initializes a scaled identity matrix:
    .   \f[\texttt{mtx} (i,j)= \fork{\texttt{value}}{ if \(i=j\)}{0}{otherwise}\f]
    .
    .   The function can also be emulated using the matrix initializers and the
    .   matrix expressions:
    .   @code
    .       Mat A = Mat::eye(4, 3, CV_32F)*5;
    .       // A will be set to [[5, 0, 0], [0, 5, 0], [0, 0, 5], [0, 0, 0]]
    .   @endcode
    .   @param mtx matrix to initialize (not necessarily square).
    .   @param s value to assign to diagonal elements.
    .   @sa Mat::zeros, Mat::ones, Mat::setTo, Mat::operator=
    """
    ...

def setLogLevel(level) -> retval:
    """
    .
    """
    ...

def setMouseCallback(windowName, onMouse, param=...) -> None:
    """ """
    ...

def setNumThreads(nthreads) -> None:
    """
    .   @brief OpenCV will try to set the number of threads for the next parallel region.
    .
    .   If threads == 0, OpenCV will disable threading optimizations and run all it's functions
    .   sequentially. Passing threads \< 0 will reset threads number to system default. This function must
    .   be called outside of parallel region.
    .
    .   OpenCV will try to run its functions with specified threads number, but some behaviour differs from
    .   framework:
    .   -   `TBB` - User-defined parallel constructions will run with the same threads number, if
    .       another is not specified. If later on user creates his own scheduler, OpenCV will use it.
    .   -   `OpenMP` - No special defined behaviour.
    .   -   `Concurrency` - If threads == 1, OpenCV will disable threading optimizations and run its
    .       functions sequentially.
    .   -   `GCD` - Supports only values \<= 0.
    .   -   `C=` - No special defined behaviour.
    .   @param nthreads Number of threads used by OpenCV.
    .   @sa getNumThreads, getThreadNum
    """
    ...

def setRNGSeed(seed) -> None:
    """
    .   @brief Sets state of default random number generator.
    .
    .   The function cv::setRNGSeed sets state of default random number generator to custom value.
    .   @param seed new state for default random number generator
    .   @sa RNG, randu, randn
    """
    ...

def setTrackbarMax(trackbarname, winname, maxval) -> None:
    """
    .   @brief Sets the trackbar maximum position.
    .
    .   The function sets the maximum position of the specified trackbar in the specified window.
    .
    .   @note
    .
    .   [__Qt Backend Only__] winname can be empty if the trackbar is attached to the control
    .   panel.
    .
    .   @param trackbarname Name of the trackbar.
    .   @param winname Name of the window that is the parent of trackbar.
    .   @param maxval New maximum position.
    """
    ...

def setTrackbarMin(trackbarname, winname, minval) -> None:
    """
    .   @brief Sets the trackbar minimum position.
    .
    .   The function sets the minimum position of the specified trackbar in the specified window.
    .
    .   @note
    .
    .   [__Qt Backend Only__] winname can be empty if the trackbar is attached to the control
    .   panel.
    .
    .   @param trackbarname Name of the trackbar.
    .   @param winname Name of the window that is the parent of trackbar.
    .   @param minval New minimum position.
    """
    ...

def setTrackbarPos(trackbarname, winname, pos) -> None:
    """
    .   @brief Sets the trackbar position.
    .
    .   The function sets the position of the specified trackbar in the specified window.
    .
    .   @note
    .
    .   [__Qt Backend Only__] winname can be empty if the trackbar is attached to the control
    .   panel.
    .
    .   @param trackbarname Name of the trackbar.
    .   @param winname Name of the window that is the parent of trackbar.
    .   @param pos New position.
    """
    ...

def setUseOpenVX(flag) -> None:
    """
    .
    """
    ...

def setUseOptimized(onoff) -> None:
    """
    .   @brief Enables or disables the optimized code.
    .
    .   The function can be used to dynamically turn on and off optimized dispatched code (code that uses SSE4.2, AVX/AVX2,
    .   and other instructions on the platforms that support it). It sets a global flag that is further
    .   checked by OpenCV functions. Since the flag is not checked in the inner OpenCV loops, it is only
    .   safe to call the function on the very top level in your application where you can be sure that no
    .   other OpenCV function is currently executed.
    .
    .   By default, the optimized code is enabled unless you disable it in CMake. The current status can be
    .   retrieved using useOptimized.
    .   @param onoff The boolean flag specifying whether the optimized code should be used (onoff=true)
    .   or not (onoff=false).
    """
    ...

def setWindowProperty(winname, prop_id, prop_value) -> None:
    """
    .   @brief Changes parameters of a window dynamically.
    .
    .   The function setWindowProperty enables changing properties of a window.
    .
    .   @param winname Name of the window.
    .   @param prop_id Window property to edit. The supported operation flags are: (cv::WindowPropertyFlags)
    .   @param prop_value New value of the window property. The supported flags are: (cv::WindowFlags)
    """
    ...

def setWindowTitle(winname, title) -> None:
    """
    .   @brief Updates window title
    .   @param winname Name of the window.
    .   @param title New title.
    """
    ...

def solve(src1, src2, dst=..., flags=...) -> Tuple[retval, dst]:
    """
    .   @brief Solves one or more linear systems or least-squares problems.
    .
    .   The function cv::solve solves a linear system or least-squares problem (the
    .   latter is possible with SVD or QR methods, or by specifying the flag
    .   #DECOMP_NORMAL ):
    .   \f[\texttt{dst} =  \arg \min _X \| \texttt{src1} \cdot \texttt{X} -  \texttt{src2} \|\f]
    .
    .   If #DECOMP_LU or #DECOMP_CHOLESKY method is used, the function returns 1
    .   if src1 (or \f$\texttt{src1}^T\texttt{src1}\f$ ) is non-singular. Otherwise,
    .   it returns 0. In the latter case, dst is not valid. Other methods find a
    .   pseudo-solution in case of a singular left-hand side part.
    .
    .   @note If you want to find a unity-norm solution of an under-defined
    .   singular system \f$\texttt{src1}\cdot\texttt{dst}=0\f$ , the function solve
    .   will not do the work. Use SVD::solveZ instead.
    .
    .   @param src1 input matrix on the left-hand side of the system.
    .   @param src2 input matrix on the right-hand side of the system.
    .   @param dst output solution.
    .   @param flags solution (matrix inversion) method (#DecompTypes)
    .   @sa invert, SVD, eigen
    """
    ...

def solveCubic(coeffs, roots=...) -> Tuple[retval, roots]:
    """
    .   @brief Finds the real roots of a cubic equation.
    .
    .   The function solveCubic finds the real roots of a cubic equation:
    .   -   if coeffs is a 4-element vector:
    .   \f[\texttt{coeffs} [0] x^3 +  \texttt{coeffs} [1] x^2 +  \texttt{coeffs} [2] x +  \texttt{coeffs} [3] = 0\f]
    .   -   if coeffs is a 3-element vector:
    .   \f[x^3 +  \texttt{coeffs} [0] x^2 +  \texttt{coeffs} [1] x +  \texttt{coeffs} [2] = 0\f]
    .
    .   The roots are stored in the roots array.
    .   @param coeffs equation coefficients, an array of 3 or 4 elements.
    .   @param roots output array of real roots that has 1 or 3 elements.
    .   @return number of real roots. It can be 0, 1 or 2.
    """
    ...

def solveLP(Func, Constr, z=...) -> Tuple[retval, z]:
    """
    .   @brief Solve given (non-integer) linear programming problem using the Simplex Algorithm (Simplex Method).
    .
    .   What we mean here by "linear programming problem" (or LP problem, for short) can be formulated as:
    .
    .   \f[\mbox{Maximize } c\cdot x\\
    .    \mbox{Subject to:}\\
    .    Ax\leq b\\
    .    x\geq 0\f]
    .
    .   Where \f$c\f$ is fixed `1`-by-`n` row-vector, \f$A\f$ is fixed `m`-by-`n` matrix, \f$b\f$ is fixed `m`-by-`1`
    .   column vector and \f$x\f$ is an arbitrary `n`-by-`1` column vector, which satisfies the constraints.
    .
    .   Simplex algorithm is one of many algorithms that are designed to handle this sort of problems
    .   efficiently. Although it is not optimal in theoretical sense (there exist algorithms that can solve
    .   any problem written as above in polynomial time, while simplex method degenerates to exponential
    .   time for some special cases), it is well-studied, easy to implement and is shown to work well for
    .   real-life purposes.
    .
    .   The particular implementation is taken almost verbatim from **Introduction to Algorithms, third
    .   edition** by T. H. Cormen, C. E. Leiserson, R. L. Rivest and Clifford Stein. In particular, the
    .   Bland's rule <http://en.wikipedia.org/wiki/Bland%27s_rule> is used to prevent cycling.
    .
    .   @param Func This row-vector corresponds to \f$c\f$ in the LP problem formulation (see above). It should
    .   contain 32- or 64-bit floating point numbers. As a convenience, column-vector may be also submitted,
    .   in the latter case it is understood to correspond to \f$c^T\f$.
    .   @param Constr `m`-by-`n+1` matrix, whose rightmost column corresponds to \f$b\f$ in formulation above
    .   and the remaining to \f$A\f$. It should contain 32- or 64-bit floating point numbers.
    .   @param z The solution will be returned here as a column-vector - it corresponds to \f$c\f$ in the
    .   formulation above. It will contain 64-bit floating point numbers.
    .   @return One of cv::SolveLPResult
    """
    ...

def solveP3P(
    objectPoints, imagePoints, cameraMatrix, distCoeffs, flags, rvecs=..., tvecs=...
) -> Tuple[s, tvecs]:
    """
    .   @brief Finds an object pose from 3 3D-2D point correspondences.
    .
    .   @param objectPoints Array of object points in the object coordinate space, 3x3 1-channel or
    .   1x3/3x1 3-channel. vector\<Point3f\> can be also passed here.
    .   @param imagePoints Array of corresponding image points, 3x2 1-channel or 1x3/3x1 2-channel.
    .    vector\<Point2f\> can be also passed here.
    .   @param cameraMatrix Input camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$\distcoeffs\f$. If the vector is NULL/empty, the zero distortion coefficients are
    .   assumed.
    .   @param rvecs Output rotation vectors (see @ref Rodrigues ) that, together with tvecs, brings points from
    .   the model coordinate system to the camera coordinate system. A P3P problem has up to 4 solutions.
    .   @param tvecs Output translation vectors.
    .   @param flags Method for solving a P3P problem:
    .   -   @ref SOLVEPNP_P3P Method is based on the paper of X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang
    .   "Complete Solution Classification for the Perspective-Three-Point Problem" (@cite gao2003complete).
    .   -   @ref SOLVEPNP_AP3P Method is based on the paper of T. Ke and S. Roumeliotis.
    .   "An Efficient Algebraic Solution to the Perspective-Three-Point Problem" (@cite Ke17).
    .
    .   The function estimates the object pose given 3 object points, their corresponding image
    .   projections, as well as the camera intrinsic matrix and the distortion coefficients.
    .
    .   @note
    .   The solutions are sorted by reprojection errors (lowest to highest).
    """
    ...

def solvePnP(
    objectPoints,
    imagePoints,
    cameraMatrix,
    distCoeffs,
    rvec=...,
    tvec=...,
    useExtrinsicGuess=...,
    flags=...,
) -> Tuple[c, tvec]:
    """
    .   @brief Finds an object pose from 3D-2D point correspondences.
    .   This function returns the rotation and the translation vectors that transform a 3D point expressed in the object
    .   coordinate frame to the camera coordinate frame, using different methods:
    .   - P3P methods (@ref SOLVEPNP_P3P, @ref SOLVEPNP_AP3P): need 4 input points to return a unique solution.
    .   - @ref SOLVEPNP_IPPE Input points must be >= 4 and object points must be coplanar.
    .   - @ref SOLVEPNP_IPPE_SQUARE Special case suitable for marker pose estimation.
    .   Number of input points must be 4. Object points must be defined in the following order:
    .     - point 0: [-squareLength / 2,  squareLength / 2, 0]
    .     - point 1: [ squareLength / 2,  squareLength / 2, 0]
    .     - point 2: [ squareLength / 2, -squareLength / 2, 0]
    .     - point 3: [-squareLength / 2, -squareLength / 2, 0]
    .   - for all the other flags, number of input points must be >= 4 and object points can be in any configuration.
    .
    .   @param objectPoints Array of object points in the object coordinate space, Nx3 1-channel or
    .   1xN/Nx1 3-channel, where N is the number of points. vector\<Point3d\> can be also passed here.
    .   @param imagePoints Array of corresponding image points, Nx2 1-channel or 1xN/Nx1 2-channel,
    .   where N is the number of points. vector\<Point2d\> can be also passed here.
    .   @param cameraMatrix Input camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$\distcoeffs\f$. If the vector is NULL/empty, the zero distortion coefficients are
    .   assumed.
    .   @param rvec Output rotation vector (see @ref Rodrigues ) that, together with tvec, brings points from
    .   the model coordinate system to the camera coordinate system.
    .   @param tvec Output translation vector.
    .   @param useExtrinsicGuess Parameter used for #SOLVEPNP_ITERATIVE. If true (1), the function uses
    .   the provided rvec and tvec values as initial approximations of the rotation and translation
    .   vectors, respectively, and further optimizes them.
    .   @param flags Method for solving a PnP problem:
    .   -   @ref SOLVEPNP_ITERATIVE Iterative method is based on a Levenberg-Marquardt optimization. In
    .   this case the function finds such a pose that minimizes reprojection error, that is the sum
    .   of squared distances between the observed projections imagePoints and the projected (using
    .   @ref projectPoints ) objectPoints .
    .   -   @ref SOLVEPNP_P3P Method is based on the paper of X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang
    .   "Complete Solution Classification for the Perspective-Three-Point Problem" (@cite gao2003complete).
    .   In this case the function requires exactly four object and image points.
    .   -   @ref SOLVEPNP_AP3P Method is based on the paper of T. Ke, S. Roumeliotis
    .   "An Efficient Algebraic Solution to the Perspective-Three-Point Problem" (@cite Ke17).
    .   In this case the function requires exactly four object and image points.
    .   -   @ref SOLVEPNP_EPNP Method has been introduced by F. Moreno-Noguer, V. Lepetit and P. Fua in the
    .   paper "EPnP: Efficient Perspective-n-Point Camera Pose Estimation" (@cite lepetit2009epnp).
    .   -   @ref SOLVEPNP_DLS **Broken implementation. Using this flag will fallback to EPnP.** \n
    .   Method is based on the paper of J. Hesch and S. Roumeliotis.
    .   "A Direct Least-Squares (DLS) Method for PnP" (@cite hesch2011direct).
    .   -   @ref SOLVEPNP_UPNP **Broken implementation. Using this flag will fallback to EPnP.** \n
    .   Method is based on the paper of A. Penate-Sanchez, J. Andrade-Cetto,
    .   F. Moreno-Noguer. "Exhaustive Linearization for Robust Camera Pose and Focal Length
    .   Estimation" (@cite penate2013exhaustive). In this case the function also estimates the parameters \f$f_x\f$ and \f$f_y\f$
    .   assuming that both have the same value. Then the cameraMatrix is updated with the estimated
    .   focal length.
    .   -   @ref SOLVEPNP_IPPE Method is based on the paper of T. Collins and A. Bartoli.
    .   "Infinitesimal Plane-Based Pose Estimation" (@cite Collins14). This method requires coplanar object points.
    .   -   @ref SOLVEPNP_IPPE_SQUARE Method is based on the paper of Toby Collins and Adrien Bartoli.
    .   "Infinitesimal Plane-Based Pose Estimation" (@cite Collins14). This method is suitable for marker pose estimation.
    .   It requires 4 coplanar object points defined in the following order:
    .     - point 0: [-squareLength / 2,  squareLength / 2, 0]
    .     - point 1: [ squareLength / 2,  squareLength / 2, 0]
    .     - point 2: [ squareLength / 2, -squareLength / 2, 0]
    .     - point 3: [-squareLength / 2, -squareLength / 2, 0]
    .   -   @ref SOLVEPNP_SQPNP Method is based on the paper "A Consistently Fast and Globally Optimal Solution to the
    .   Perspective-n-Point Problem" by G. Terzakis and M.Lourakis (@cite Terzakis20). It requires 3 or more points.
    .
    .
    .   The function estimates the object pose given a set of object points, their corresponding image
    .   projections, as well as the camera intrinsic matrix and the distortion coefficients, see the figure below
    .   (more precisely, the X-axis of the camera frame is pointing to the right, the Y-axis downward
    .   and the Z-axis forward).
    .
    .   ![](pnp.jpg)
    .
    .   Points expressed in the world frame \f$ \bf{X}_w \f$ are projected into the image plane \f$ \left[ u, v \right] \f$
    .   using the perspective projection model \f$ \Pi \f$ and the camera intrinsic parameters matrix \f$ \bf{A} \f$:
    .
    .   \f[
    .     \begin{align*}
    .     \begin{bmatrix}
    .     u \\
    .     v \\
    .     1
    .     \end{bmatrix} &=
    .     \bf{A} \hspace{0.1em} \Pi \hspace{0.2em} ^{c}\bf{T}_w
    .     \begin{bmatrix}
    .     X_{w} \\
    .     Y_{w} \\
    .     Z_{w} \\
    .     1
    .     \end{bmatrix} \\
    .     \begin{bmatrix}
    .     u \\
    .     v \\
    .     1
    .     \end{bmatrix} &=
    .     \begin{bmatrix}
    .     f_x & 0 & c_x \\
    .     0 & f_y & c_y \\
    .     0 & 0 & 1
    .     \end{bmatrix}
    .     \begin{bmatrix}
    .     1 & 0 & 0 & 0 \\
    .     0 & 1 & 0 & 0 \\
    .     0 & 0 & 1 & 0
    .     \end{bmatrix}
    .     \begin{bmatrix}
    .     r_{11} & r_{12} & r_{13} & t_x \\
    .     r_{21} & r_{22} & r_{23} & t_y \\
    .     r_{31} & r_{32} & r_{33} & t_z \\
    .     0 & 0 & 0 & 1
    .     \end{bmatrix}
    .     \begin{bmatrix}
    .     X_{w} \\
    .     Y_{w} \\
    .     Z_{w} \\
    .     1
    .     \end{bmatrix}
    .     \end{align*}
    .   \f]
    .
    .   The estimated pose is thus the rotation (`rvec`) and the translation (`tvec`) vectors that allow transforming
    .   a 3D point expressed in the world frame into the camera frame:
    .
    .   \f[
    .     \begin{align*}
    .     \begin{bmatrix}
    .     X_c \\
    .     Y_c \\
    .     Z_c \\
    .     1
    .     \end{bmatrix} &=
    .     \hspace{0.2em} ^{c}\bf{T}_w
    .     \begin{bmatrix}
    .     X_{w} \\
    .     Y_{w} \\
    .     Z_{w} \\
    .     1
    .     \end{bmatrix} \\
    .     \begin{bmatrix}
    .     X_c \\
    .     Y_c \\
    .     Z_c \\
    .     1
    .     \end{bmatrix} &=
    .     \begin{bmatrix}
    .     r_{11} & r_{12} & r_{13} & t_x \\
    .     r_{21} & r_{22} & r_{23} & t_y \\
    .     r_{31} & r_{32} & r_{33} & t_z \\
    .     0 & 0 & 0 & 1
    .     \end{bmatrix}
    .     \begin{bmatrix}
    .     X_{w} \\
    .     Y_{w} \\
    .     Z_{w} \\
    .     1
    .     \end{bmatrix}
    .     \end{align*}
    .   \f]
    .
    .   @note
    .      -   An example of how to use solvePnP for planar augmented reality can be found at
    .           opencv_source_code/samples/python/plane_ar.py
    .      -   If you are using Python:
    .           - Numpy array slices won't work as input because solvePnP requires contiguous
    .           arrays (enforced by the assertion using cv::Mat::checkVector() around line 55 of
    .           modules/calib3d/src/solvepnp.cpp version 2.4.9)
    .           - The P3P algorithm requires image points to be in an array of shape (N,1,2) due
    .           to its calling of cv::undistortPoints (around line 75 of modules/calib3d/src/solvepnp.cpp version 2.4.9)
    .           which requires 2-channel information.
    .           - Thus, given some data D = np.array(...) where D.shape = (N,M), in order to use a subset of
    .           it as, e.g., imagePoints, one must effectively copy it into a new array: imagePoints =
    .           np.ascontiguousarray(D[:,:2]).reshape((N,1,2))
    .      -   The methods @ref SOLVEPNP_DLS and @ref SOLVEPNP_UPNP cannot be used as the current implementations are
    .          unstable and sometimes give completely wrong results. If you pass one of these two
    .          flags, @ref SOLVEPNP_EPNP method will be used instead.
    .      -   The minimum number of points is 4 in the general case. In the case of @ref SOLVEPNP_P3P and @ref SOLVEPNP_AP3P
    .          methods, it is required to use exactly 4 points (the first 3 points are used to estimate all the solutions
    .          of the P3P problem, the last one is used to retain the best solution that minimizes the reprojection error).
    .      -   With @ref SOLVEPNP_ITERATIVE method and `useExtrinsicGuess=true`, the minimum number of points is 3 (3 points
    .          are sufficient to compute a pose but there are up to 4 solutions). The initial solution should be close to the
    .          global solution to converge.
    .      -   With @ref SOLVEPNP_IPPE input points must be >= 4 and object points must be coplanar.
    .      -   With @ref SOLVEPNP_IPPE_SQUARE this is a special case suitable for marker pose estimation.
    .          Number of input points must be 4. Object points must be defined in the following order:
    .            - point 0: [-squareLength / 2,  squareLength / 2, 0]
    .            - point 1: [ squareLength / 2,  squareLength / 2, 0]
    .            - point 2: [ squareLength / 2, -squareLength / 2, 0]
    .            - point 3: [-squareLength / 2, -squareLength / 2, 0]
    .       -  With @ref SOLVEPNP_SQPNP input points must be >= 3
    """
    ...

def solvePnPGeneric(
    objectPoints,
    imagePoints,
    cameraMatrix,
    distCoeffs,
    rvecs=...,
    tvecs=...,
    useExtrinsicGuess=...,
    flags=...,
    rvec=...,
    tvec=...,
    reprojectionError=...,
) -> Tuple[tvecs, reprojectionError]:
    """
    .   @brief Finds an object pose from 3D-2D point correspondences.
    .   This function returns a list of all the possible solutions (a solution is a <rotation vector, translation vector>
    .   couple), depending on the number of input points and the chosen method:
    .   - P3P methods (@ref SOLVEPNP_P3P, @ref SOLVEPNP_AP3P): 3 or 4 input points. Number of returned solutions can be between 0 and 4 with 3 input points.
    .   - @ref SOLVEPNP_IPPE Input points must be >= 4 and object points must be coplanar. Returns 2 solutions.
    .   - @ref SOLVEPNP_IPPE_SQUARE Special case suitable for marker pose estimation.
    .   Number of input points must be 4 and 2 solutions are returned. Object points must be defined in the following order:
    .     - point 0: [-squareLength / 2,  squareLength / 2, 0]
    .     - point 1: [ squareLength / 2,  squareLength / 2, 0]
    .     - point 2: [ squareLength / 2, -squareLength / 2, 0]
    .     - point 3: [-squareLength / 2, -squareLength / 2, 0]
    .   - for all the other flags, number of input points must be >= 4 and object points can be in any configuration.
    .   Only 1 solution is returned.
    .
    .   @param objectPoints Array of object points in the object coordinate space, Nx3 1-channel or
    .   1xN/Nx1 3-channel, where N is the number of points. vector\<Point3d\> can be also passed here.
    .   @param imagePoints Array of corresponding image points, Nx2 1-channel or 1xN/Nx1 2-channel,
    .   where N is the number of points. vector\<Point2d\> can be also passed here.
    .   @param cameraMatrix Input camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$\distcoeffs\f$. If the vector is NULL/empty, the zero distortion coefficients are
    .   assumed.
    .   @param rvecs Vector of output rotation vectors (see @ref Rodrigues ) that, together with tvecs, brings points from
    .   the model coordinate system to the camera coordinate system.
    .   @param tvecs Vector of output translation vectors.
    .   @param useExtrinsicGuess Parameter used for #SOLVEPNP_ITERATIVE. If true (1), the function uses
    .   the provided rvec and tvec values as initial approximations of the rotation and translation
    .   vectors, respectively, and further optimizes them.
    .   @param flags Method for solving a PnP problem:
    .   -   @ref SOLVEPNP_ITERATIVE Iterative method is based on a Levenberg-Marquardt optimization. In
    .   this case the function finds such a pose that minimizes reprojection error, that is the sum
    .   of squared distances between the observed projections imagePoints and the projected (using
    .   projectPoints ) objectPoints .
    .   -   @ref SOLVEPNP_P3P Method is based on the paper of X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang
    .   "Complete Solution Classification for the Perspective-Three-Point Problem" (@cite gao2003complete).
    .   In this case the function requires exactly four object and image points.
    .   -   @ref SOLVEPNP_AP3P Method is based on the paper of T. Ke, S. Roumeliotis
    .   "An Efficient Algebraic Solution to the Perspective-Three-Point Problem" (@cite Ke17).
    .   In this case the function requires exactly four object and image points.
    .   -   @ref SOLVEPNP_EPNP Method has been introduced by F.Moreno-Noguer, V.Lepetit and P.Fua in the
    .   paper "EPnP: Efficient Perspective-n-Point Camera Pose Estimation" (@cite lepetit2009epnp).
    .   -   @ref SOLVEPNP_DLS **Broken implementation. Using this flag will fallback to EPnP.** \n
    .   Method is based on the paper of Joel A. Hesch and Stergios I. Roumeliotis.
    .   "A Direct Least-Squares (DLS) Method for PnP" (@cite hesch2011direct).
    .   -   @ref SOLVEPNP_UPNP **Broken implementation. Using this flag will fallback to EPnP.** \n
    .   Method is based on the paper of A.Penate-Sanchez, J.Andrade-Cetto,
    .   F.Moreno-Noguer. "Exhaustive Linearization for Robust Camera Pose and Focal Length
    .   Estimation" (@cite penate2013exhaustive). In this case the function also estimates the parameters \f$f_x\f$ and \f$f_y\f$
    .   assuming that both have the same value. Then the cameraMatrix is updated with the estimated
    .   focal length.
    .   -   @ref SOLVEPNP_IPPE Method is based on the paper of T. Collins and A. Bartoli.
    .   "Infinitesimal Plane-Based Pose Estimation" (@cite Collins14). This method requires coplanar object points.
    .   -   @ref SOLVEPNP_IPPE_SQUARE Method is based on the paper of Toby Collins and Adrien Bartoli.
    .   "Infinitesimal Plane-Based Pose Estimation" (@cite Collins14). This method is suitable for marker pose estimation.
    .   It requires 4 coplanar object points defined in the following order:
    .     - point 0: [-squareLength / 2,  squareLength / 2, 0]
    .     - point 1: [ squareLength / 2,  squareLength / 2, 0]
    .     - point 2: [ squareLength / 2, -squareLength / 2, 0]
    .     - point 3: [-squareLength / 2, -squareLength / 2, 0]
    .   @param rvec Rotation vector used to initialize an iterative PnP refinement algorithm, when flag is @ref SOLVEPNP_ITERATIVE
    .   and useExtrinsicGuess is set to true.
    .   @param tvec Translation vector used to initialize an iterative PnP refinement algorithm, when flag is @ref SOLVEPNP_ITERATIVE
    .   and useExtrinsicGuess is set to true.
    .   @param reprojectionError Optional vector of reprojection error, that is the RMS error
    .   (\f$ \text{RMSE} = \sqrt{\frac{\sum_{i}^{N} \left ( \hat{y_i} - y_i \right )^2}{N}} \f$) between the input image points
    .   and the 3D object points projected with the estimated pose.
    .
    .   The function estimates the object pose given a set of object points, their corresponding image
    .   projections, as well as the camera intrinsic matrix and the distortion coefficients, see the figure below
    .   (more precisely, the X-axis of the camera frame is pointing to the right, the Y-axis downward
    .   and the Z-axis forward).
    .
    .   ![](pnp.jpg)
    .
    .   Points expressed in the world frame \f$ \bf{X}_w \f$ are projected into the image plane \f$ \left[ u, v \right] \f$
    .   using the perspective projection model \f$ \Pi \f$ and the camera intrinsic parameters matrix \f$ \bf{A} \f$:
    .
    .   \f[
    .     \begin{align*}
    .     \begin{bmatrix}
    .     u \\
    .     v \\
    .     1
    .     \end{bmatrix} &=
    .     \bf{A} \hspace{0.1em} \Pi \hspace{0.2em} ^{c}\bf{T}_w
    .     \begin{bmatrix}
    .     X_{w} \\
    .     Y_{w} \\
    .     Z_{w} \\
    .     1
    .     \end{bmatrix} \\
    .     \begin{bmatrix}
    .     u \\
    .     v \\
    .     1
    .     \end{bmatrix} &=
    .     \begin{bmatrix}
    .     f_x & 0 & c_x \\
    .     0 & f_y & c_y \\
    .     0 & 0 & 1
    .     \end{bmatrix}
    .     \begin{bmatrix}
    .     1 & 0 & 0 & 0 \\
    .     0 & 1 & 0 & 0 \\
    .     0 & 0 & 1 & 0
    .     \end{bmatrix}
    .     \begin{bmatrix}
    .     r_{11} & r_{12} & r_{13} & t_x \\
    .     r_{21} & r_{22} & r_{23} & t_y \\
    .     r_{31} & r_{32} & r_{33} & t_z \\
    .     0 & 0 & 0 & 1
    .     \end{bmatrix}
    .     \begin{bmatrix}
    .     X_{w} \\
    .     Y_{w} \\
    .     Z_{w} \\
    .     1
    .     \end{bmatrix}
    .     \end{align*}
    .   \f]
    .
    .   The estimated pose is thus the rotation (`rvec`) and the translation (`tvec`) vectors that allow transforming
    .   a 3D point expressed in the world frame into the camera frame:
    .
    .   \f[
    .     \begin{align*}
    .     \begin{bmatrix}
    .     X_c \\
    .     Y_c \\
    .     Z_c \\
    .     1
    .     \end{bmatrix} &=
    .     \hspace{0.2em} ^{c}\bf{T}_w
    .     \begin{bmatrix}
    .     X_{w} \\
    .     Y_{w} \\
    .     Z_{w} \\
    .     1
    .     \end{bmatrix} \\
    .     \begin{bmatrix}
    .     X_c \\
    .     Y_c \\
    .     Z_c \\
    .     1
    .     \end{bmatrix} &=
    .     \begin{bmatrix}
    .     r_{11} & r_{12} & r_{13} & t_x \\
    .     r_{21} & r_{22} & r_{23} & t_y \\
    .     r_{31} & r_{32} & r_{33} & t_z \\
    .     0 & 0 & 0 & 1
    .     \end{bmatrix}
    .     \begin{bmatrix}
    .     X_{w} \\
    .     Y_{w} \\
    .     Z_{w} \\
    .     1
    .     \end{bmatrix}
    .     \end{align*}
    .   \f]
    .
    .   @note
    .      -   An example of how to use solvePnP for planar augmented reality can be found at
    .           opencv_source_code/samples/python/plane_ar.py
    .      -   If you are using Python:
    .           - Numpy array slices won't work as input because solvePnP requires contiguous
    .           arrays (enforced by the assertion using cv::Mat::checkVector() around line 55 of
    .           modules/calib3d/src/solvepnp.cpp version 2.4.9)
    .           - The P3P algorithm requires image points to be in an array of shape (N,1,2) due
    .           to its calling of cv::undistortPoints (around line 75 of modules/calib3d/src/solvepnp.cpp version 2.4.9)
    .           which requires 2-channel information.
    .           - Thus, given some data D = np.array(...) where D.shape = (N,M), in order to use a subset of
    .           it as, e.g., imagePoints, one must effectively copy it into a new array: imagePoints =
    .           np.ascontiguousarray(D[:,:2]).reshape((N,1,2))
    .      -   The methods @ref SOLVEPNP_DLS and @ref SOLVEPNP_UPNP cannot be used as the current implementations are
    .          unstable and sometimes give completely wrong results. If you pass one of these two
    .          flags, @ref SOLVEPNP_EPNP method will be used instead.
    .      -   The minimum number of points is 4 in the general case. In the case of @ref SOLVEPNP_P3P and @ref SOLVEPNP_AP3P
    .          methods, it is required to use exactly 4 points (the first 3 points are used to estimate all the solutions
    .          of the P3P problem, the last one is used to retain the best solution that minimizes the reprojection error).
    .      -   With @ref SOLVEPNP_ITERATIVE method and `useExtrinsicGuess=true`, the minimum number of points is 3 (3 points
    .          are sufficient to compute a pose but there are up to 4 solutions). The initial solution should be close to the
    .          global solution to converge.
    .      -   With @ref SOLVEPNP_IPPE input points must be >= 4 and object points must be coplanar.
    .      -   With @ref SOLVEPNP_IPPE_SQUARE this is a special case suitable for marker pose estimation.
    .          Number of input points must be 4. Object points must be defined in the following order:
    .            - point 0: [-squareLength / 2,  squareLength / 2, 0]
    .            - point 1: [ squareLength / 2,  squareLength / 2, 0]
    .            - point 2: [ squareLength / 2, -squareLength / 2, 0]
    .            - point 3: [-squareLength / 2, -squareLength / 2, 0]
    """
    ...

def solvePnPRansac(
    objectPoints,
    imagePoints,
    cameraMatrix,
    distCoeffs,
    rvec=...,
    tvec=...,
    useExtrinsicGuess=...,
    iterationsCount=...,
    reprojectionError=...,
    confidence=...,
    inliers=...,
    flags=...,
) -> Tuple[tvec, inliers]:
    """
    .   @brief Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.
    .
    .   @param objectPoints Array of object points in the object coordinate space, Nx3 1-channel or
    .   1xN/Nx1 3-channel, where N is the number of points. vector\<Point3d\> can be also passed here.
    .   @param imagePoints Array of corresponding image points, Nx2 1-channel or 1xN/Nx1 2-channel,
    .   where N is the number of points. vector\<Point2d\> can be also passed here.
    .   @param cameraMatrix Input camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$\distcoeffs\f$. If the vector is NULL/empty, the zero distortion coefficients are
    .   assumed.
    .   @param rvec Output rotation vector (see @ref Rodrigues ) that, together with tvec, brings points from
    .   the model coordinate system to the camera coordinate system.
    .   @param tvec Output translation vector.
    .   @param useExtrinsicGuess Parameter used for @ref SOLVEPNP_ITERATIVE. If true (1), the function uses
    .   the provided rvec and tvec values as initial approximations of the rotation and translation
    .   vectors, respectively, and further optimizes them.
    .   @param iterationsCount Number of iterations.
    .   @param reprojectionError Inlier threshold value used by the RANSAC procedure. The parameter value
    .   is the maximum allowed distance between the observed and computed point projections to consider it
    .   an inlier.
    .   @param confidence The probability that the algorithm produces a useful result.
    .   @param inliers Output vector that contains indices of inliers in objectPoints and imagePoints .
    .   @param flags Method for solving a PnP problem (see @ref solvePnP ).
    .
    .   The function estimates an object pose given a set of object points, their corresponding image
    .   projections, as well as the camera intrinsic matrix and the distortion coefficients. This function finds such
    .   a pose that minimizes reprojection error, that is, the sum of squared distances between the observed
    .   projections imagePoints and the projected (using @ref projectPoints ) objectPoints. The use of RANSAC
    .   makes the function resistant to outliers.
    .
    .   @note
    .      -   An example of how to use solvePNPRansac for object detection can be found at
    .           opencv_source_code/samples/cpp/tutorial_code/calib3d/real_time_pose_estimation/
    .      -   The default method used to estimate the camera pose for the Minimal Sample Sets step
    .          is #SOLVEPNP_EPNP. Exceptions are:
    .            - if you choose #SOLVEPNP_P3P or #SOLVEPNP_AP3P, these methods will be used.
    .            - if the number of input points is equal to 4, #SOLVEPNP_P3P is used.
    .      -   The method used to estimate the camera pose using all the inliers is defined by the
    .          flags parameters unless it is equal to #SOLVEPNP_P3P or #SOLVEPNP_AP3P. In this case,
    .          the method #SOLVEPNP_EPNP will be used instead.



    solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec=..., tvec=..., inliers=..., params=...) -> retval, cameraMatrix, rvec, tvec, inliers
    .
    """
    ...

def solvePnPRefineLM(
    objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria=...
) -> Tuple[rvec, tvec]:
    """
    .   @brief Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame
    .   to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.
    .
    .   @param objectPoints Array of object points in the object coordinate space, Nx3 1-channel or 1xN/Nx1 3-channel,
    .   where N is the number of points. vector\<Point3d\> can also be passed here.
    .   @param imagePoints Array of corresponding image points, Nx2 1-channel or 1xN/Nx1 2-channel,
    .   where N is the number of points. vector\<Point2d\> can also be passed here.
    .   @param cameraMatrix Input camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$\distcoeffs\f$. If the vector is NULL/empty, the zero distortion coefficients are
    .   assumed.
    .   @param rvec Input/Output rotation vector (see @ref Rodrigues ) that, together with tvec, brings points from
    .   the model coordinate system to the camera coordinate system. Input values are used as an initial solution.
    .   @param tvec Input/Output translation vector. Input values are used as an initial solution.
    .   @param criteria Criteria when to stop the Levenberg-Marquard iterative algorithm.
    .
    .   The function refines the object pose given at least 3 object points, their corresponding image
    .   projections, an initial solution for the rotation and translation vector,
    .   as well as the camera intrinsic matrix and the distortion coefficients.
    .   The function minimizes the projection error with respect to the rotation and the translation vectors, according
    .   to a Levenberg-Marquardt iterative minimization @cite Madsen04 @cite Eade13 process.
    """
    ...

def solvePnPRefineVVS(
    objectPoints,
    imagePoints,
    cameraMatrix,
    distCoeffs,
    rvec,
    tvec,
    criteria=...,
    VVSlambda_=...,
) -> Tuple[rvec, tvec]:
    """
    .   @brief Refine a pose (the translation and the rotation that transform a 3D point expressed in the object coordinate frame
    .   to the camera coordinate frame) from a 3D-2D point correspondences and starting from an initial solution.
    .
    .   @param objectPoints Array of object points in the object coordinate space, Nx3 1-channel or 1xN/Nx1 3-channel,
    .   where N is the number of points. vector\<Point3d\> can also be passed here.
    .   @param imagePoints Array of corresponding image points, Nx2 1-channel or 1xN/Nx1 2-channel,
    .   where N is the number of points. vector\<Point2d\> can also be passed here.
    .   @param cameraMatrix Input camera intrinsic matrix \f$\cameramatrix{A}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$\distcoeffs\f$. If the vector is NULL/empty, the zero distortion coefficients are
    .   assumed.
    .   @param rvec Input/Output rotation vector (see @ref Rodrigues ) that, together with tvec, brings points from
    .   the model coordinate system to the camera coordinate system. Input values are used as an initial solution.
    .   @param tvec Input/Output translation vector. Input values are used as an initial solution.
    .   @param criteria Criteria when to stop the Levenberg-Marquard iterative algorithm.
    .   @param VVSlambda Gain for the virtual visual servoing control law, equivalent to the \f$\alpha\f$
    .   gain in the Damped Gauss-Newton formulation.
    .
    .   The function refines the object pose given at least 3 object points, their corresponding image
    .   projections, an initial solution for the rotation and translation vector,
    .   as well as the camera intrinsic matrix and the distortion coefficients.
    .   The function minimizes the projection error with respect to the rotation and the translation vectors, using a
    .   virtual visual servoing (VVS) @cite Chaumette06 @cite Marchand16 scheme.
    """
    ...

def solvePoly(coeffs, roots=..., maxIters=...) -> Tuple[retval, roots]:
    """
    .   @brief Finds the real or complex roots of a polynomial equation.
    .
    .   The function cv::solvePoly finds real and complex roots of a polynomial equation:
    .   \f[\texttt{coeffs} [n] x^{n} +  \texttt{coeffs} [n-1] x^{n-1} + ... +  \texttt{coeffs} [1] x +  \texttt{coeffs} [0] = 0\f]
    .   @param coeffs array of polynomial coefficients.
    .   @param roots output (complex) array of roots.
    .   @param maxIters maximum number of iterations the algorithm does.
    """
    ...

def sort(src, flags, dst=...) -> dst:
    """
    .   @brief Sorts each row or each column of a matrix.
    .
    .   The function cv::sort sorts each matrix row or each matrix column in
    .   ascending or descending order. So you should pass two operation flags to
    .   get desired behaviour. If you want to sort matrix rows or columns
    .   lexicographically, you can use STL std::sort generic function with the
    .   proper comparison predicate.
    .
    .   @param src input single-channel array.
    .   @param dst output array of the same size and type as src.
    .   @param flags operation flags, a combination of #SortFlags
    .   @sa sortIdx, randShuffle
    """
    ...

def sortIdx(src, flags, dst=...) -> dst:
    """
    .   @brief Sorts each row or each column of a matrix.
    .
    .   The function cv::sortIdx sorts each matrix row or each matrix column in the
    .   ascending or descending order. So you should pass two operation flags to
    .   get desired behaviour. Instead of reordering the elements themselves, it
    .   stores the indices of sorted elements in the output array. For example:
    .   @code
    .       Mat A = Mat::eye(3,3,CV_32F), B;
    .       sortIdx(A, B, SORT_EVERY_ROW + SORT_ASCENDING);
    .       // B will probably contain
    .       // (because of equal elements in A some permutations are possible):
    .       // [[1, 2, 0], [0, 2, 1], [0, 1, 2]]
    .   @endcode
    .   @param src input single-channel array.
    .   @param dst output integer array of the same size as src.
    .   @param flags operation flags that could be a combination of cv::SortFlags
    .   @sa sort, randShuffle
    """
    ...

def spatialGradient(src, dx=..., dy=..., ksize=..., borderType=...) -> Tuple[dx, dy]:
    """
    .   @brief Calculates the first order image derivative in both x and y using a Sobel operator
    .
    .   Equivalent to calling:
    .
    .   @code
    .   Sobel( src, dx, CV_16SC1, 1, 0, 3 );
    .   Sobel( src, dy, CV_16SC1, 0, 1, 3 );
    .   @endcode
    .
    .   @param src input image.
    .   @param dx output image with first-order derivative in x.
    .   @param dy output image with first-order derivative in y.
    .   @param ksize size of Sobel kernel. It must be 3.
    .   @param borderType pixel extrapolation method, see #BorderTypes.
    .                     Only #BORDER_DEFAULT=#BORDER_REFLECT_101 and #BORDER_REPLICATE are supported.
    .
    .   @sa Sobel
    """
    ...

def split(m, mv=...) -> mv:
    """
    .   @overload
    .   @param m input multi-channel array.
    .   @param mv output vector of arrays; the arrays themselves are reallocated, if needed.
    """
    ...

def sqrBoxFilter(
    src, ddepth, ksize, dst=..., anchor=..., normalize=..., borderType=...
) -> dst:
    """
    .   @brief Calculates the normalized sum of squares of the pixel values overlapping the filter.
    .
    .   For every pixel \f$ (x, y) \f$ in the source image, the function calculates the sum of squares of those neighboring
    .   pixel values which overlap the filter placed over the pixel \f$ (x, y) \f$.
    .
    .   The unnormalized square box filter can be useful in computing local image statistics such as the the local
    .   variance and standard deviation around the neighborhood of a pixel.
    .
    .   @param src input image
    .   @param dst output image of the same size and type as _src
    .   @param ddepth the output image depth (-1 to use src.depth())
    .   @param ksize kernel size
    .   @param anchor kernel anchor point. The default value of Point(-1, -1) denotes that the anchor is at the kernel
    .   center.
    .   @param normalize flag, specifying whether the kernel is to be normalized by it's area or not.
    .   @param borderType border mode used to extrapolate pixels outside of the image, see #BorderTypes. #BORDER_WRAP is not supported.
    .   @sa boxFilter
    """
    ...

def sqrt(src, dst=...) -> dst:
    """
    .   @brief Calculates a square root of array elements.
    .
    .   The function cv::sqrt calculates a square root of each input array element.
    .   In case of multi-channel arrays, each channel is processed
    .   independently. The accuracy is approximately the same as of the built-in
    .   std::sqrt .
    .   @param src input floating-point array.
    .   @param dst output array of the same size and type as src.
    """
    ...

def startWindowThread() -> retval:
    """
    .
    """
    ...

def stereoCalibrate(
    objectPoints,
    imagePoints1,
    imagePoints2,
    cameraMatrix1,
    distCoeffs1,
    cameraMatrix2,
    distCoeffs2,
    imageSize,
    R=...,
    T=...,
    E=...,
    F=...,
    flags=...,
    criteria=...,
) -> Tuple[E, F]:
    """
    .
    """
    ...

def stereoCalibrateExtended(
    objectPoints,
    imagePoints1,
    imagePoints2,
    cameraMatrix1,
    distCoeffs1,
    cameraMatrix2,
    distCoeffs2,
    imageSize,
    R,
    T,
    E=...,
    F=...,
    perViewErrors=...,
    flags=...,
    criteria=...,
) -> Tuple[F, perViewErrors]:
    """
    .   @brief Calibrates a stereo camera set up. This function finds the intrinsic parameters
    .   for each of the two cameras and the extrinsic parameters between the two cameras.
    .
    .   @param objectPoints Vector of vectors of the calibration pattern points. The same structure as
    .   in @ref calibrateCamera. For each pattern view, both cameras need to see the same object
    .   points. Therefore, objectPoints.size(), imagePoints1.size(), and imagePoints2.size() need to be
    .   equal as well as objectPoints[i].size(), imagePoints1[i].size(), and imagePoints2[i].size() need to
    .   be equal for each i.
    .   @param imagePoints1 Vector of vectors of the projections of the calibration pattern points,
    .   observed by the first camera. The same structure as in @ref calibrateCamera.
    .   @param imagePoints2 Vector of vectors of the projections of the calibration pattern points,
    .   observed by the second camera. The same structure as in @ref calibrateCamera.
    .   @param cameraMatrix1 Input/output camera intrinsic matrix for the first camera, the same as in
    .   @ref calibrateCamera. Furthermore, for the stereo case, additional flags may be used, see below.
    .   @param distCoeffs1 Input/output vector of distortion coefficients, the same as in
    .   @ref calibrateCamera.
    .   @param cameraMatrix2 Input/output second camera intrinsic matrix for the second camera. See description for
    .   cameraMatrix1.
    .   @param distCoeffs2 Input/output lens distortion coefficients for the second camera. See
    .   description for distCoeffs1.
    .   @param imageSize Size of the image used only to initialize the camera intrinsic matrices.
    .   @param R Output rotation matrix. Together with the translation vector T, this matrix brings
    .   points given in the first camera's coordinate system to points in the second camera's
    .   coordinate system. In more technical terms, the tuple of R and T performs a change of basis
    .   from the first camera's coordinate system to the second camera's coordinate system. Due to its
    .   duality, this tuple is equivalent to the position of the first camera with respect to the
    .   second camera coordinate system.
    .   @param T Output translation vector, see description above.
    .   @param E Output essential matrix.
    .   @param F Output fundamental matrix.
    .   @param perViewErrors Output vector of the RMS re-projection error estimated for each pattern view.
    .   @param flags Different flags that may be zero or a combination of the following values:
    .   -   @ref CALIB_FIX_INTRINSIC Fix cameraMatrix? and distCoeffs? so that only R, T, E, and F
    .   matrices are estimated.
    .   -   @ref CALIB_USE_INTRINSIC_GUESS Optimize some or all of the intrinsic parameters
    .   according to the specified flags. Initial values are provided by the user.
    .   -   @ref CALIB_USE_EXTRINSIC_GUESS R and T contain valid initial values that are optimized further.
    .   Otherwise R and T are initialized to the median value of the pattern views (each dimension separately).
    .   -   @ref CALIB_FIX_PRINCIPAL_POINT Fix the principal points during the optimization.
    .   -   @ref CALIB_FIX_FOCAL_LENGTH Fix \f$f^{(j)}_x\f$ and \f$f^{(j)}_y\f$ .
    .   -   @ref CALIB_FIX_ASPECT_RATIO Optimize \f$f^{(j)}_y\f$ . Fix the ratio \f$f^{(j)}_x/f^{(j)}_y\f$
    .   .
    .   -   @ref CALIB_SAME_FOCAL_LENGTH Enforce \f$f^{(0)}_x=f^{(1)}_x\f$ and \f$f^{(0)}_y=f^{(1)}_y\f$ .
    .   -   @ref CALIB_ZERO_TANGENT_DIST Set tangential distortion coefficients for each camera to
    .   zeros and fix there.
    .   -   @ref CALIB_FIX_K1,..., @ref CALIB_FIX_K6 Do not change the corresponding radial
    .   distortion coefficient during the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set,
    .   the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.
    .   -   @ref CALIB_RATIONAL_MODEL Enable coefficients k4, k5, and k6. To provide the backward
    .   compatibility, this extra flag should be explicitly specified to make the calibration
    .   function use the rational model and return 8 coefficients. If the flag is not set, the
    .   function computes and returns only 5 distortion coefficients.
    .   -   @ref CALIB_THIN_PRISM_MODEL Coefficients s1, s2, s3 and s4 are enabled. To provide the
    .   backward compatibility, this extra flag should be explicitly specified to make the
    .   calibration function use the thin prism model and return 12 coefficients. If the flag is not
    .   set, the function computes and returns only 5 distortion coefficients.
    .   -   @ref CALIB_FIX_S1_S2_S3_S4 The thin prism distortion coefficients are not changed during
    .   the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the
    .   supplied distCoeffs matrix is used. Otherwise, it is set to 0.
    .   -   @ref CALIB_TILTED_MODEL Coefficients tauX and tauY are enabled. To provide the
    .   backward compatibility, this extra flag should be explicitly specified to make the
    .   calibration function use the tilted sensor model and return 14 coefficients. If the flag is not
    .   set, the function computes and returns only 5 distortion coefficients.
    .   -   @ref CALIB_FIX_TAUX_TAUY The coefficients of the tilted sensor model are not changed during
    .   the optimization. If @ref CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the
    .   supplied distCoeffs matrix is used. Otherwise, it is set to 0.
    .   @param criteria Termination criteria for the iterative optimization algorithm.
    .
    .   The function estimates the transformation between two cameras making a stereo pair. If one computes
    .   the poses of an object relative to the first camera and to the second camera,
    .   ( \f$R_1\f$,\f$T_1\f$ ) and (\f$R_2\f$,\f$T_2\f$), respectively, for a stereo camera where the
    .   relative position and orientation between the two cameras are fixed, then those poses definitely
    .   relate to each other. This means, if the relative position and orientation (\f$R\f$,\f$T\f$) of the
    .   two cameras is known, it is possible to compute (\f$R_2\f$,\f$T_2\f$) when (\f$R_1\f$,\f$T_1\f$) is
    .   given. This is what the described function does. It computes (\f$R\f$,\f$T\f$) such that:
    .
    .   \f[R_2=R R_1\f]
    .   \f[T_2=R T_1 + T.\f]
    .
    .   Therefore, one can compute the coordinate representation of a 3D point for the second camera's
    .   coordinate system when given the point's coordinate representation in the first camera's coordinate
    .   system:
    .
    .   \f[\begin{bmatrix}
    .   X_2 \\
    .   Y_2 \\
    .   Z_2 \\
    .   1
    .   \end{bmatrix} = \begin{bmatrix}
    .   R & T \\
    .   0 & 1
    .   \end{bmatrix} \begin{bmatrix}
    .   X_1 \\
    .   Y_1 \\
    .   Z_1 \\
    .   1
    .   \end{bmatrix}.\f]
    .
    .
    .   Optionally, it computes the essential matrix E:
    .
    .   \f[E= \vecthreethree{0}{-T_2}{T_1}{T_2}{0}{-T_0}{-T_1}{T_0}{0} R\f]
    .
    .   where \f$T_i\f$ are components of the translation vector \f$T\f$ : \f$T=[T_0, T_1, T_2]^T\f$ .
    .   And the function can also compute the fundamental matrix F:
    .
    .   \f[F = cameraMatrix2^{-T}\cdot E \cdot cameraMatrix1^{-1}\f]
    .
    .   Besides the stereo-related information, the function can also perform a full calibration of each of
    .   the two cameras. However, due to the high dimensionality of the parameter space and noise in the
    .   input data, the function can diverge from the correct solution. If the intrinsic parameters can be
    .   estimated with high accuracy for each of the cameras individually (for example, using
    .   calibrateCamera ), you are recommended to do so and then pass @ref CALIB_FIX_INTRINSIC flag to the
    .   function along with the computed intrinsic parameters. Otherwise, if all the parameters are
    .   estimated at once, it makes sense to restrict some parameters, for example, pass
    .    @ref CALIB_SAME_FOCAL_LENGTH and @ref CALIB_ZERO_TANGENT_DIST flags, which is usually a
    .   reasonable assumption.
    .
    .   Similarly to calibrateCamera, the function minimizes the total re-projection error for all the
    .   points in all the available views from both cameras. The function returns the final value of the
    .   re-projection error.
    """
    ...

def stereoRectify(
    cameraMatrix1,
    distCoeffs1,
    cameraMatrix2,
    distCoeffs2,
    imageSize,
    R,
    T,
    R1=...,
    R2=...,
    P1=...,
    P2=...,
    Q=...,
    flags=...,
    alpha=...,
    newImageSize=...,
) -> Tuple[1, validPixROI2]:
    """
    .   @brief Computes rectification transforms for each head of a calibrated stereo camera.
    .
    .   @param cameraMatrix1 First camera intrinsic matrix.
    .   @param distCoeffs1 First camera distortion parameters.
    .   @param cameraMatrix2 Second camera intrinsic matrix.
    .   @param distCoeffs2 Second camera distortion parameters.
    .   @param imageSize Size of the image used for stereo calibration.
    .   @param R Rotation matrix from the coordinate system of the first camera to the second camera,
    .   see @ref stereoCalibrate.
    .   @param T Translation vector from the coordinate system of the first camera to the second camera,
    .   see @ref stereoCalibrate.
    .   @param R1 Output 3x3 rectification transform (rotation matrix) for the first camera. This matrix
    .   brings points given in the unrectified first camera's coordinate system to points in the rectified
    .   first camera's coordinate system. In more technical terms, it performs a change of basis from the
    .   unrectified first camera's coordinate system to the rectified first camera's coordinate system.
    .   @param R2 Output 3x3 rectification transform (rotation matrix) for the second camera. This matrix
    .   brings points given in the unrectified second camera's coordinate system to points in the rectified
    .   second camera's coordinate system. In more technical terms, it performs a change of basis from the
    .   unrectified second camera's coordinate system to the rectified second camera's coordinate system.
    .   @param P1 Output 3x4 projection matrix in the new (rectified) coordinate systems for the first
    .   camera, i.e. it projects points given in the rectified first camera coordinate system into the
    .   rectified first camera's image.
    .   @param P2 Output 3x4 projection matrix in the new (rectified) coordinate systems for the second
    .   camera, i.e. it projects points given in the rectified first camera coordinate system into the
    .   rectified second camera's image.
    .   @param Q Output \f$4 \times 4\f$ disparity-to-depth mapping matrix (see @ref reprojectImageTo3D).
    .   @param flags Operation flags that may be zero or @ref CALIB_ZERO_DISPARITY . If the flag is set,
    .   the function makes the principal points of each camera have the same pixel coordinates in the
    .   rectified views. And if the flag is not set, the function may still shift the images in the
    .   horizontal or vertical direction (depending on the orientation of epipolar lines) to maximize the
    .   useful image area.
    .   @param alpha Free scaling parameter. If it is -1 or absent, the function performs the default
    .   scaling. Otherwise, the parameter should be between 0 and 1. alpha=0 means that the rectified
    .   images are zoomed and shifted so that only valid pixels are visible (no black areas after
    .   rectification). alpha=1 means that the rectified image is decimated and shifted so that all the
    .   pixels from the original images from the cameras are retained in the rectified images (no source
    .   image pixels are lost). Any intermediate value yields an intermediate result between
    .   those two extreme cases.
    .   @param newImageSize New image resolution after rectification. The same size should be passed to
    .   initUndistortRectifyMap (see the stereo_calib.cpp sample in OpenCV samples directory). When (0,0)
    .   is passed (default), it is set to the original imageSize . Setting it to a larger value can help you
    .   preserve details in the original image, especially when there is a big radial distortion.
    .   @param validPixROI1 Optional output rectangles inside the rectified images where all the pixels
    .   are valid. If alpha=0 , the ROIs cover the whole images. Otherwise, they are likely to be smaller
    .   (see the picture below).
    .   @param validPixROI2 Optional output rectangles inside the rectified images where all the pixels
    .   are valid. If alpha=0 , the ROIs cover the whole images. Otherwise, they are likely to be smaller
    .   (see the picture below).
    .
    .   The function computes the rotation matrices for each camera that (virtually) make both camera image
    .   planes the same plane. Consequently, this makes all the epipolar lines parallel and thus simplifies
    .   the dense stereo correspondence problem. The function takes the matrices computed by stereoCalibrate
    .   as input. As output, it provides two rotation matrices and also two projection matrices in the new
    .   coordinates. The function distinguishes the following two cases:
    .
    .   -   **Horizontal stereo**: the first and the second camera views are shifted relative to each other
    .       mainly along the x-axis (with possible small vertical shift). In the rectified images, the
    .       corresponding epipolar lines in the left and right cameras are horizontal and have the same
    .       y-coordinate. P1 and P2 look like:
    .
    .       \f[\texttt{P1} = \begin{bmatrix}
    .                           f & 0 & cx_1 & 0 \\
    .                           0 & f & cy & 0 \\
    .                           0 & 0 & 1 & 0
    .                        \end{bmatrix}\f]
    .
    .       \f[\texttt{P2} = \begin{bmatrix}
    .                           f & 0 & cx_2 & T_x*f \\
    .                           0 & f & cy & 0 \\
    .                           0 & 0 & 1 & 0
    .                        \end{bmatrix} ,\f]
    .
    .       where \f$T_x\f$ is a horizontal shift between the cameras and \f$cx_1=cx_2\f$ if
    .       @ref CALIB_ZERO_DISPARITY is set.
    .
    .   -   **Vertical stereo**: the first and the second camera views are shifted relative to each other
    .       mainly in the vertical direction (and probably a bit in the horizontal direction too). The epipolar
    .       lines in the rectified images are vertical and have the same x-coordinate. P1 and P2 look like:
    .
    .       \f[\texttt{P1} = \begin{bmatrix}
    .                           f & 0 & cx & 0 \\
    .                           0 & f & cy_1 & 0 \\
    .                           0 & 0 & 1 & 0
    .                        \end{bmatrix}\f]
    .
    .       \f[\texttt{P2} = \begin{bmatrix}
    .                           f & 0 & cx & 0 \\
    .                           0 & f & cy_2 & T_y*f \\
    .                           0 & 0 & 1 & 0
    .                        \end{bmatrix},\f]
    .
    .       where \f$T_y\f$ is a vertical shift between the cameras and \f$cy_1=cy_2\f$ if
    .       @ref CALIB_ZERO_DISPARITY is set.
    .
    .   As you can see, the first three columns of P1 and P2 will effectively be the new "rectified" camera
    .   matrices. The matrices, together with R1 and R2 , can then be passed to initUndistortRectifyMap to
    .   initialize the rectification map for each camera.
    .
    .   See below the screenshot from the stereo_calib.cpp sample. Some red horizontal lines pass through
    .   the corresponding image regions. This means that the images are well rectified, which is what most
    .   stereo correspondence algorithms rely on. The green rectangles are roi1 and roi2 . You see that
    .   their interiors are all valid pixels.
    .
    .   ![image](pics/stereo_undistort.jpg)
    """
    ...

def stereoRectifyUncalibrated(
    points1, points2, F, imgSize, H1=..., H2=..., threshold=...
) -> Tuple[1, H2]:
    """
    .   @brief Computes a rectification transform for an uncalibrated stereo camera.
    .
    .   @param points1 Array of feature points in the first image.
    .   @param points2 The corresponding points in the second image. The same formats as in
    .   findFundamentalMat are supported.
    .   @param F Input fundamental matrix. It can be computed from the same set of point pairs using
    .   findFundamentalMat .
    .   @param imgSize Size of the image.
    .   @param H1 Output rectification homography matrix for the first image.
    .   @param H2 Output rectification homography matrix for the second image.
    .   @param threshold Optional threshold used to filter out the outliers. If the parameter is greater
    .   than zero, all the point pairs that do not comply with the epipolar geometry (that is, the points
    .   for which \f$|\texttt{points2[i]}^T*\texttt{F}*\texttt{points1[i]}|>\texttt{threshold}\f$ ) are
    .   rejected prior to computing the homographies. Otherwise, all the points are considered inliers.
    .
    .   The function computes the rectification transformations without knowing intrinsic parameters of the
    .   cameras and their relative position in the space, which explains the suffix "uncalibrated". Another
    .   related difference from stereoRectify is that the function outputs not the rectification
    .   transformations in the object (3D) space, but the planar perspective transformations encoded by the
    .   homography matrices H1 and H2 . The function implements the algorithm @cite Hartley99 .
    .
    .   @note
    .      While the algorithm does not need to know the intrinsic parameters of the cameras, it heavily
    .       depends on the epipolar geometry. Therefore, if the camera lenses have a significant distortion,
    .       it would be better to correct it before computing the fundamental matrix and calling this
    .       function. For example, distortion coefficients can be estimated for each head of stereo camera
    .       separately by using calibrateCamera . Then, the images can be corrected using undistort , or
    .       just the point coordinates can be corrected with undistortPoints .
    """
    ...

def stylization(src, dst=..., sigma_s=..., sigma_r=...) -> dst:
    """
    .   @brief Stylization aims to produce digital imagery with a wide variety of effects not focused on
    .   photorealism. Edge-aware filters are ideal for stylization, as they can abstract regions of low
    .   contrast while preserving, or enhancing, high-contrast features.
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param dst Output image with the same size and type as src.
    .   @param sigma_s %Range between 0 to 200.
    .   @param sigma_r %Range between 0 to 1.
    """
    ...

def subtract(src1, src2, dst=..., mask=..., dtype=...) -> dst:
    """
    .   @brief Calculates the per-element difference between two arrays or array and a scalar.
    .
    .   The function subtract calculates:
    .   - Difference between two arrays, when both input arrays have the same size and the same number of
    .   channels:
    .       \f[\texttt{dst}(I) =  \texttt{saturate} ( \texttt{src1}(I) -  \texttt{src2}(I)) \quad \texttt{if mask}(I) \ne0\f]
    .   - Difference between an array and a scalar, when src2 is constructed from Scalar or has the same
    .   number of elements as `src1.channels()`:
    .       \f[\texttt{dst}(I) =  \texttt{saturate} ( \texttt{src1}(I) -  \texttt{src2} ) \quad \texttt{if mask}(I) \ne0\f]
    .   - Difference between a scalar and an array, when src1 is constructed from Scalar or has the same
    .   number of elements as `src2.channels()`:
    .       \f[\texttt{dst}(I) =  \texttt{saturate} ( \texttt{src1} -  \texttt{src2}(I) ) \quad \texttt{if mask}(I) \ne0\f]
    .   - The reverse difference between a scalar and an array in the case of `SubRS`:
    .       \f[\texttt{dst}(I) =  \texttt{saturate} ( \texttt{src2} -  \texttt{src1}(I) ) \quad \texttt{if mask}(I) \ne0\f]
    .   where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each
    .   channel is processed independently.
    .
    .   The first function in the list above can be replaced with matrix expressions:
    .   @code{.cpp}
    .       dst = src1 - src2;
    .       dst -= src1; // equivalent to subtract(dst, src1, dst);
    .   @endcode
    .   The input arrays and the output array can all have the same or different depths. For example, you
    .   can subtract to 8-bit unsigned arrays and store the difference in a 16-bit signed array. Depth of
    .   the output array is determined by dtype parameter. In the second and third cases above, as well as
    .   in the first case, when src1.depth() == src2.depth(), dtype can be set to the default -1. In this
    .   case the output array will have the same depth as the input array, be it src1, src2 or both.
    .   @note Saturation is not applied when the output array has the depth CV_32S. You may even get
    .   result of an incorrect sign in the case of overflow.
    .   @param src1 first input array or a scalar.
    .   @param src2 second input array or a scalar.
    .   @param dst output array of the same size and the same number of channels as the input array.
    .   @param mask optional operation mask; this is an 8-bit single channel array that specifies elements
    .   of the output array to be changed.
    .   @param dtype optional depth of the output array
    .   @sa  add, addWeighted, scaleAdd, Mat::convertTo
    """
    ...

def sumElems(src) -> retval:
    """
    .   @brief Calculates the sum of array elements.
    .
    .   The function cv::sum calculates and returns the sum of array elements,
    .   independently for each channel.
    .   @param src input array that must have from 1 to 4 channels.
    .   @sa  countNonZero, mean, meanStdDev, norm, minMaxLoc, reduce
    """
    ...

def textureFlattening(
    src, mask, dst=..., low_threshold=..., high_threshold=..., kernel_size=...
) -> dst:
    """
    .   @brief By retaining only the gradients at edge locations, before integrating with the Poisson solver, one
    .   washes out the texture of the selected region, giving its contents a flat aspect. Here Canny Edge %Detector is used.
    .
    .   @param src Input 8-bit 3-channel image.
    .   @param mask Input 8-bit 1 or 3-channel image.
    .   @param dst Output image with the same size and type as src.
    .   @param low_threshold %Range from 0 to 100.
    .   @param high_threshold Value \> 100.
    .   @param kernel_size The size of the Sobel kernel to be used.
    .
    .   @note
    .   The algorithm assumes that the color of the source image is close to that of the destination. This
    .   assumption means that when the colors don't match, the source image color gets tinted toward the
    .   color of the destination image.
    """
    ...

def threshold(
    src: ndarray, thresh: float, maxval: float, type: int, dst: ndarray = ...
) -> Tuple[float, ndarray]:
    """
    .   @brief Applies a fixed-level threshold to each array element.
    .
    .   The function applies fixed-level thresholding to a multiple-channel array. The function is typically
    .   used to get a bi-level (binary) image out of a grayscale image ( #compare could be also used for
    .   this purpose) or for removing a noise, that is, filtering out pixels with too small or too large
    .   values. There are several types of thresholding supported by the function. They are determined by
    .   type parameter.
    .
    .   Also, the special values #THRESH_OTSU or #THRESH_TRIANGLE may be combined with one of the
    .   above values. In these cases, the function determines the optimal threshold value using the Otsu's
    .   or Triangle algorithm and uses it instead of the specified thresh.
    .
    .   @note Currently, the Otsu's and Triangle methods are implemented only for 8-bit single-channel images.
    .
    .   @param src input array (multiple-channel, 8-bit or 32-bit floating point).
    .   @param dst output array of the same size  and type and the same number of channels as src.
    .   @param thresh threshold value.
    .   @param maxval maximum value to use with the #THRESH_BINARY and #THRESH_BINARY_INV thresholding
    .   types.
    .   @param type thresholding type (see #ThresholdTypes).
    .   @return the computed threshold value if Otsu's or Triangle methods used.
    .
    .   @sa  adaptiveThreshold, findContours, compare, min, max
    """
    ...

def trace(mtx) -> retval:
    """
    .   @brief Returns the trace of a matrix.
    .
    .   The function cv::trace returns the sum of the diagonal elements of the
    .   matrix mtx .
    .   \f[\mathrm{tr} ( \texttt{mtx} ) =  \sum _i  \texttt{mtx} (i,i)\f]
    .   @param mtx input matrix.
    """
    ...

def transform(src, m, dst=...) -> dst:
    """
    .   @brief Performs the matrix transformation of every array element.
    .
    .   The function cv::transform performs the matrix transformation of every
    .   element of the array src and stores the results in dst :
    .   \f[\texttt{dst} (I) =  \texttt{m} \cdot \texttt{src} (I)\f]
    .   (when m.cols=src.channels() ), or
    .   \f[\texttt{dst} (I) =  \texttt{m} \cdot [ \texttt{src} (I); 1]\f]
    .   (when m.cols=src.channels()+1 )
    .
    .   Every element of the N -channel array src is interpreted as N -element
    .   vector that is transformed using the M x N or M x (N+1) matrix m to
    .   M-element vector - the corresponding element of the output array dst .
    .
    .   The function may be used for geometrical transformation of
    .   N -dimensional points, arbitrary linear color space transformation (such
    .   as various kinds of RGB to YUV transforms), shuffling the image
    .   channels, and so forth.
    .   @param src input array that must have as many channels (1 to 4) as
    .   m.cols or m.cols-1.
    .   @param dst output array of the same size and depth as src; it has as
    .   many channels as m.rows.
    .   @param m transformation 2x2 or 2x3 floating-point matrix.
    .   @sa perspectiveTransform, getAffineTransform, estimateAffine2D, warpAffine, warpPerspective
    """
    ...

def transpose(src, dst=...) -> dst:
    """
    .   @brief Transposes a matrix.
    .
    .   The function cv::transpose transposes the matrix src :
    .   \f[\texttt{dst} (i,j) =  \texttt{src} (j,i)\f]
    .   @note No complex conjugation is done in case of a complex matrix. It
    .   should be done separately if needed.
    .   @param src input array.
    .   @param dst output array of the same type as src.
    """
    ...

def triangulatePoints(
    projMatr1, projMatr2, projPoints1, projPoints2, points4D=...
) -> points4D:
    """
    .   @brief This function reconstructs 3-dimensional points (in homogeneous coordinates) by using
    .   their observations with a stereo camera.
    .
    .   @param projMatr1 3x4 projection matrix of the first camera, i.e. this matrix projects 3D points
    .   given in the world's coordinate system into the first image.
    .   @param projMatr2 3x4 projection matrix of the second camera, i.e. this matrix projects 3D points
    .   given in the world's coordinate system into the second image.
    .   @param projPoints1 2xN array of feature points in the first image. In the case of the c++ version,
    .   it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1.
    .   @param projPoints2 2xN array of corresponding points in the second image. In the case of the c++
    .   version, it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1.
    .   @param points4D 4xN array of reconstructed points in homogeneous coordinates. These points are
    .   returned in the world's coordinate system.
    .
    .   @note
    .      Keep in mind that all input data should be of float type in order for this function to work.
    .
    .   @note
    .      If the projection matrices from @ref stereoRectify are used, then the returned points are
    .      represented in the first camera's rectified coordinate system.
    .
    .   @sa
    .      reprojectImageTo3D
    """
    ...

def undistort(src, cameraMatrix, distCoeffs, dst=..., newCameraMatrix=...) -> dst:
    """
    .   @brief Transforms an image to compensate for lens distortion.
    .
    .   The function transforms an image to compensate radial and tangential lens distortion.
    .
    .   The function is simply a combination of #initUndistortRectifyMap (with unity R ) and #remap
    .   (with bilinear interpolation). See the former function for details of the transformation being
    .   performed.
    .
    .   Those pixels in the destination image, for which there is no correspondent pixels in the source
    .   image, are filled with zeros (black color).
    .
    .   A particular subset of the source image that will be visible in the corrected image can be regulated
    .   by newCameraMatrix. You can use #getOptimalNewCameraMatrix to compute the appropriate
    .   newCameraMatrix depending on your requirements.
    .
    .   The camera matrix and the distortion parameters can be determined using #calibrateCamera. If
    .   the resolution of images is different from the resolution used at the calibration stage, \f$f_x,
    .   f_y, c_x\f$ and \f$c_y\f$ need to be scaled accordingly, while the distortion coefficients remain
    .   the same.
    .
    .   @param src Input (distorted) image.
    .   @param dst Output (corrected) image that has the same size and type as src .
    .   @param cameraMatrix Input camera matrix \f$A = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$(k_1, k_2, p_1, p_2, k_3=..., k_4=..., k_5, k_6, s_1=..., s_2, s_3, s_4, \tau_x=..., \tau_y)\f$
    .   of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.
    .   @param newCameraMatrix Camera matrix of the distorted image. By default, it is the same as
    .   cameraMatrix but you may additionally scale and shift the result by using a different matrix.
    """
    ...

def undistortPoints(src, cameraMatrix, distCoeffs, dst=..., R=..., P=...) -> dst:
    """
    .   @brief Computes the ideal point coordinates from the observed point coordinates.
    .
    .   The function is similar to #undistort and #initUndistortRectifyMap but it operates on a
    .   sparse set of points instead of a raster image. Also the function performs a reverse transformation
    .   to projectPoints. In case of a 3D object, it does not reconstruct its 3D coordinates, but for a
    .   planar object, it does, up to a translation vector, if the proper R is specified.
    .
    .   For each observed point coordinate \f$(u, v)\f$ the function computes:
    .   \f[
    .   \begin{array}{l}
    .   x^{"}  \leftarrow (u - c_x)/f_x  \\
    .   y^{"}  \leftarrow (v - c_y)/f_y  \\
    .   (x',y') = undistort(x^{"},y^{"}, \texttt{distCoeffs}) \\
    .   {[X\,Y\,W]} ^T  \leftarrow R*[x' \, y' \, 1]^T  \\
    .   x  \leftarrow X/W  \\
    .   y  \leftarrow Y/W  \\
    .   \text{only performed if P is specified:} \\
    .   u'  \leftarrow x {f'}_x + {c'}_x  \\
    .   v'  \leftarrow y {f'}_y + {c'}_y
    .   \end{array}
    .   \f]
    .
    .   where *undistort* is an approximate iterative algorithm that estimates the normalized original
    .   point coordinates out of the normalized distorted point coordinates ("normalized" means that the
    .   coordinates do not depend on the camera matrix).
    .
    .   The function can be used for both a stereo camera head or a monocular camera (when R is empty).
    .   @param src Observed point coordinates, 2xN/Nx2 1-channel or 1xN/Nx1 2-channel (CV_32FC2 or CV_64FC2) (or
    .   vector\<Point2f\> ).
    .   @param dst Output ideal point coordinates (1xN/Nx1 2-channel or vector\<Point2f\> ) after undistortion and reverse perspective
    .   transformation. If matrix P is identity or omitted, dst will contain normalized point coordinates.
    .   @param cameraMatrix Camera matrix \f$\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\f$ .
    .   @param distCoeffs Input vector of distortion coefficients
    .   \f$(k_1, k_2, p_1, p_2, k_3=..., k_4=..., k_5, k_6, s_1=..., s_2, s_3, s_4, \tau_x=..., \tau_y)\f$
    .   of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.
    .   @param R Rectification transformation in the object space (3x3 matrix). R1 or R2 computed by
    .   #stereoRectify can be passed here. If the matrix is empty, the identity transformation is used.
    .   @param P New camera matrix (3x3) or new projection matrix (3x4) \f$\begin{bmatrix} {f'}_x & 0 & {c'}_x & t_x \\ 0 & {f'}_y & {c'}_y & t_y \\ 0 & 0 & 1 & t_z \end{bmatrix}\f$. P1 or P2 computed by
    .   #stereoRectify can be passed here. If the matrix is empty, the identity new camera matrix is used.
    """
    ...

def undistortPointsIter(src, cameraMatrix, distCoeffs, R, P, criteria, dst=...) -> dst:
    """
    .   @overload
    .       @note Default version of #undistortPoints does 5 iterations to compute undistorted points.
    """
    ...

def useOpenVX() -> retval:
    """
    .
    """
    ...

def useOptimized() -> retval:
    """
    .   @brief Returns the status of optimized code usage.
    .
    .   The function returns true if the optimized code is enabled. Otherwise, it returns false.
    """
    ...

def validateDisparity(
    disparity, cost, minDisparity, numberOfDisparities, disp12MaxDisp=...
) -> disparity:
    """
    .
    """
    ...

def vconcat(src, dst=...) -> dst:
    """
    .   @overload
    .    @code{.cpp}
    .       std::vector<cv::Mat> matrices = { cv::Mat(1, 4, CV_8UC1, cv::Scalar(1)),
    .                                         cv::Mat(1, 4, CV_8UC1, cv::Scalar(2)),
    .                                         cv::Mat(1, 4, CV_8UC1, cv::Scalar(3)),};
    .
    .       cv::Mat out;
    .       cv::vconcat( matrices, out );
    .       //out:
    .       //[1,   1,   1,   1;
    .       // 2,   2,   2,   2;
    .       // 3,   3,   3,   3]
    .    @endcode
    .    @param src input array or vector of matrices. all of the matrices must have the same number of cols and the same depth
    .    @param dst output array. It has the same number of cols and depth as the src, and the sum of rows of the src.
    .   same depth.
    """
    ...

def waitKey(delay: float = ...) -> Union[Text, Literal[-1]]:
    """
    .   @brief Waits for a pressed key.
    .
    .   The function waitKey waits for a key event infinitely (when \f$\texttt{delay}\leq 0\f$ ) or for delay
    .   milliseconds, when it is positive. Since the OS has a minimum time between switching threads, the
    .   function will not wait exactly delay ms, it will wait at least delay ms, depending on what else is
    .   running on your computer at that time. It returns the code of the pressed key or -1 if no key was
    .   pressed before the specified time had elapsed. To check for a key press but not wait for it, use
    .   #pollKey.
    .
    .   @note The functions #waitKey and #pollKey are the only methods in HighGUI that can fetch and handle
    .   GUI events, so one of them needs to be called periodically for normal event processing unless
    .   HighGUI is used within an environment that takes care of event processing.
    .
    .   @note The function only works if there is at least one HighGUI window created and the window is
    .   active. If there are several HighGUI windows, any of them can be active.
    .
    .   @param delay Delay in milliseconds. 0 is the special value that means "forever".
    """
    ...

def waitKeyEx(delay=...) -> retval:
    """
    .   @brief Similar to #waitKey, but returns full key code.
    .
    .   @note
    .
    .   Key code is implementation specific and depends on used backend: QT/GTK/Win32/etc
    """
    ...

def warpAffine(
    src, M, dsize, dst=..., flags=..., borderMode=..., borderValue=...
) -> dst:
    """
    .   @brief Applies an affine transformation to an image.
    .
    .   The function warpAffine transforms the source image using the specified matrix:
    .
    .   \f[\texttt{dst} (x,y) =  \texttt{src} ( \texttt{M} _{11} x +  \texttt{M} _{12} y +  \texttt{M} _{13}, \texttt{M} _{21} x +  \texttt{M} _{22} y +  \texttt{M} _{23})\f]
    .
    .   when the flag #WARP_INVERSE_MAP is set. Otherwise, the transformation is first inverted
    .   with #invertAffineTransform and then put in the formula above instead of M. The function cannot
    .   operate in-place.
    .
    .   @param src input image.
    .   @param dst output image that has the size dsize and the same type as src .
    .   @param M \f$2\times 3\f$ transformation matrix.
    .   @param dsize size of the output image.
    .   @param flags combination of interpolation methods (see #InterpolationFlags) and the optional
    .   flag #WARP_INVERSE_MAP that means that M is the inverse transformation (
    .   \f$\texttt{dst}\rightarrow\texttt{src}\f$ ).
    .   @param borderMode pixel extrapolation method (see #BorderTypes); when
    .   borderMode=#BORDER_TRANSPARENT, it means that the pixels in the destination image corresponding to
    .   the "outliers" in the source image are not modified by the function.
    .   @param borderValue value used in case of a constant border; by default, it is 0.
    .
    .   @sa  warpPerspective, resize, remap, getRectSubPix, transform
    """
    ...

def warpPerspective(
    src, M, dsize, dst=..., flags=..., borderMode=..., borderValue=...
) -> dst:
    """
    .   @brief Applies a perspective transformation to an image.
    .
    .   The function warpPerspective transforms the source image using the specified matrix:
    .
    .   \f[\texttt{dst} (x,y) =  \texttt{src} \left ( \frac{M_{11} x + M_{12} y + M_{13}}{M_{31} x + M_{32} y + M_{33}} ,
    .        \frac{M_{21} x + M_{22} y + M_{23}}{M_{31} x + M_{32} y + M_{33}} \right )\f]
    .
    .   when the flag #WARP_INVERSE_MAP is set. Otherwise, the transformation is first inverted with invert
    .   and then put in the formula above instead of M. The function cannot operate in-place.
    .
    .   @param src input image.
    .   @param dst output image that has the size dsize and the same type as src .
    .   @param M \f$3\times 3\f$ transformation matrix.
    .   @param dsize size of the output image.
    .   @param flags combination of interpolation methods (#INTER_LINEAR or #INTER_NEAREST) and the
    .   optional flag #WARP_INVERSE_MAP, that sets M as the inverse transformation (
    .   \f$\texttt{dst}\rightarrow\texttt{src}\f$ ).
    .   @param borderMode pixel extrapolation method (#BORDER_CONSTANT or #BORDER_REPLICATE).
    .   @param borderValue value used in case of a constant border; by default, it equals 0.
    .
    .   @sa  warpAffine, resize, remap, getRectSubPix, perspectiveTransform
    """
    ...

def warpPolar(src, dsize, center, maxRadius, flags, dst=...) -> dst:
    """
    .   \brief Remaps an image to polar or semilog-polar coordinates space
    .
    .   @anchor polar_remaps_reference_image
    .   ![Polar remaps reference](pics/polar_remap_doc.png)
    .
    .   Transform the source image using the following transformation:
    .   \f[
    .   dst(\rho , \phi ) = src(x,y)
    .   \f]
    .
    .   where
    .   \f[
    .   \begin{array}{l}
    .   \vec{I} = (x - center.x, \;y - center.y) \\
    .   \phi = Kangle \cdot \texttt{angle} (\vec{I}) \\
    .   \rho = \left\{\begin{matrix}
    .   Klin \cdot \texttt{magnitude} (\vec{I}) & default \\
    .   Klog \cdot log_e(\texttt{magnitude} (\vec{I})) & if \; semilog \\
    .   \end{matrix}\right.
    .   \end{array}
    .   \f]
    .
    .   and
    .   \f[
    .   \begin{array}{l}
    .   Kangle = dsize.height / 2\Pi \\
    .   Klin = dsize.width / maxRadius \\
    .   Klog = dsize.width / log_e(maxRadius) \\
    .   \end{array}
    .   \f]
    .
    .
    .   \par Linear vs semilog mapping
    .
    .   Polar mapping can be linear or semi-log. Add one of #WarpPolarMode to `flags` to specify the polar mapping mode.
    .
    .   Linear is the default mode.
    .
    .   The semilog mapping emulates the human "foveal" vision that permit very high acuity on the line of sight (central vision)
    .   in contrast to peripheral vision where acuity is minor.
    .
    .   \par Option on `dsize`:
    .
    .   - if both values in `dsize <=0 ` (default),
    .   the destination image will have (almost) same area of source bounding circle:
    .   \f[\begin{array}{l}
    .   dsize.area  \leftarrow (maxRadius^2 \cdot \Pi) \\
    .   dsize.width = \texttt{cvRound}(maxRadius) \\
    .   dsize.height = \texttt{cvRound}(maxRadius \cdot \Pi) \\
    .   \end{array}\f]
    .
    .
    .   - if only `dsize.height <= 0`,
    .   the destination image area will be proportional to the bounding circle area but scaled by `Kx * Kx`:
    .   \f[\begin{array}{l}
    .   dsize.height = \texttt{cvRound}(dsize.width \cdot \Pi) \\
    .   \end{array}
    .   \f]
    .
    .   - if both values in `dsize > 0 `,
    .   the destination image will have the given size therefore the area of the bounding circle will be scaled to `dsize`.
    .
    .
    .   \par Reverse mapping
    .
    .   You can get reverse mapping adding #WARP_INVERSE_MAP to `flags`
    .   \snippet polar_transforms.cpp InverseMap
    .
    .   In addiction, to calculate the original coordinate from a polar mapped coordinate \f$(rho, phi)->(x, y)\f$:
    .   \snippet polar_transforms.cpp InverseCoordinate
    .
    .   @param src Source image.
    .   @param dst Destination image. It will have same type as src.
    .   @param dsize The destination image size (see description for valid options).
    .   @param center The transformation center.
    .   @param maxRadius The radius of the bounding circle to transform. It determines the inverse magnitude scale parameter too.
    .   @param flags A combination of interpolation methods, #InterpolationFlags + #WarpPolarMode.
    .               - Add #WARP_POLAR_LINEAR to select linear polar mapping (default)
    .               - Add #WARP_POLAR_LOG to select semilog polar mapping
    .               - Add #WARP_INVERSE_MAP for reverse mapping.
    .   @note
    .   -  The function can not operate in-place.
    .   -  To calculate magnitude and angle in degrees #cartToPolar is used internally thus angles are measured from 0 to 360 with accuracy about 0.3 degrees.
    .   -  This function uses #remap. Due to current implementation limitations the size of an input and output images should be less than 32767x32767.
    .
    .   @sa cv::remap
    """
    ...

def watershed(image, markers) -> markers:
    """
    .   @brief Performs a marker-based image segmentation using the watershed algorithm.
    .
    .   The function implements one of the variants of watershed, non-parametric marker-based segmentation
    .   algorithm, described in @cite Meyer92 .
    .
    .   Before passing the image to the function, you have to roughly outline the desired regions in the
    .   image markers with positive (\>0) indices. So, every region is represented as one or more connected
    .   components with the pixel values 1, 2, 3, and so on. Such markers can be retrieved from a binary
    .   mask using #findContours and #drawContours (see the watershed.cpp demo). The markers are "seeds" of
    .   the future image regions. All the other pixels in markers , whose relation to the outlined regions
    .   is not known and should be defined by the algorithm, should be set to 0's. In the function output,
    .   each pixel in markers is set to a value of the "seed" components or to -1 at boundaries between the
    .   regions.
    .
    .   @note Any two neighbor connected components are not necessarily separated by a watershed boundary
    .   (-1's pixels); for example, they can touch each other in the initial marker image passed to the
    .   function.
    .
    .   @param image Input 8-bit 3-channel image.
    .   @param markers Input/output 32-bit single-channel image (map) of markers. It should have the same
    .   size as image .
    .
    .   @sa findContours
    """
    ...

def writeOpticalFlow(path, flow) -> retval:
    """
    .   @brief Write a .flo to disk
    .
    .    @param path Path to the file to be written
    .    @param flow Flow field to be stored
    .
    .    The function stores a flow field in a file, returns true on success, false otherwise.
    .    The flow field must be a 2-channel, floating-point matrix (CV_32FC2). First channel corresponds
    .    to the flow in the horizontal direction (u), second - vertical (v).
    """
    ...

ACCESS_FAST: int = 67108864

ACCESS_MASK: int = 50331648

ACCESS_READ: int = 16777216

ACCESS_RW: int = 50331648

ACCESS_WRITE: int = 33554432

ADAPTIVE_THRESH_GAUSSIAN_C: int = 1

ADAPTIVE_THRESH_MEAN_C: int = 0

AGAST_FEATURE_DETECTOR_AGAST_5_8: int = 0

AGAST_FEATURE_DETECTOR_AGAST_7_12D: int = 1

AGAST_FEATURE_DETECTOR_AGAST_7_12S: int = 2

AGAST_FEATURE_DETECTOR_NONMAX_SUPPRESSION: int = 10001

AGAST_FEATURE_DETECTOR_OAST_9_16: int = 3

AGAST_FEATURE_DETECTOR_THRESHOLD: int = 10000

AKAZE_DESCRIPTOR_KAZE: int = 3

AKAZE_DESCRIPTOR_KAZE_UPRIGHT: int = 2

AKAZE_DESCRIPTOR_MLDB: int = 5

AKAZE_DESCRIPTOR_MLDB_UPRIGHT: int = 4

AgastFeatureDetector_AGAST_5_8: int = 0

AgastFeatureDetector_AGAST_7_12d: int = 1

AgastFeatureDetector_AGAST_7_12s: int = 2

AgastFeatureDetector_NONMAX_SUPPRESSION: int = 10001

AgastFeatureDetector_OAST_9_16: int = 3

AgastFeatureDetector_THRESHOLD: int = 10000

BORDER_CONSTANT: int = 0

BORDER_DEFAULT: int = 4

BORDER_ISOLATED: int = 16

BORDER_REFLECT: int = 2

BORDER_REFLECT101: int = 4

BORDER_REFLECT_101: int = 4

BORDER_REPLICATE: int = 1

BORDER_TRANSPARENT: int = 5

BORDER_WRAP: int = 3

CALIB_CB_ACCURACY: int = 32

CALIB_CB_ADAPTIVE_THRESH: int = 1

CALIB_CB_ASYMMETRIC_GRID: int = 2

CALIB_CB_CLUSTERING: int = 4

CALIB_CB_EXHAUSTIVE: int = 16

CALIB_CB_FAST_CHECK: int = 8

CALIB_CB_FILTER_QUADS: int = 4

CALIB_CB_LARGER: int = 64

CALIB_CB_MARKER: int = 128

CALIB_CB_NORMALIZE_IMAGE: int = 2

CALIB_CB_SYMMETRIC_GRID: int = 1

CALIB_FIX_ASPECT_RATIO: int = 2

CALIB_FIX_FOCAL_LENGTH: int = 16

CALIB_FIX_INTRINSIC: int = 256

CALIB_FIX_K1: int = 32

CALIB_FIX_K2: int = 64

CALIB_FIX_K3: int = 128

CALIB_FIX_K4: int = 2048

CALIB_FIX_K5: int = 4096

CALIB_FIX_K6: int = 8192

CALIB_FIX_PRINCIPAL_POINT: int = 4

CALIB_FIX_S1_S2_S3_S4: int = 65536

CALIB_FIX_TANGENT_DIST: int = 2097152

CALIB_FIX_TAUX_TAUY: int = 524288

CALIB_HAND_EYE_ANDREFF: int = 3

CALIB_HAND_EYE_DANIILIDIS: int = 4

CALIB_HAND_EYE_HORAUD: int = 2

CALIB_HAND_EYE_PARK: int = 1

CALIB_HAND_EYE_TSAI: int = 0

CALIB_NINTRINSIC: int = 18

CALIB_RATIONAL_MODEL: int = 16384

CALIB_ROBOT_WORLD_HAND_EYE_LI: int = 1

CALIB_ROBOT_WORLD_HAND_EYE_SHAH: int = 0

CALIB_SAME_FOCAL_LENGTH: int = 512

CALIB_THIN_PRISM_MODEL: int = 32768

CALIB_TILTED_MODEL: int = 262144

CALIB_USE_EXTRINSIC_GUESS: int = 4194304

CALIB_USE_INTRINSIC_GUESS: int = 1

CALIB_USE_LU: int = 131072

CALIB_USE_QR: int = 1048576

CALIB_ZERO_DISPARITY: int = 1024

CALIB_ZERO_TANGENT_DIST: int = 8

CAP_ANDROID: int = 1000

CAP_ANY: int = 0

CAP_ARAVIS: int = 2100

CAP_AVFOUNDATION: int = 1200

CAP_CMU1394: int = 300

CAP_DC1394: int = 300

CAP_DSHOW: int = 700

CAP_FFMPEG: int = 1900

CAP_FIREWARE: int = 300

CAP_FIREWIRE: int = 300

CAP_GIGANETIX: int = 1300

CAP_GPHOTO2: int = 1700

CAP_GSTREAMER: int = 1800

CAP_IEEE1394: int = 300

CAP_IMAGES: int = 2000

CAP_INTELPERC: int = 1500

CAP_INTELPERC_DEPTH_GENERATOR: int = 536870912

CAP_INTELPERC_DEPTH_MAP: int = 0

CAP_INTELPERC_GENERATORS_MASK: int = 939524096

CAP_INTELPERC_IMAGE: int = 3

CAP_INTELPERC_IMAGE_GENERATOR: int = 268435456

CAP_INTELPERC_IR_GENERATOR: int = 134217728

CAP_INTELPERC_IR_MAP: int = 2

CAP_INTELPERC_UVDEPTH_MAP: int = 1

CAP_INTEL_MFX: int = 2300

CAP_MSMF: int = 1400

CAP_OPENCV_MJPEG: int = 2200

CAP_OPENNI: int = 900

CAP_OPENNI2: int = 1600

CAP_OPENNI2_ASTRA: int = 1620

CAP_OPENNI2_ASUS: int = 1610

CAP_OPENNI_ASUS: int = 910

CAP_OPENNI_BGR_IMAGE: int = 5

CAP_OPENNI_DEPTH_GENERATOR: int = -2147483648

CAP_OPENNI_DEPTH_GENERATOR_BASELINE: int = -2147483546

CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH: int = -2147483545

CAP_OPENNI_DEPTH_GENERATOR_PRESENT: int = -2147483539

CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION: int = -2147483544

CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON: int = -2147483544

CAP_OPENNI_DEPTH_MAP: int = 0

CAP_OPENNI_DISPARITY_MAP: int = 2

CAP_OPENNI_DISPARITY_MAP_32F: int = 3

CAP_OPENNI_GENERATORS_MASK: int = -536870912

CAP_OPENNI_GRAY_IMAGE: int = 6

CAP_OPENNI_IMAGE_GENERATOR: int = 1073741824

CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE: int = 1073741924

CAP_OPENNI_IMAGE_GENERATOR_PRESENT: int = 1073741933

CAP_OPENNI_IR_GENERATOR: int = 536870912

CAP_OPENNI_IR_GENERATOR_PRESENT: int = 536871021

CAP_OPENNI_IR_IMAGE: int = 7

CAP_OPENNI_POINT_CLOUD_MAP: int = 1

CAP_OPENNI_QVGA_30HZ: int = 3

CAP_OPENNI_QVGA_60HZ: int = 4

CAP_OPENNI_SXGA_15HZ: int = 1

CAP_OPENNI_SXGA_30HZ: int = 2

CAP_OPENNI_VALID_DEPTH_MASK: int = 4

CAP_OPENNI_VGA_30HZ: int = 0

CAP_PROP_APERTURE: int = 17008

CAP_PROP_ARAVIS_AUTOTRIGGER: int = 600

CAP_PROP_AUTOFOCUS: int = 39

CAP_PROP_AUTO_EXPOSURE: int = 21

CAP_PROP_AUTO_WB: int = 44

CAP_PROP_BACKEND: int = 42

CAP_PROP_BACKLIGHT: int = 32

CAP_PROP_BITRATE: int = 47

CAP_PROP_BRIGHTNESS: int = 10

CAP_PROP_BUFFERSIZE: int = 38

CAP_PROP_CHANNEL: int = 43

CAP_PROP_CODEC_PIXEL_FORMAT: int = 46

CAP_PROP_CONTRAST: int = 11

CAP_PROP_CONVERT_RGB: int = 16

CAP_PROP_DC1394_MAX: int = 31

CAP_PROP_DC1394_MODE_AUTO: int = -2

CAP_PROP_DC1394_MODE_MANUAL: int = -3

CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO: int = -1

CAP_PROP_DC1394_OFF: int = -4

CAP_PROP_EXPOSURE: int = 15

CAP_PROP_EXPOSUREPROGRAM: int = 17009

CAP_PROP_FOCUS: int = 28

CAP_PROP_FORMAT: int = 8

CAP_PROP_FOURCC: int = 6

CAP_PROP_FPS: int = 5

CAP_PROP_FRAME_COUNT: int = 7

CAP_PROP_FRAME_HEIGHT: int = 4

CAP_PROP_FRAME_WIDTH: int = 3

CAP_PROP_GAIN: int = 14

CAP_PROP_GAMMA: int = 22

CAP_PROP_GIGA_FRAME_HEIGH_MAX: int = 10004

CAP_PROP_GIGA_FRAME_OFFSET_X: int = 10001

CAP_PROP_GIGA_FRAME_OFFSET_Y: int = 10002

CAP_PROP_GIGA_FRAME_SENS_HEIGH: int = 10006

CAP_PROP_GIGA_FRAME_SENS_WIDTH: int = 10005

CAP_PROP_GIGA_FRAME_WIDTH_MAX: int = 10003

CAP_PROP_GPHOTO2_COLLECT_MSGS: int = 17005

CAP_PROP_GPHOTO2_FLUSH_MSGS: int = 17006

CAP_PROP_GPHOTO2_PREVIEW: int = 17001

CAP_PROP_GPHOTO2_RELOAD_CONFIG: int = 17003

CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE: int = 17004

CAP_PROP_GPHOTO2_WIDGET_ENUMERATE: int = 17002

CAP_PROP_GSTREAMER_QUEUE_LENGTH: int = 200

CAP_PROP_GUID: int = 29

CAP_PROP_HUE: int = 13

CAP_PROP_HW_ACCELERATION: int = 50

CAP_PROP_HW_DEVICE: int = 51

CAP_PROP_IMAGES_BASE: int = 18000

CAP_PROP_IMAGES_LAST: int = 19000

CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD: int = 11005

CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ: int = 11006

CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT: int = 11007

CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE: int = 11003

CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE: int = 11004

CAP_PROP_INTELPERC_PROFILE_COUNT: int = 11001

CAP_PROP_INTELPERC_PROFILE_IDX: int = 11002

CAP_PROP_IOS_DEVICE_EXPOSURE: int = 9002

CAP_PROP_IOS_DEVICE_FLASH: int = 9003

CAP_PROP_IOS_DEVICE_FOCUS: int = 9001

CAP_PROP_IOS_DEVICE_TORCH: int = 9005

CAP_PROP_IOS_DEVICE_WHITEBALANCE: int = 9004

CAP_PROP_IRIS: int = 36

CAP_PROP_ISO_SPEED: int = 30

CAP_PROP_MODE: int = 9

CAP_PROP_MONOCHROME: int = 19

CAP_PROP_OPENNI2_MIRROR: int = 111

CAP_PROP_OPENNI2_SYNC: int = 110

CAP_PROP_OPENNI_APPROX_FRAME_SYNC: int = 105

CAP_PROP_OPENNI_BASELINE: int = 102

CAP_PROP_OPENNI_CIRCLE_BUFFER: int = 107

CAP_PROP_OPENNI_FOCAL_LENGTH: int = 103

CAP_PROP_OPENNI_FRAME_MAX_DEPTH: int = 101

CAP_PROP_OPENNI_GENERATOR_PRESENT: int = 109

CAP_PROP_OPENNI_MAX_BUFFER_SIZE: int = 106

CAP_PROP_OPENNI_MAX_TIME_DURATION: int = 108

CAP_PROP_OPENNI_OUTPUT_MODE: int = 100

CAP_PROP_OPENNI_REGISTRATION: int = 104

CAP_PROP_OPENNI_REGISTRATION_ON: int = 104

CAP_PROP_ORIENTATION_AUTO: int = 49

CAP_PROP_ORIENTATION_META: int = 48

CAP_PROP_PAN: int = 33

CAP_PROP_POS_AVI_RATIO: int = 2

CAP_PROP_POS_FRAMES: int = 1

CAP_PROP_POS_MSEC: int = 0

CAP_PROP_PVAPI_BINNINGX: int = 304

CAP_PROP_PVAPI_BINNINGY: int = 305

CAP_PROP_PVAPI_DECIMATIONHORIZONTAL: int = 302

CAP_PROP_PVAPI_DECIMATIONVERTICAL: int = 303

CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE: int = 301

CAP_PROP_PVAPI_MULTICASTIP: int = 300

CAP_PROP_PVAPI_PIXELFORMAT: int = 306

CAP_PROP_RECTIFICATION: int = 18

CAP_PROP_ROLL: int = 35

CAP_PROP_SAR_DEN: int = 41

CAP_PROP_SAR_NUM: int = 40

CAP_PROP_SATURATION: int = 12

CAP_PROP_SETTINGS: int = 37

CAP_PROP_SHARPNESS: int = 20

CAP_PROP_SPEED: int = 17007

CAP_PROP_TEMPERATURE: int = 23

CAP_PROP_TILT: int = 34

CAP_PROP_TRIGGER: int = 24

CAP_PROP_TRIGGER_DELAY: int = 25

CAP_PROP_VIEWFINDER: int = 17010

CAP_PROP_WB_TEMPERATURE: int = 45

CAP_PROP_WHITE_BALANCE_BLUE_U: int = 17

CAP_PROP_WHITE_BALANCE_RED_V: int = 26

CAP_PROP_XI_ACQ_BUFFER_SIZE: int = 548

CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT: int = 549

CAP_PROP_XI_ACQ_FRAME_BURST_COUNT: int = 499

CAP_PROP_XI_ACQ_TIMING_MODE: int = 538

CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT: int = 552

CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE: int = 550

CAP_PROP_XI_AEAG: int = 415

CAP_PROP_XI_AEAG_LEVEL: int = 419

CAP_PROP_XI_AEAG_ROI_HEIGHT: int = 442

CAP_PROP_XI_AEAG_ROI_OFFSET_X: int = 439

CAP_PROP_XI_AEAG_ROI_OFFSET_Y: int = 440

CAP_PROP_XI_AEAG_ROI_WIDTH: int = 441

CAP_PROP_XI_AE_MAX_LIMIT: int = 417

CAP_PROP_XI_AG_MAX_LIMIT: int = 418

CAP_PROP_XI_APPLY_CMS: int = 471

CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION: int = 573

CAP_PROP_XI_AUTO_WB: int = 414

CAP_PROP_XI_AVAILABLE_BANDWIDTH: int = 539

CAP_PROP_XI_BINNING_HORIZONTAL: int = 429

CAP_PROP_XI_BINNING_PATTERN: int = 430

CAP_PROP_XI_BINNING_SELECTOR: int = 427

CAP_PROP_XI_BINNING_VERTICAL: int = 428

CAP_PROP_XI_BPC: int = 445

CAP_PROP_XI_BUFFERS_QUEUE_SIZE: int = 551

CAP_PROP_XI_BUFFER_POLICY: int = 540

CAP_PROP_XI_CC_MATRIX_00: int = 479

CAP_PROP_XI_CC_MATRIX_01: int = 480

CAP_PROP_XI_CC_MATRIX_02: int = 481

CAP_PROP_XI_CC_MATRIX_03: int = 482

CAP_PROP_XI_CC_MATRIX_10: int = 483

CAP_PROP_XI_CC_MATRIX_11: int = 484

CAP_PROP_XI_CC_MATRIX_12: int = 485

CAP_PROP_XI_CC_MATRIX_13: int = 486

CAP_PROP_XI_CC_MATRIX_20: int = 487

CAP_PROP_XI_CC_MATRIX_21: int = 488

CAP_PROP_XI_CC_MATRIX_22: int = 489

CAP_PROP_XI_CC_MATRIX_23: int = 490

CAP_PROP_XI_CC_MATRIX_30: int = 491

CAP_PROP_XI_CC_MATRIX_31: int = 492

CAP_PROP_XI_CC_MATRIX_32: int = 493

CAP_PROP_XI_CC_MATRIX_33: int = 494

CAP_PROP_XI_CHIP_TEMP: int = 468

CAP_PROP_XI_CMS: int = 470

CAP_PROP_XI_COLOR_FILTER_ARRAY: int = 475

CAP_PROP_XI_COLUMN_FPN_CORRECTION: int = 555

CAP_PROP_XI_COOLING: int = 466

CAP_PROP_XI_COUNTER_SELECTOR: int = 536

CAP_PROP_XI_COUNTER_VALUE: int = 537

CAP_PROP_XI_DATA_FORMAT: int = 401

CAP_PROP_XI_DEBOUNCE_EN: int = 507

CAP_PROP_XI_DEBOUNCE_POL: int = 510

CAP_PROP_XI_DEBOUNCE_T0: int = 508

CAP_PROP_XI_DEBOUNCE_T1: int = 509

CAP_PROP_XI_DEBUG_LEVEL: int = 572

CAP_PROP_XI_DECIMATION_HORIZONTAL: int = 433

CAP_PROP_XI_DECIMATION_PATTERN: int = 434

CAP_PROP_XI_DECIMATION_SELECTOR: int = 431

CAP_PROP_XI_DECIMATION_VERTICAL: int = 432

CAP_PROP_XI_DEFAULT_CC_MATRIX: int = 495

CAP_PROP_XI_DEVICE_MODEL_ID: int = 521

CAP_PROP_XI_DEVICE_RESET: int = 554

CAP_PROP_XI_DEVICE_SN: int = 522

CAP_PROP_XI_DOWNSAMPLING: int = 400

CAP_PROP_XI_DOWNSAMPLING_TYPE: int = 426

CAP_PROP_XI_EXPOSURE: int = 421

CAP_PROP_XI_EXPOSURE_BURST_COUNT: int = 422

CAP_PROP_XI_EXP_PRIORITY: int = 416

CAP_PROP_XI_FFS_ACCESS_KEY: int = 583

CAP_PROP_XI_FFS_FILE_ID: int = 594

CAP_PROP_XI_FFS_FILE_SIZE: int = 580

CAP_PROP_XI_FRAMERATE: int = 535

CAP_PROP_XI_FREE_FFS_SIZE: int = 581

CAP_PROP_XI_GAIN: int = 424

CAP_PROP_XI_GAIN_SELECTOR: int = 423

CAP_PROP_XI_GAMMAC: int = 477

CAP_PROP_XI_GAMMAY: int = 476

CAP_PROP_XI_GPI_LEVEL: int = 408

CAP_PROP_XI_GPI_MODE: int = 407

CAP_PROP_XI_GPI_SELECTOR: int = 406

CAP_PROP_XI_GPO_MODE: int = 410

CAP_PROP_XI_GPO_SELECTOR: int = 409

CAP_PROP_XI_HDR: int = 559

CAP_PROP_XI_HDR_KNEEPOINT_COUNT: int = 560

CAP_PROP_XI_HDR_T1: int = 561

CAP_PROP_XI_HDR_T2: int = 562

CAP_PROP_XI_HEIGHT: int = 452

CAP_PROP_XI_HOUS_BACK_SIDE_TEMP: int = 590

CAP_PROP_XI_HOUS_TEMP: int = 469

CAP_PROP_XI_HW_REVISION: int = 571

CAP_PROP_XI_IMAGE_BLACK_LEVEL: int = 565

CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH: int = 462

CAP_PROP_XI_IMAGE_DATA_FORMAT: int = 435

CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA: int = 529

CAP_PROP_XI_IMAGE_IS_COLOR: int = 474

CAP_PROP_XI_IMAGE_PAYLOAD_SIZE: int = 530

CAP_PROP_XI_IS_COOLED: int = 465

CAP_PROP_XI_IS_DEVICE_EXIST: int = 547

CAP_PROP_XI_KNEEPOINT1: int = 563

CAP_PROP_XI_KNEEPOINT2: int = 564

CAP_PROP_XI_LED_MODE: int = 412

CAP_PROP_XI_LED_SELECTOR: int = 411

CAP_PROP_XI_LENS_APERTURE_VALUE: int = 512

CAP_PROP_XI_LENS_FEATURE: int = 518

CAP_PROP_XI_LENS_FEATURE_SELECTOR: int = 517

CAP_PROP_XI_LENS_FOCAL_LENGTH: int = 516

CAP_PROP_XI_LENS_FOCUS_DISTANCE: int = 515

CAP_PROP_XI_LENS_FOCUS_MOVE: int = 514

CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE: int = 513

CAP_PROP_XI_LENS_MODE: int = 511

CAP_PROP_XI_LIMIT_BANDWIDTH: int = 459

CAP_PROP_XI_LUT_EN: int = 541

CAP_PROP_XI_LUT_INDEX: int = 542

CAP_PROP_XI_LUT_VALUE: int = 543

CAP_PROP_XI_MANUAL_WB: int = 413

CAP_PROP_XI_OFFSET_X: int = 402

CAP_PROP_XI_OFFSET_Y: int = 403

CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH: int = 461

CAP_PROP_XI_OUTPUT_DATA_PACKING: int = 463

CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE: int = 464

CAP_PROP_XI_RECENT_FRAME: int = 553

CAP_PROP_XI_REGION_MODE: int = 595

CAP_PROP_XI_REGION_SELECTOR: int = 589

CAP_PROP_XI_ROW_FPN_CORRECTION: int = 591

CAP_PROP_XI_SENSOR_BOARD_TEMP: int = 596

CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ: int = 532

CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX: int = 533

CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH: int = 460

CAP_PROP_XI_SENSOR_FEATURE_SELECTOR: int = 585

CAP_PROP_XI_SENSOR_FEATURE_VALUE: int = 586

CAP_PROP_XI_SENSOR_MODE: int = 558

CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT: int = 534

CAP_PROP_XI_SENSOR_TAPS: int = 437

CAP_PROP_XI_SHARPNESS: int = 478

CAP_PROP_XI_SHUTTER_TYPE: int = 436

CAP_PROP_XI_TARGET_TEMP: int = 467

CAP_PROP_XI_TEST_PATTERN: int = 588

CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR: int = 587

CAP_PROP_XI_TIMEOUT: int = 420

CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT: int = 531

CAP_PROP_XI_TRG_DELAY: int = 544

CAP_PROP_XI_TRG_SELECTOR: int = 498

CAP_PROP_XI_TRG_SOFTWARE: int = 405

CAP_PROP_XI_TRG_SOURCE: int = 404

CAP_PROP_XI_TS_RST_MODE: int = 545

CAP_PROP_XI_TS_RST_SOURCE: int = 546

CAP_PROP_XI_USED_FFS_SIZE: int = 582

CAP_PROP_XI_WB_KB: int = 450

CAP_PROP_XI_WB_KG: int = 449

CAP_PROP_XI_WB_KR: int = 448

CAP_PROP_XI_WIDTH: int = 451

CAP_PROP_ZOOM: int = 27

CAP_PVAPI: int = 800

CAP_PVAPI_DECIMATION_2OUTOF16: int = 8

CAP_PVAPI_DECIMATION_2OUTOF4: int = 2

CAP_PVAPI_DECIMATION_2OUTOF8: int = 4

CAP_PVAPI_DECIMATION_OFF: int = 1

CAP_PVAPI_FSTRIGMODE_FIXEDRATE: int = 3

CAP_PVAPI_FSTRIGMODE_FREERUN: int = 0

CAP_PVAPI_FSTRIGMODE_SOFTWARE: int = 4

CAP_PVAPI_FSTRIGMODE_SYNCIN1: int = 1

CAP_PVAPI_FSTRIGMODE_SYNCIN2: int = 2

CAP_PVAPI_PIXELFORMAT_BAYER16: int = 4

CAP_PVAPI_PIXELFORMAT_BAYER8: int = 3

CAP_PVAPI_PIXELFORMAT_BGR24: int = 6

CAP_PVAPI_PIXELFORMAT_BGRA32: int = 8

CAP_PVAPI_PIXELFORMAT_MONO16: int = 2

CAP_PVAPI_PIXELFORMAT_MONO8: int = 1

CAP_PVAPI_PIXELFORMAT_RGB24: int = 5

CAP_PVAPI_PIXELFORMAT_RGBA32: int = 7

CAP_QT: int = 500

CAP_REALSENSE: int = 1500

CAP_UEYE: int = 2500

CAP_UNICAP: int = 600

CAP_V4L: int = 200

CAP_V4L2: int = 200

CAP_VFW: int = 200

CAP_WINRT: int = 1410

CAP_XIAPI: int = 1100

CAP_XINE: int = 2400

CASCADE_DO_CANNY_PRUNING: int = 1

CASCADE_DO_ROUGH_SEARCH: int = 8

CASCADE_FIND_BIGGEST_OBJECT: int = 4

CASCADE_SCALE_IMAGE: int = 2

CCL_BBDT: int = 4

CCL_BOLELLI: int = 2

CCL_DEFAULT: int = -1

CCL_GRANA: int = 1

CCL_SAUF: int = 3

CCL_SPAGHETTI: int = 5

CCL_WU: int = 0

CC_STAT_AREA: int = 4

CC_STAT_HEIGHT: int = 3

CC_STAT_LEFT: int = 0

CC_STAT_MAX: int = 5

CC_STAT_TOP: int = 1

CC_STAT_WIDTH: int = 2

CHAIN_APPROX_NONE: int = 1

CHAIN_APPROX_SIMPLE: int = 2

CHAIN_APPROX_TC89_KCOS: int = 4

CHAIN_APPROX_TC89_L1: int = 3

CIRCLES_GRID_FINDER_PARAMETERS_ASYMMETRIC_GRID: int = 1

CIRCLES_GRID_FINDER_PARAMETERS_SYMMETRIC_GRID: int = 0

CMP_EQ: int = 0

CMP_GE: int = 2

CMP_GT: int = 1

CMP_LE: int = 4

CMP_LT: int = 3

CMP_NE: int = 5

COLORMAP_AUTUMN: int = 0

COLORMAP_BONE: int = 1

COLORMAP_CIVIDIS: int = 17

COLORMAP_COOL: int = 8

COLORMAP_DEEPGREEN: int = 21

COLORMAP_HOT: int = 11

COLORMAP_HSV: int = 9

COLORMAP_INFERNO: int = 14

COLORMAP_JET: int = 2

COLORMAP_MAGMA: int = 13

COLORMAP_OCEAN: int = 5

COLORMAP_PARULA: int = 12

COLORMAP_PINK: int = 10

COLORMAP_PLASMA: int = 15

COLORMAP_RAINBOW: int = 4

COLORMAP_SPRING: int = 7

COLORMAP_SUMMER: int = 6

COLORMAP_TURBO: int = 20

COLORMAP_TWILIGHT: int = 18

COLORMAP_TWILIGHT_SHIFTED: int = 19

COLORMAP_VIRIDIS: int = 16

COLORMAP_WINTER: int = 3

COLOR_BAYER_BG2BGR: int = 46

COLOR_BAYER_BG2BGRA: int = 139

COLOR_BAYER_BG2BGR_EA: int = 135

COLOR_BAYER_BG2BGR_VNG: int = 62

COLOR_BAYER_BG2GRAY: int = 86

COLOR_BAYER_BG2RGB: int = 48

COLOR_BAYER_BG2RGBA: int = 141

COLOR_BAYER_BG2RGB_EA: int = 137

COLOR_BAYER_BG2RGB_VNG: int = 64

COLOR_BAYER_GB2BGR: int = 47

COLOR_BAYER_GB2BGRA: int = 140

COLOR_BAYER_GB2BGR_EA: int = 136

COLOR_BAYER_GB2BGR_VNG: int = 63

COLOR_BAYER_GB2GRAY: int = 87

COLOR_BAYER_GB2RGB: int = 49

COLOR_BAYER_GB2RGBA: int = 142

COLOR_BAYER_GB2RGB_EA: int = 138

COLOR_BAYER_GB2RGB_VNG: int = 65

COLOR_BAYER_GR2BGR: int = 49

COLOR_BAYER_GR2BGRA: int = 142

COLOR_BAYER_GR2BGR_EA: int = 138

COLOR_BAYER_GR2BGR_VNG: int = 65

COLOR_BAYER_GR2GRAY: int = 89

COLOR_BAYER_GR2RGB: int = 47

COLOR_BAYER_GR2RGBA: int = 140

COLOR_BAYER_GR2RGB_EA: int = 136

COLOR_BAYER_GR2RGB_VNG: int = 63

COLOR_BAYER_RG2BGR: int = 48

COLOR_BAYER_RG2BGRA: int = 141

COLOR_BAYER_RG2BGR_EA: int = 137

COLOR_BAYER_RG2BGR_VNG: int = 64

COLOR_BAYER_RG2GRAY: int = 88

COLOR_BAYER_RG2RGB: int = 46

COLOR_BAYER_RG2RGBA: int = 139

COLOR_BAYER_RG2RGB_EA: int = 135

COLOR_BAYER_RG2RGB_VNG: int = 62

COLOR_BGR2BGR555: int = 22

COLOR_BGR2BGR565: int = 12

COLOR_BGR2BGRA: int = 0

COLOR_BGR2GRAY: int = 6

COLOR_BGR2HLS: int = 52

COLOR_BGR2HLS_FULL: int = 68

COLOR_BGR2HSV: int = 40

COLOR_BGR2HSV_FULL: int = 66

COLOR_BGR2LAB: int = 44

COLOR_BGR2LUV: int = 50

COLOR_BGR2Lab: int = 44

COLOR_BGR2Luv: int = 50

COLOR_BGR2RGB: int = 4

COLOR_BGR2RGBA: int = 2

COLOR_BGR2XYZ: int = 32

COLOR_BGR2YCR_CB: int = 36

COLOR_BGR2YCrCb: int = 36

COLOR_BGR2YUV: int = 82

COLOR_BGR2YUV_I420: int = 128

COLOR_BGR2YUV_IYUV: int = 128

COLOR_BGR2YUV_YV12: int = 132

COLOR_BGR5552BGR: int = 24

COLOR_BGR5552BGRA: int = 28

COLOR_BGR5552GRAY: int = 31

COLOR_BGR5552RGB: int = 25

COLOR_BGR5552RGBA: int = 29

COLOR_BGR5652BGR: int = 14

COLOR_BGR5652BGRA: int = 18

COLOR_BGR5652GRAY: int = 21

COLOR_BGR5652RGB: int = 15

COLOR_BGR5652RGBA: int = 19

COLOR_BGRA2BGR: int = 1

COLOR_BGRA2BGR555: int = 26

COLOR_BGRA2BGR565: int = 16

COLOR_BGRA2GRAY: int = 10

COLOR_BGRA2RGB: int = 3

COLOR_BGRA2RGBA: int = 5

COLOR_BGRA2YUV_I420: int = 130

COLOR_BGRA2YUV_IYUV: int = 130

COLOR_BGRA2YUV_YV12: int = 134

COLOR_BayerBG2BGR: int = 46

COLOR_BayerBG2BGRA: int = 139

COLOR_BayerBG2BGR_EA: int = 135

COLOR_BayerBG2BGR_VNG: int = 62

COLOR_BayerBG2GRAY: int = 86

COLOR_BayerBG2RGB: int = 48

COLOR_BayerBG2RGBA: int = 141

COLOR_BayerBG2RGB_EA: int = 137

COLOR_BayerBG2RGB_VNG: int = 64

COLOR_BayerGB2BGR: int = 47

COLOR_BayerGB2BGRA: int = 140

COLOR_BayerGB2BGR_EA: int = 136

COLOR_BayerGB2BGR_VNG: int = 63

COLOR_BayerGB2GRAY: int = 87

COLOR_BayerGB2RGB: int = 49

COLOR_BayerGB2RGBA: int = 142

COLOR_BayerGB2RGB_EA: int = 138

COLOR_BayerGB2RGB_VNG: int = 65

COLOR_BayerGR2BGR: int = 49

COLOR_BayerGR2BGRA: int = 142

COLOR_BayerGR2BGR_EA: int = 138

COLOR_BayerGR2BGR_VNG: int = 65

COLOR_BayerGR2GRAY: int = 89

COLOR_BayerGR2RGB: int = 47

COLOR_BayerGR2RGBA: int = 140

COLOR_BayerGR2RGB_EA: int = 136

COLOR_BayerGR2RGB_VNG: int = 63

COLOR_BayerRG2BGR: int = 48

COLOR_BayerRG2BGRA: int = 141

COLOR_BayerRG2BGR_EA: int = 137

COLOR_BayerRG2BGR_VNG: int = 64

COLOR_BayerRG2GRAY: int = 88

COLOR_BayerRG2RGB: int = 46

COLOR_BayerRG2RGBA: int = 139

COLOR_BayerRG2RGB_EA: int = 135

COLOR_BayerRG2RGB_VNG: int = 62

COLOR_COLORCVT_MAX: int = 143

COLOR_GRAY2BGR: int = 8

COLOR_GRAY2BGR555: int = 30

COLOR_GRAY2BGR565: int = 20

COLOR_GRAY2BGRA: int = 9

COLOR_GRAY2RGB: int = 8

COLOR_GRAY2RGBA: int = 9

COLOR_HLS2BGR: int = 60

COLOR_HLS2BGR_FULL: int = 72

COLOR_HLS2RGB: int = 61

COLOR_HLS2RGB_FULL: int = 73

COLOR_HSV2BGR: int = 54

COLOR_HSV2BGR_FULL: int = 70

COLOR_HSV2RGB: int = 55

COLOR_HSV2RGB_FULL: int = 71

COLOR_LAB2BGR: int = 56

COLOR_LAB2LBGR: int = 78

COLOR_LAB2LRGB: int = 79

COLOR_LAB2RGB: int = 57

COLOR_LBGR2LAB: int = 74

COLOR_LBGR2LUV: int = 76

COLOR_LBGR2Lab: int = 74

COLOR_LBGR2Luv: int = 76

COLOR_LRGB2LAB: int = 75

COLOR_LRGB2LUV: int = 77

COLOR_LRGB2Lab: int = 75

COLOR_LRGB2Luv: int = 77

COLOR_LUV2BGR: int = 58

COLOR_LUV2LBGR: int = 80

COLOR_LUV2LRGB: int = 81

COLOR_LUV2RGB: int = 59

COLOR_Lab2BGR: int = 56

COLOR_Lab2LBGR: int = 78

COLOR_Lab2LRGB: int = 79

COLOR_Lab2RGB: int = 57

COLOR_Luv2BGR: int = 58

COLOR_Luv2LBGR: int = 80

COLOR_Luv2LRGB: int = 81

COLOR_Luv2RGB: int = 59

COLOR_M_RGBA2RGBA: int = 126

COLOR_RGB2BGR: int = 4

COLOR_RGB2BGR555: int = 23

COLOR_RGB2BGR565: int = 13

COLOR_RGB2BGRA: int = 2

COLOR_RGB2GRAY: int = 7

COLOR_RGB2HLS: int = 53

COLOR_RGB2HLS_FULL: int = 69

COLOR_RGB2HSV: int = 41

COLOR_RGB2HSV_FULL: int = 67

COLOR_RGB2LAB: int = 45

COLOR_RGB2LUV: int = 51

COLOR_RGB2Lab: int = 45

COLOR_RGB2Luv: int = 51

COLOR_RGB2RGBA: int = 0

COLOR_RGB2XYZ: int = 33

COLOR_RGB2YCR_CB: int = 37

COLOR_RGB2YCrCb: int = 37

COLOR_RGB2YUV: int = 83

COLOR_RGB2YUV_I420: int = 127

COLOR_RGB2YUV_IYUV: int = 127

COLOR_RGB2YUV_YV12: int = 131

COLOR_RGBA2BGR: int = 3

COLOR_RGBA2BGR555: int = 27

COLOR_RGBA2BGR565: int = 17

COLOR_RGBA2BGRA: int = 5

COLOR_RGBA2GRAY: int = 11

COLOR_RGBA2M_RGBA: int = 125

COLOR_RGBA2RGB: int = 1

COLOR_RGBA2YUV_I420: int = 129

COLOR_RGBA2YUV_IYUV: int = 129

COLOR_RGBA2YUV_YV12: int = 133

COLOR_RGBA2mRGBA: int = 125

COLOR_XYZ2BGR: int = 34

COLOR_XYZ2RGB: int = 35

COLOR_YCR_CB2BGR: int = 38

COLOR_YCR_CB2RGB: int = 39

COLOR_YCrCb2BGR: int = 38

COLOR_YCrCb2RGB: int = 39

COLOR_YUV2BGR: int = 84

COLOR_YUV2BGRA_I420: int = 105

COLOR_YUV2BGRA_IYUV: int = 105

COLOR_YUV2BGRA_NV12: int = 95

COLOR_YUV2BGRA_NV21: int = 97

COLOR_YUV2BGRA_UYNV: int = 112

COLOR_YUV2BGRA_UYVY: int = 112

COLOR_YUV2BGRA_Y422: int = 112

COLOR_YUV2BGRA_YUNV: int = 120

COLOR_YUV2BGRA_YUY2: int = 120

COLOR_YUV2BGRA_YUYV: int = 120

COLOR_YUV2BGRA_YV12: int = 103

COLOR_YUV2BGRA_YVYU: int = 122

COLOR_YUV2BGR_I420: int = 101

COLOR_YUV2BGR_IYUV: int = 101

COLOR_YUV2BGR_NV12: int = 91

COLOR_YUV2BGR_NV21: int = 93

COLOR_YUV2BGR_UYNV: int = 108

COLOR_YUV2BGR_UYVY: int = 108

COLOR_YUV2BGR_Y422: int = 108

COLOR_YUV2BGR_YUNV: int = 116

COLOR_YUV2BGR_YUY2: int = 116

COLOR_YUV2BGR_YUYV: int = 116

COLOR_YUV2BGR_YV12: int = 99

COLOR_YUV2BGR_YVYU: int = 118

COLOR_YUV2GRAY_420: int = 106

COLOR_YUV2GRAY_I420: int = 106

COLOR_YUV2GRAY_IYUV: int = 106

COLOR_YUV2GRAY_NV12: int = 106

COLOR_YUV2GRAY_NV21: int = 106

COLOR_YUV2GRAY_UYNV: int = 123

COLOR_YUV2GRAY_UYVY: int = 123

COLOR_YUV2GRAY_Y422: int = 123

COLOR_YUV2GRAY_YUNV: int = 124

COLOR_YUV2GRAY_YUY2: int = 124

COLOR_YUV2GRAY_YUYV: int = 124

COLOR_YUV2GRAY_YV12: int = 106

COLOR_YUV2GRAY_YVYU: int = 124

COLOR_YUV2RGB: int = 85

COLOR_YUV2RGBA_I420: int = 104

COLOR_YUV2RGBA_IYUV: int = 104

COLOR_YUV2RGBA_NV12: int = 94

COLOR_YUV2RGBA_NV21: int = 96

COLOR_YUV2RGBA_UYNV: int = 111

COLOR_YUV2RGBA_UYVY: int = 111

COLOR_YUV2RGBA_Y422: int = 111

COLOR_YUV2RGBA_YUNV: int = 119

COLOR_YUV2RGBA_YUY2: int = 119

COLOR_YUV2RGBA_YUYV: int = 119

COLOR_YUV2RGBA_YV12: int = 102

COLOR_YUV2RGBA_YVYU: int = 121

COLOR_YUV2RGB_I420: int = 100

COLOR_YUV2RGB_IYUV: int = 100

COLOR_YUV2RGB_NV12: int = 90

COLOR_YUV2RGB_NV21: int = 92

COLOR_YUV2RGB_UYNV: int = 107

COLOR_YUV2RGB_UYVY: int = 107

COLOR_YUV2RGB_Y422: int = 107

COLOR_YUV2RGB_YUNV: int = 115

COLOR_YUV2RGB_YUY2: int = 115

COLOR_YUV2RGB_YUYV: int = 115

COLOR_YUV2RGB_YV12: int = 98

COLOR_YUV2RGB_YVYU: int = 117

COLOR_YUV420P2BGR: int = 99

COLOR_YUV420P2BGRA: int = 103

COLOR_YUV420P2GRAY: int = 106

COLOR_YUV420P2RGB: int = 98

COLOR_YUV420P2RGBA: int = 102

COLOR_YUV420SP2BGR: int = 93

COLOR_YUV420SP2BGRA: int = 97

COLOR_YUV420SP2GRAY: int = 106

COLOR_YUV420SP2RGB: int = 92

COLOR_YUV420SP2RGBA: int = 96

COLOR_YUV420p2BGR: int = 99

COLOR_YUV420p2BGRA: int = 103

COLOR_YUV420p2GRAY: int = 106

COLOR_YUV420p2RGB: int = 98

COLOR_YUV420p2RGBA: int = 102

COLOR_YUV420sp2BGR: int = 93

COLOR_YUV420sp2BGRA: int = 97

COLOR_YUV420sp2GRAY: int = 106

COLOR_YUV420sp2RGB: int = 92

COLOR_YUV420sp2RGBA: int = 96

COLOR_mRGBA2RGBA: int = 126

CONTOURS_MATCH_I1: int = 1

CONTOURS_MATCH_I2: int = 2

CONTOURS_MATCH_I3: int = 3

COVAR_COLS: int = 16

COVAR_NORMAL: int = 1

COVAR_ROWS: int = 8

COVAR_SCALE: int = 4

COVAR_SCRAMBLED: int = 0

COVAR_USE_AVG: int = 2

CV_16S: int = 3

CV_16SC1: int = 3

CV_16SC2: int = 11

CV_16SC3: int = 19

CV_16SC4: int = 27

CV_16U: int = 2

CV_16UC1: int = 2

CV_16UC2: int = 10

CV_16UC3: int = 18

CV_16UC4: int = 26

CV_32F: int = 5

CV_32FC1: int = 5

CV_32FC2: int = 13

CV_32FC3: int = 21

CV_32FC4: int = 29

CV_32S: int = 4

CV_32SC1: int = 4

CV_32SC2: int = 12

CV_32SC3: int = 20

CV_32SC4: int = 28

CV_64F: int = 6

CV_64FC1: int = 6

CV_64FC2: int = 14

CV_64FC3: int = 22

CV_64FC4: int = 30

CV_8S: int = 1

CV_8SC1: int = 1

CV_8SC2: int = 9

CV_8SC3: int = 17

CV_8SC4: int = 25

CV_8U: int = 0

CV_8UC1: int = 0

CV_8UC2: int = 8

CV_8UC3: int = 16

CV_8UC4: int = 24

CirclesGridFinderParameters_ASYMMETRIC_GRID: int = 1

CirclesGridFinderParameters_SYMMETRIC_GRID: int = 0

DCT_INVERSE: int = 1

DCT_ROWS: int = 4

DECOMP_CHOLESKY: int = 3

DECOMP_EIG: int = 2

DECOMP_LU: int = 0

DECOMP_NORMAL: int = 16

DECOMP_QR: int = 4

DECOMP_SVD: int = 1

DESCRIPTOR_MATCHER_BRUTEFORCE: int = 2

DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING: int = 4

DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMINGLUT: int = 5

DESCRIPTOR_MATCHER_BRUTEFORCE_L1: int = 3

DESCRIPTOR_MATCHER_BRUTEFORCE_SL2: int = 6

DESCRIPTOR_MATCHER_FLANNBASED: int = 1

DFT_COMPLEX_INPUT: int = 64

DFT_COMPLEX_OUTPUT: int = 16

DFT_INVERSE: int = 1

DFT_REAL_OUTPUT: int = 32

DFT_ROWS: int = 4

DFT_SCALE: int = 2

DISOPTICAL_FLOW_PRESET_FAST: int = 1

DISOPTICAL_FLOW_PRESET_MEDIUM: int = 2

DISOPTICAL_FLOW_PRESET_ULTRAFAST: int = 0

DISOpticalFlow_PRESET_FAST: int = 1

DISOpticalFlow_PRESET_MEDIUM: int = 2

DISOpticalFlow_PRESET_ULTRAFAST: int = 0

DIST_C: int = 3

DIST_FAIR: int = 5

DIST_HUBER: int = 7

DIST_L1: int = 1

DIST_L12: int = 4

DIST_L2: int = 2

DIST_LABEL_CCOMP: int = 0

DIST_LABEL_PIXEL: int = 1

DIST_MASK_3: int = 3

DIST_MASK_5: int = 5

DIST_MASK_PRECISE: int = 0

DIST_USER: int = -1

DIST_WELSCH: int = 6

DRAW_MATCHES_FLAGS_DEFAULT: int = 0

DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG: int = 1

DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS: int = 4

DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS: int = 2

DescriptorMatcher_BRUTEFORCE: int = 2

DescriptorMatcher_BRUTEFORCE_HAMMING: int = 4

DescriptorMatcher_BRUTEFORCE_HAMMINGLUT: int = 5

DescriptorMatcher_BRUTEFORCE_L1: int = 3

DescriptorMatcher_BRUTEFORCE_SL2: int = 6

DescriptorMatcher_FLANNBASED: int = 1

DrawMatchesFlags_DEFAULT: int = 0

DrawMatchesFlags_DRAW_OVER_OUTIMG: int = 1

DrawMatchesFlags_DRAW_RICH_KEYPOINTS: int = 4

DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS: int = 2

EVENT_FLAG_ALTKEY: int = 32

EVENT_FLAG_CTRLKEY: int = 8

EVENT_FLAG_LBUTTON: int = 1

EVENT_FLAG_MBUTTON: int = 4

EVENT_FLAG_RBUTTON: int = 2

EVENT_FLAG_SHIFTKEY: int = 16

EVENT_LBUTTONDBLCLK: int = 7

EVENT_LBUTTONDOWN: int = 1

EVENT_LBUTTONUP: int = 4

EVENT_MBUTTONDBLCLK: int = 9

EVENT_MBUTTONDOWN: int = 3

EVENT_MBUTTONUP: int = 6

EVENT_MOUSEHWHEEL: int = 11

EVENT_MOUSEMOVE: int = 0

EVENT_MOUSEWHEEL: int = 10

EVENT_RBUTTONDBLCLK: int = 8

EVENT_RBUTTONDOWN: int = 2

EVENT_RBUTTONUP: int = 5

FAST_FEATURE_DETECTOR_FAST_N: int = 10002

FAST_FEATURE_DETECTOR_NONMAX_SUPPRESSION: int = 10001

FAST_FEATURE_DETECTOR_THRESHOLD: int = 10000

FAST_FEATURE_DETECTOR_TYPE_5_8: int = 0

FAST_FEATURE_DETECTOR_TYPE_7_12: int = 1

FAST_FEATURE_DETECTOR_TYPE_9_16: int = 2

FILE_NODE_EMPTY: int = 16

FILE_NODE_FLOAT: int = 2

FILE_NODE_FLOW: int = 8

FILE_NODE_INT: int = 1

FILE_NODE_MAP: int = 5

FILE_NODE_NAMED: int = 32

FILE_NODE_NONE: int = 0

FILE_NODE_REAL: int = 2

FILE_NODE_SEQ: int = 4

FILE_NODE_STR: int = 3

FILE_NODE_STRING: int = 3

FILE_NODE_TYPE_MASK: int = 7

FILE_NODE_UNIFORM: int = 8

FILE_STORAGE_APPEND: int = 2

FILE_STORAGE_BASE64: int = 64

FILE_STORAGE_FORMAT_AUTO: int = 0

FILE_STORAGE_FORMAT_JSON: int = 24

FILE_STORAGE_FORMAT_MASK: int = 56

FILE_STORAGE_FORMAT_XML: int = 8

FILE_STORAGE_FORMAT_YAML: int = 16

FILE_STORAGE_INSIDE_MAP: int = 4

FILE_STORAGE_MEMORY: int = 4

FILE_STORAGE_NAME_EXPECTED: int = 2

FILE_STORAGE_READ: int = 0

FILE_STORAGE_UNDEFINED: int = 0

FILE_STORAGE_VALUE_EXPECTED: int = 1

FILE_STORAGE_WRITE: int = 1

FILE_STORAGE_WRITE_BASE64: int = 65

FILLED: int = -1

FILTER_SCHARR: int = -1

FLOODFILL_FIXED_RANGE: int = 65536

FLOODFILL_MASK_ONLY: int = 131072

FM_7POINT: int = 1

FM_8POINT: int = 2

FM_LMEDS: int = 4

FM_RANSAC: int = 8

FONT_HERSHEY_COMPLEX: int = 3

FONT_HERSHEY_COMPLEX_SMALL: int = 5

FONT_HERSHEY_DUPLEX: int = 2

FONT_HERSHEY_PLAIN: int = 1

FONT_HERSHEY_SCRIPT_COMPLEX: int = 7

FONT_HERSHEY_SCRIPT_SIMPLEX: int = 6

FONT_HERSHEY_SIMPLEX: int = 0

FONT_HERSHEY_TRIPLEX: int = 4

FONT_ITALIC: int = 16

FORMATTER_FMT_C: int = 5

FORMATTER_FMT_CSV: int = 2

FORMATTER_FMT_DEFAULT: int = 0

FORMATTER_FMT_MATLAB: int = 1

FORMATTER_FMT_NUMPY: int = 4

FORMATTER_FMT_PYTHON: int = 3

FastFeatureDetector_FAST_N: int = 10002

FastFeatureDetector_NONMAX_SUPPRESSION: int = 10001

FastFeatureDetector_THRESHOLD: int = 10000

FastFeatureDetector_TYPE_5_8: int = 0

FastFeatureDetector_TYPE_7_12: int = 1

FastFeatureDetector_TYPE_9_16: int = 2

FileNode_EMPTY: int = 16

FileNode_FLOAT: int = 2

FileNode_FLOW: int = 8

FileNode_INT: int = 1

FileNode_MAP: int = 5

FileNode_NAMED: int = 32

FileNode_NONE: int = 0

FileNode_REAL: int = 2

FileNode_SEQ: int = 4

FileNode_STR: int = 3

FileNode_STRING: int = 3

FileNode_TYPE_MASK: int = 7

FileNode_UNIFORM: int = 8

FileStorage_APPEND: int = 2

FileStorage_BASE64: int = 64

FileStorage_FORMAT_AUTO: int = 0

FileStorage_FORMAT_JSON: int = 24

FileStorage_FORMAT_MASK: int = 56

FileStorage_FORMAT_XML: int = 8

FileStorage_FORMAT_YAML: int = 16

FileStorage_INSIDE_MAP: int = 4

FileStorage_MEMORY: int = 4

FileStorage_NAME_EXPECTED: int = 2

FileStorage_READ: int = 0

FileStorage_UNDEFINED: int = 0

FileStorage_VALUE_EXPECTED: int = 1

FileStorage_WRITE: int = 1

FileStorage_WRITE_BASE64: int = 65

Formatter_FMT_C: int = 5

Formatter_FMT_CSV: int = 2

Formatter_FMT_DEFAULT: int = 0

Formatter_FMT_MATLAB: int = 1

Formatter_FMT_NUMPY: int = 4

Formatter_FMT_PYTHON: int = 3

GC_BGD: int = 0

GC_EVAL: int = 2

GC_EVAL_FREEZE_MODEL: int = 3

GC_FGD: int = 1

GC_INIT_WITH_MASK: int = 1

GC_INIT_WITH_RECT: int = 0

GC_PR_BGD: int = 2

GC_PR_FGD: int = 3

GEMM_1_T: int = 1

GEMM_2_T: int = 2

GEMM_3_T: int = 4

GFLUID_KERNEL_KIND_FILTER: int = 0

GFLUID_KERNEL_KIND_RESIZE: int = 1

GFLUID_KERNEL_KIND_YUV420TO_RGB: int = 2

GFluidKernel_Kind_Filter: int = 0

GFluidKernel_Kind_Resize: int = 1

GFluidKernel_Kind_YUV420toRGB: int = 2

GSHAPE_GARRAY: int = 2

GSHAPE_GFRAME: int = 4

GSHAPE_GMAT: int = 0

GSHAPE_GOPAQUE: int = 3

GSHAPE_GSCALAR: int = 1

GShape_GARRAY: int = 2

GShape_GFRAME: int = 4

GShape_GMAT: int = 0

GShape_GOPAQUE: int = 3

GShape_GSCALAR: int = 1

HISTCMP_BHATTACHARYYA: int = 3

HISTCMP_CHISQR: int = 1

HISTCMP_CHISQR_ALT: int = 4

HISTCMP_CORREL: int = 0

HISTCMP_HELLINGER: int = 3

HISTCMP_INTERSECT: int = 2

HISTCMP_KL_DIV: int = 5

HOGDESCRIPTOR_DEFAULT_NLEVELS: int = 64

HOGDESCRIPTOR_DESCR_FORMAT_COL_BY_COL: int = 0

HOGDESCRIPTOR_DESCR_FORMAT_ROW_BY_ROW: int = 1

HOGDESCRIPTOR_L2HYS: int = 0

HOGDescriptor_DEFAULT_NLEVELS: int = 64

HOGDescriptor_DESCR_FORMAT_COL_BY_COL: int = 0

HOGDescriptor_DESCR_FORMAT_ROW_BY_ROW: int = 1

HOGDescriptor_L2Hys: int = 0

HOUGH_GRADIENT: int = 3

HOUGH_GRADIENT_ALT: int = 4

HOUGH_MULTI_SCALE: int = 2

HOUGH_PROBABILISTIC: int = 1

HOUGH_STANDARD: int = 0

IMREAD_ANYCOLOR: int = 4

IMREAD_ANYDEPTH: int = 2

IMREAD_COLOR: int = 1

IMREAD_GRAYSCALE: int = 0

IMREAD_IGNORE_ORIENTATION: int = 128

IMREAD_LOAD_GDAL: int = 8

IMREAD_REDUCED_COLOR_2: int = 17

IMREAD_REDUCED_COLOR_4: int = 33

IMREAD_REDUCED_COLOR_8: int = 65

IMREAD_REDUCED_GRAYSCALE_2: int = 16

IMREAD_REDUCED_GRAYSCALE_4: int = 32

IMREAD_REDUCED_GRAYSCALE_8: int = 64

IMREAD_UNCHANGED: int = -1

IMWRITE_EXR_COMPRESSION: int = 49

IMWRITE_EXR_COMPRESSION_B44: int = 6

IMWRITE_EXR_COMPRESSION_B44A: int = 7

IMWRITE_EXR_COMPRESSION_DWAA: int = 8

IMWRITE_EXR_COMPRESSION_DWAB: int = 9

IMWRITE_EXR_COMPRESSION_NO: int = 0

IMWRITE_EXR_COMPRESSION_PIZ: int = 4

IMWRITE_EXR_COMPRESSION_PXR24: int = 5

IMWRITE_EXR_COMPRESSION_RLE: int = 1

IMWRITE_EXR_COMPRESSION_ZIP: int = 3

IMWRITE_EXR_COMPRESSION_ZIPS: int = 2

IMWRITE_EXR_TYPE: int = 48

IMWRITE_EXR_TYPE_FLOAT: int = 2

IMWRITE_EXR_TYPE_HALF: int = 1

IMWRITE_JPEG2000_COMPRESSION_X1000: int = 272

IMWRITE_JPEG_CHROMA_QUALITY: int = 6

IMWRITE_JPEG_LUMA_QUALITY: int = 5

IMWRITE_JPEG_OPTIMIZE: int = 3

IMWRITE_JPEG_PROGRESSIVE: int = 2

IMWRITE_JPEG_QUALITY: int = 1

IMWRITE_JPEG_RST_INTERVAL: int = 4

IMWRITE_PAM_FORMAT_BLACKANDWHITE: int = 1

IMWRITE_PAM_FORMAT_GRAYSCALE: int = 2

IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA: int = 3

IMWRITE_PAM_FORMAT_NULL: int = 0

IMWRITE_PAM_FORMAT_RGB: int = 4

IMWRITE_PAM_FORMAT_RGB_ALPHA: int = 5

IMWRITE_PAM_TUPLETYPE: int = 128

IMWRITE_PNG_BILEVEL: int = 18

IMWRITE_PNG_COMPRESSION: int = 16

IMWRITE_PNG_STRATEGY: int = 17

IMWRITE_PNG_STRATEGY_DEFAULT: int = 0

IMWRITE_PNG_STRATEGY_FILTERED: int = 1

IMWRITE_PNG_STRATEGY_FIXED: int = 4

IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY: int = 2

IMWRITE_PNG_STRATEGY_RLE: int = 3

IMWRITE_PXM_BINARY: int = 32

IMWRITE_TIFF_COMPRESSION: int = 259

IMWRITE_TIFF_RESUNIT: int = 256

IMWRITE_TIFF_XDPI: int = 257

IMWRITE_TIFF_YDPI: int = 258

IMWRITE_WEBP_QUALITY: int = 64

INPAINT_NS: int = 0

INPAINT_TELEA: int = 1

INTERSECT_FULL: int = 2

INTERSECT_NONE: int = 0

INTERSECT_PARTIAL: int = 1

INTER_AREA: int = 3

INTER_BITS: int = 5

INTER_BITS2: int = 10

INTER_CUBIC: int = 2

INTER_LANCZOS4: int = 4

INTER_LINEAR: int = 1

INTER_LINEAR_EXACT: int = 5

INTER_MAX: int = 7

INTER_NEAREST: int = 0

INTER_NEAREST_EXACT: int = 6

INTER_TAB_SIZE: int = 32

INTER_TAB_SIZE2: int = 1024

KAZE_DIFF_CHARBONNIER: int = 3

KAZE_DIFF_PM_G1: int = 0

KAZE_DIFF_PM_G2: int = 1

KAZE_DIFF_WEICKERT: int = 2

KMEANS_PP_CENTERS: int = 2

KMEANS_RANDOM_CENTERS: int = 0

KMEANS_USE_INITIAL_LABELS: int = 1

LDR_SIZE: int = 256

LINE_4: int = 4

LINE_8: int = 8

LINE_AA: int = 16

LMEDS: int = 4

LOCAL_OPTIM_GC: int = 3

LOCAL_OPTIM_INNER_AND_ITER_LO: int = 2

LOCAL_OPTIM_INNER_LO: int = 1

LOCAL_OPTIM_NULL: int = 0

LOCAL_OPTIM_SIGMA: int = 4

LSD_REFINE_ADV: int = 2

LSD_REFINE_NONE: int = 0

LSD_REFINE_STD: int = 1

MARKER_CROSS: int = 0

MARKER_DIAMOND: int = 3

MARKER_SQUARE: int = 4

MARKER_STAR: int = 2

MARKER_TILTED_CROSS: int = 1

MARKER_TRIANGLE_DOWN: int = 6

MARKER_TRIANGLE_UP: int = 5

MAT_AUTO_STEP: int = 0

MAT_CONTINUOUS_FLAG: int = 16384

MAT_DEPTH_MASK: int = 7

MAT_MAGIC_MASK: int = -65536

MAT_MAGIC_VAL: int = 1124007936

MAT_SUBMATRIX_FLAG: int = 32768

MAT_TYPE_MASK: int = 4095

MEDIA_FORMAT_BGR: int = 0

MEDIA_FORMAT_NV12: int = 1

MEDIA_FRAME_ACCESS_R: int = 0

MEDIA_FRAME_ACCESS_W: int = 1

MIXED_CLONE: int = 2

MONOCHROME_TRANSFER: int = 3

MORPH_BLACKHAT: int = 6

MORPH_CLOSE: int = 3

MORPH_CROSS: int = 1

MORPH_DILATE: int = 1

MORPH_ELLIPSE: int = 2

MORPH_ERODE: int = 0

MORPH_GRADIENT: int = 4

MORPH_HITMISS: int = 7

MORPH_OPEN: int = 2

MORPH_RECT: int = 0

MORPH_TOPHAT: int = 5

MOTION_AFFINE: int = 2

MOTION_EUCLIDEAN: int = 1

MOTION_HOMOGRAPHY: int = 3

MOTION_TRANSLATION: int = 0

Mat_AUTO_STEP: int = 0

Mat_CONTINUOUS_FLAG: int = 16384

Mat_DEPTH_MASK: int = 7

Mat_MAGIC_MASK: int = -65536

Mat_MAGIC_VAL: int = 1124007936

Mat_SUBMATRIX_FLAG: int = 32768

Mat_TYPE_MASK: int = 4095

MediaFormat_BGR: int = 0

MediaFormat_NV12: int = 1

MediaFrame_Access_R: int = 0

MediaFrame_Access_W: int = 1

NEIGH_FLANN_KNN: int = 0

NEIGH_FLANN_RADIUS: int = 2

NEIGH_GRID: int = 1

NORMAL_CLONE: int = 1

NORMCONV_FILTER: int = 2

NORM_HAMMING: int = 6

NORM_HAMMING2: int = 7

NORM_INF: int = 1

NORM_L1: int = 2

NORM_L2: int = 4

NORM_L2SQR: int = 5

NORM_MINMAX: int = 32

NORM_RELATIVE: int = 8

NORM_TYPE_MASK: int = 7

OPTFLOW_FARNEBACK_GAUSSIAN: int = 256

OPTFLOW_LK_GET_MIN_EIGENVALS: int = 8

OPTFLOW_USE_INITIAL_FLOW: int = 4

ORB_FAST_SCORE: int = 1

ORB_HARRIS_SCORE: int = 0

PARAM_ALGORITHM: int = 6

PARAM_BOOLEAN: int = 1

PARAM_FLOAT: int = 7

PARAM_INT: int = 0

PARAM_MAT: int = 4

PARAM_MAT_VECTOR: int = 5

PARAM_REAL: int = 2

PARAM_SCALAR: int = 12

PARAM_STRING: int = 3

PARAM_UCHAR: int = 11

PARAM_UINT64: int = 9

PARAM_UNSIGNED_INT: int = 8

PCA_DATA_AS_COL: int = 1

PCA_DATA_AS_ROW: int = 0

PCA_USE_AVG: int = 2

PROJ_SPHERICAL_EQRECT: int = 1

PROJ_SPHERICAL_ORTHO: int = 0

Param_ALGORITHM: int = 6

Param_BOOLEAN: int = 1

Param_FLOAT: int = 7

Param_INT: int = 0

Param_MAT: int = 4

Param_MAT_VECTOR: int = 5

Param_REAL: int = 2

Param_SCALAR: int = 12

Param_STRING: int = 3

Param_UCHAR: int = 11

Param_UINT64: int = 9

Param_UNSIGNED_INT: int = 8

QT_CHECKBOX: int = 1

QT_FONT_BLACK: int = 87

QT_FONT_BOLD: int = 75

QT_FONT_DEMIBOLD: int = 63

QT_FONT_LIGHT: int = 25

QT_FONT_NORMAL: int = 50

QT_NEW_BUTTONBAR: int = 1024

QT_PUSH_BUTTON: int = 0

QT_RADIOBOX: int = 2

QT_STYLE_ITALIC: int = 1

QT_STYLE_NORMAL: int = 0

QT_STYLE_OBLIQUE: int = 2

QUAT_ASSUME_NOT_UNIT: int = 0

QUAT_ASSUME_UNIT: int = 1

QUAT_ENUM_EULER_ANGLES_MAX_VALUE: int = 24

QUAT_ENUM_EXT_XYX: int = 18

QUAT_ENUM_EXT_XYZ: int = 12

QUAT_ENUM_EXT_XZX: int = 19

QUAT_ENUM_EXT_XZY: int = 13

QUAT_ENUM_EXT_YXY: int = 20

QUAT_ENUM_EXT_YXZ: int = 14

QUAT_ENUM_EXT_YZX: int = 15

QUAT_ENUM_EXT_YZY: int = 21

QUAT_ENUM_EXT_ZXY: int = 16

QUAT_ENUM_EXT_ZXZ: int = 22

QUAT_ENUM_EXT_ZYX: int = 17

QUAT_ENUM_EXT_ZYZ: int = 23

QUAT_ENUM_INT_XYX: int = 6

QUAT_ENUM_INT_XYZ: int = 0

QUAT_ENUM_INT_XZX: int = 7

QUAT_ENUM_INT_XZY: int = 1

QUAT_ENUM_INT_YXY: int = 8

QUAT_ENUM_INT_YXZ: int = 2

QUAT_ENUM_INT_YZX: int = 3

QUAT_ENUM_INT_YZY: int = 9

QUAT_ENUM_INT_ZXY: int = 4

QUAT_ENUM_INT_ZXZ: int = 10

QUAT_ENUM_INT_ZYX: int = 5

QUAT_ENUM_INT_ZYZ: int = 11

QuatEnum_EULER_ANGLES_MAX_VALUE: int = 24

QuatEnum_EXT_XYX: int = 18

QuatEnum_EXT_XYZ: int = 12

QuatEnum_EXT_XZX: int = 19

QuatEnum_EXT_XZY: int = 13

QuatEnum_EXT_YXY: int = 20

QuatEnum_EXT_YXZ: int = 14

QuatEnum_EXT_YZX: int = 15

QuatEnum_EXT_YZY: int = 21

QuatEnum_EXT_ZXY: int = 16

QuatEnum_EXT_ZXZ: int = 22

QuatEnum_EXT_ZYX: int = 17

QuatEnum_EXT_ZYZ: int = 23

QuatEnum_INT_XYX: int = 6

QuatEnum_INT_XYZ: int = 0

QuatEnum_INT_XZX: int = 7

QuatEnum_INT_XZY: int = 1

QuatEnum_INT_YXY: int = 8

QuatEnum_INT_YXZ: int = 2

QuatEnum_INT_YZX: int = 3

QuatEnum_INT_YZY: int = 9

QuatEnum_INT_ZXY: int = 4

QuatEnum_INT_ZXZ: int = 10

QuatEnum_INT_ZYX: int = 5

QuatEnum_INT_ZYZ: int = 11

RANSAC: int = 8

RECURS_FILTER: int = 1

REDUCE_AVG: int = 1

REDUCE_MAX: int = 2

REDUCE_MIN: int = 3

REDUCE_SUM: int = 0

RETR_CCOMP: int = 2

RETR_EXTERNAL: int = 0

RETR_FLOODFILL: int = 4

RETR_LIST: int = 1

RETR_TREE: int = 3

RHO: int = 16

RMAT_ACCESS_R: int = 0

RMAT_ACCESS_W: int = 1

RMat_Access_R: int = 0

RMat_Access_W: int = 1

RNG_NORMAL: int = 1

RNG_UNIFORM: int = 0

ROTATE_180: int = 1

ROTATE_90_CLOCKWISE: int = 0

ROTATE_90_COUNTERCLOCKWISE: int = 2

SAMPLING_NAPSAC: int = 2

SAMPLING_PROGRESSIVE_NAPSAC: int = 1

SAMPLING_PROSAC: int = 3

SAMPLING_UNIFORM: int = 0

SCORE_METHOD_LMEDS: int = 3

SCORE_METHOD_MAGSAC: int = 2

SCORE_METHOD_MSAC: int = 1

SCORE_METHOD_RANSAC: int = 0

SOLVELP_MULTI: int = 1

SOLVELP_SINGLE: int = 0

SOLVELP_UNBOUNDED: int = -2

SOLVELP_UNFEASIBLE: int = -1

SOLVEPNP_AP3P: int = 5

SOLVEPNP_DLS: int = 3

SOLVEPNP_EPNP: int = 1

SOLVEPNP_IPPE: int = 6

SOLVEPNP_IPPE_SQUARE: int = 7

SOLVEPNP_ITERATIVE: int = 0

SOLVEPNP_MAX_COUNT: int = 9

SOLVEPNP_P3P: int = 2

SOLVEPNP_SQPNP: int = 8

SOLVEPNP_UPNP: int = 4

SORT_ASCENDING: int = 0

SORT_DESCENDING: int = 16

SORT_EVERY_COLUMN: int = 1

SORT_EVERY_ROW: int = 0

SPARSE_MAT_HASH_BIT: int = -2147483648

SPARSE_MAT_HASH_SCALE: int = 1540483477

SPARSE_MAT_MAGIC_VAL: int = 1123876864

SPARSE_MAT_MAX_DIM: int = 32

STEREO_BM_PREFILTER_NORMALIZED_RESPONSE: int = 0

STEREO_BM_PREFILTER_XSOBEL: int = 1

STEREO_MATCHER_DISP_SCALE: int = 16

STEREO_MATCHER_DISP_SHIFT: int = 4

STEREO_SGBM_MODE_HH: int = 1

STEREO_SGBM_MODE_HH4: int = 3

STEREO_SGBM_MODE_SGBM: int = 0

STEREO_SGBM_MODE_SGBM_3WAY: int = 2

STITCHER_ERR_CAMERA_PARAMS_ADJUST_FAIL: int = 3

STITCHER_ERR_HOMOGRAPHY_EST_FAIL: int = 2

STITCHER_ERR_NEED_MORE_IMGS: int = 1

STITCHER_OK: int = 0

STITCHER_PANORAMA: int = 0

STITCHER_SCANS: int = 1

SUBDIV2D_NEXT_AROUND_DST: int = 34

SUBDIV2D_NEXT_AROUND_LEFT: int = 19

SUBDIV2D_NEXT_AROUND_ORG: int = 0

SUBDIV2D_NEXT_AROUND_RIGHT: int = 49

SUBDIV2D_PREV_AROUND_DST: int = 51

SUBDIV2D_PREV_AROUND_LEFT: int = 32

SUBDIV2D_PREV_AROUND_ORG: int = 17

SUBDIV2D_PREV_AROUND_RIGHT: int = 2

SUBDIV2D_PTLOC_ERROR: int = -2

SUBDIV2D_PTLOC_INSIDE: int = 0

SUBDIV2D_PTLOC_ON_EDGE: int = 2

SUBDIV2D_PTLOC_OUTSIDE_RECT: int = -1

SUBDIV2D_PTLOC_VERTEX: int = 1

SVD_FULL_UV: int = 4

SVD_MODIFY_A: int = 1

SVD_NO_UV: int = 2

SparseMat_HASH_BIT: int = -2147483648

SparseMat_HASH_SCALE: int = 1540483477

SparseMat_MAGIC_VAL: int = 1123876864

SparseMat_MAX_DIM: int = 32

StereoBM_PREFILTER_NORMALIZED_RESPONSE: int = 0

StereoBM_PREFILTER_XSOBEL: int = 1

StereoMatcher_DISP_SCALE: int = 16

StereoMatcher_DISP_SHIFT: int = 4

StereoSGBM_MODE_HH: int = 1

StereoSGBM_MODE_HH4: int = 3

StereoSGBM_MODE_SGBM: int = 0

StereoSGBM_MODE_SGBM_3WAY: int = 2

Stitcher_ERR_CAMERA_PARAMS_ADJUST_FAIL: int = 3

Stitcher_ERR_HOMOGRAPHY_EST_FAIL: int = 2

Stitcher_ERR_NEED_MORE_IMGS: int = 1

Stitcher_OK: int = 0

Stitcher_PANORAMA: int = 0

Stitcher_SCANS: int = 1

Subdiv2D_NEXT_AROUND_DST: int = 34

Subdiv2D_NEXT_AROUND_LEFT: int = 19

Subdiv2D_NEXT_AROUND_ORG: int = 0

Subdiv2D_NEXT_AROUND_RIGHT: int = 49

Subdiv2D_PREV_AROUND_DST: int = 51

Subdiv2D_PREV_AROUND_LEFT: int = 32

Subdiv2D_PREV_AROUND_ORG: int = 17

Subdiv2D_PREV_AROUND_RIGHT: int = 2

Subdiv2D_PTLOC_ERROR: int = -2

Subdiv2D_PTLOC_INSIDE: int = 0

Subdiv2D_PTLOC_ON_EDGE: int = 2

Subdiv2D_PTLOC_OUTSIDE_RECT: int = -1

Subdiv2D_PTLOC_VERTEX: int = 1

TERM_CRITERIA_COUNT: int = 1

TERM_CRITERIA_EPS: int = 2

TERM_CRITERIA_MAX_ITER: int = 1

THRESH_BINARY: int = 0

THRESH_BINARY_INV: int = 1

THRESH_MASK: int = 7

THRESH_OTSU: int = 8

THRESH_TOZERO: int = 3

THRESH_TOZERO_INV: int = 4

THRESH_TRIANGLE: int = 16

THRESH_TRUNC: int = 2

TM_CCOEFF: int = 4

TM_CCOEFF_NORMED: int = 5

TM_CCORR: int = 2

TM_CCORR_NORMED: int = 3

TM_SQDIFF: int = 0

TM_SQDIFF_NORMED: int = 1

TermCriteria_COUNT: int = 1

TermCriteria_EPS: int = 2

TermCriteria_MAX_ITER: int = 1

UMAT_AUTO_STEP: int = 0

UMAT_CONTINUOUS_FLAG: int = 16384

UMAT_DATA_ASYNC_CLEANUP: int = 128

UMAT_DATA_COPY_ON_MAP: int = 1

UMAT_DATA_DEVICE_COPY_OBSOLETE: int = 4

UMAT_DATA_DEVICE_MEM_MAPPED: int = 64

UMAT_DATA_HOST_COPY_OBSOLETE: int = 2

UMAT_DATA_TEMP_COPIED_UMAT: int = 24

UMAT_DATA_TEMP_UMAT: int = 8

UMAT_DATA_USER_ALLOCATED: int = 32

UMAT_DEPTH_MASK: int = 7

UMAT_MAGIC_MASK: int = -65536

UMAT_MAGIC_VAL: int = 1124007936

UMAT_SUBMATRIX_FLAG: int = 32768

UMAT_TYPE_MASK: int = 4095

UMatData_ASYNC_CLEANUP: int = 128

UMatData_COPY_ON_MAP: int = 1

UMatData_DEVICE_COPY_OBSOLETE: int = 4

UMatData_DEVICE_MEM_MAPPED: int = 64

UMatData_HOST_COPY_OBSOLETE: int = 2

UMatData_TEMP_COPIED_UMAT: int = 24

UMatData_TEMP_UMAT: int = 8

UMatData_USER_ALLOCATED: int = 32

UMat_AUTO_STEP: int = 0

UMat_CONTINUOUS_FLAG: int = 16384

UMat_DEPTH_MASK: int = 7

UMat_MAGIC_MASK: int = -65536

UMat_MAGIC_VAL: int = 1124007936

UMat_SUBMATRIX_FLAG: int = 32768

UMat_TYPE_MASK: int = 4095

USAC_ACCURATE: int = 36

USAC_DEFAULT: int = 32

USAC_FAST: int = 35

USAC_FM_8PTS: int = 34

USAC_MAGSAC: int = 38

USAC_PARALLEL: int = 33

USAC_PROSAC: int = 37

USAGE_ALLOCATE_DEVICE_MEMORY: int = 2

USAGE_ALLOCATE_HOST_MEMORY: int = 1

USAGE_ALLOCATE_SHARED_MEMORY: int = 4

USAGE_DEFAULT: int = 0

VIDEOWRITER_PROP_DEPTH: int = 5

VIDEOWRITER_PROP_FRAMEBYTES: int = 2

VIDEOWRITER_PROP_HW_ACCELERATION: int = 6

VIDEOWRITER_PROP_HW_DEVICE: int = 7

VIDEOWRITER_PROP_IS_COLOR: int = 4

VIDEOWRITER_PROP_NSTRIPES: int = 3

VIDEOWRITER_PROP_QUALITY: int = 1

VIDEO_ACCELERATION_ANY: int = 1

VIDEO_ACCELERATION_D3D11: int = 2

VIDEO_ACCELERATION_MFX: int = 4

VIDEO_ACCELERATION_NONE: int = 0

VIDEO_ACCELERATION_VAAPI: int = 3

WARP_FILL_OUTLIERS: int = 8

WARP_INVERSE_MAP: int = 16

WARP_POLAR_LINEAR: int = 0

WARP_POLAR_LOG: int = 256

WINDOW_AUTOSIZE: int = 1

WINDOW_FREERATIO: int = 256

WINDOW_FULLSCREEN: int = 1

WINDOW_GUI_EXPANDED: int = 0

WINDOW_GUI_NORMAL: int = 16

WINDOW_KEEPRATIO: int = 0

WINDOW_NORMAL: int = 0

WINDOW_OPENGL: int = 4096

WND_PROP_ASPECT_RATIO: int = 2

WND_PROP_AUTOSIZE: int = 1

WND_PROP_FULLSCREEN: int = 0

WND_PROP_OPENGL: int = 3

WND_PROP_TOPMOST: int = 5

WND_PROP_VISIBLE: int = 4

WND_PROP_VSYNC: int = 6

_INPUT_ARRAY_CUDA_GPU_MAT: int = 589824

_INPUT_ARRAY_CUDA_HOST_MEM: int = 524288

_INPUT_ARRAY_EXPR: int = 393216

_INPUT_ARRAY_FIXED_SIZE: int = 1073741824

_INPUT_ARRAY_FIXED_TYPE: int = -2147483648

_INPUT_ARRAY_KIND_MASK: int = 2031616

_INPUT_ARRAY_KIND_SHIFT: int = 16

_INPUT_ARRAY_MAT: int = 65536

_INPUT_ARRAY_MATX: int = 131072

_INPUT_ARRAY_NONE: int = 0

_INPUT_ARRAY_OPENGL_BUFFER: int = 458752

_INPUT_ARRAY_STD_ARRAY: int = 917504

_INPUT_ARRAY_STD_ARRAY_MAT: int = 983040

_INPUT_ARRAY_STD_BOOL_VECTOR: int = 786432

_INPUT_ARRAY_STD_VECTOR: int = 196608

_INPUT_ARRAY_STD_VECTOR_CUDA_GPU_MAT: int = 851968

_INPUT_ARRAY_STD_VECTOR_MAT: int = 327680

_INPUT_ARRAY_STD_VECTOR_UMAT: int = 720896

_INPUT_ARRAY_STD_VECTOR_VECTOR: int = 262144

_INPUT_ARRAY_UMAT: int = 655360

_InputArray_CUDA_GPU_MAT: int = 589824

_InputArray_CUDA_HOST_MEM: int = 524288

_InputArray_EXPR: int = 393216

_InputArray_FIXED_SIZE: int = 1073741824

_InputArray_FIXED_TYPE: int = -2147483648

_InputArray_KIND_MASK: int = 2031616

_InputArray_KIND_SHIFT: int = 16

_InputArray_MAT: int = 65536

_InputArray_MATX: int = 131072

_InputArray_NONE: int = 0

_InputArray_OPENGL_BUFFER: int = 458752

_InputArray_STD_ARRAY: int = 917504

_InputArray_STD_ARRAY_MAT: int = 983040

_InputArray_STD_BOOL_VECTOR: int = 786432

_InputArray_STD_VECTOR: int = 196608

_InputArray_STD_VECTOR_CUDA_GPU_MAT: int = 851968

_InputArray_STD_VECTOR_MAT: int = 327680

_InputArray_STD_VECTOR_UMAT: int = 720896

_InputArray_STD_VECTOR_VECTOR: int = 262144

_InputArray_UMAT: int = 655360

_OUTPUT_ARRAY_DEPTH_MASK_16F: int = 128

_OUTPUT_ARRAY_DEPTH_MASK_16S: int = 8

_OUTPUT_ARRAY_DEPTH_MASK_16U: int = 4

_OUTPUT_ARRAY_DEPTH_MASK_32F: int = 32

_OUTPUT_ARRAY_DEPTH_MASK_32S: int = 16

_OUTPUT_ARRAY_DEPTH_MASK_64F: int = 64

_OUTPUT_ARRAY_DEPTH_MASK_8S: int = 2

_OUTPUT_ARRAY_DEPTH_MASK_8U: int = 1

_OUTPUT_ARRAY_DEPTH_MASK_ALL: int = 127

_OUTPUT_ARRAY_DEPTH_MASK_ALL_16F: int = 255

_OUTPUT_ARRAY_DEPTH_MASK_ALL_BUT_8S: int = 125

_OUTPUT_ARRAY_DEPTH_MASK_FLT: int = 96

_OutputArray_DEPTH_MASK_16F: int = 128

_OutputArray_DEPTH_MASK_16S: int = 8

_OutputArray_DEPTH_MASK_16U: int = 4

_OutputArray_DEPTH_MASK_32F: int = 32

_OutputArray_DEPTH_MASK_32S: int = 16

_OutputArray_DEPTH_MASK_64F: int = 64

_OutputArray_DEPTH_MASK_8S: int = 2

_OutputArray_DEPTH_MASK_8U: int = 1

_OutputArray_DEPTH_MASK_ALL: int = 127

_OutputArray_DEPTH_MASK_ALL_16F: int = 255

_OutputArray_DEPTH_MASK_ALL_BUT_8S: int = 125

_OutputArray_DEPTH_MASK_FLT: int = 96

__UMAT_USAGE_FLAGS_32BIT: int = 2147483647

__all__: ...
"""
['', 'ACCESS_FAST', 'ACCESS_MASK', 'ACCESS_READ', 'ACCESS_RW...
"""

ci_and_not_headless: bool
"""
True
"""

ci_build: bool
"""
True
"""

haarcascades: ...
"""
r'C:\\Users\\...\\AppData\\Local\\Programs\\Python\\Python38...
"""

headless: bool
"""
False
"""

# version: 4.5.2
